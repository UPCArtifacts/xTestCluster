/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 25 03:27:45 GMT 2022
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
import org.apache.commons.math.distribution.GammaDistribution;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractContinuousDistribution_ESTest extends AbstractContinuousDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(Double.NaN);
      double double0 = chiSquaredDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(4433.9419158028);
      double double0 = chiSquaredDistributionImpl0.inverseCumulativeProbability(Double.NaN);
      assertEquals(4434.9419158028, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      normalDistributionImpl0.setMean((-671.990094));
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(Double.NaN);
      assertEquals((-670.990094), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(1.580887032249125E-4);
      // Undeclared exception!
      try { 
        chiSquaredDistributionImpl0.inverseCumulativeProbability(1.580887032249125E-4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs.  Endpoints: [0, 0], Values: [0.943, 0.999]
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(3042.6);
      // Undeclared exception!
      chiSquaredDistributionImpl0.inverseCumulativeProbability(0.08333333333333333);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(Double.NaN);
      chiSquaredDistributionImpl0.setGamma((GammaDistribution) null);
      // Undeclared exception!
      try { 
        chiSquaredDistributionImpl0.inverseCumulativeProbability(Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.distribution.ChiSquaredDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(4433.9419158028);
      // Undeclared exception!
      try { 
        chiSquaredDistributionImpl0.inverseCumulativeProbability(4433.9419158028);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,433.942 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(Double.NaN);
      // Undeclared exception!
      try { 
        chiSquaredDistributionImpl0.inverseCumulativeProbability((-3349.54428163822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,349.544 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}

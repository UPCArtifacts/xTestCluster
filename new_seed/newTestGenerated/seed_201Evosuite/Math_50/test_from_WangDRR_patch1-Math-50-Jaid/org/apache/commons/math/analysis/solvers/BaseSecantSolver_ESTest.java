/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 25 05:18:27 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Constant;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Ulp;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Rint rint0 = new Rint();
      double double0 = regulaFalsiSolver0.solve(1108, (UnivariateRealFunction) rint0, (-1545.950679102), (double) 1108, 3.892988845872271E19);
      assertEquals((-1545.950679102), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.020590638652493, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Ceil ceil0 = new Ceil();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(911, (UnivariateRealFunction) ceil0, 0.1111111111111111, (-4.56167058145258E-5), 0.4729268521623453, allowedSolution0);
      assertEquals(0.4729268521623453, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-4.56167058145258E-5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-265.4032945179), (-265.4032945179), 0.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(447, (UnivariateRealFunction) tan0, 0.0, 834.9160059, allowedSolution0);
      assertEquals(834.9160059, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(181.0, 181.0);
      Gaussian gaussian0 = new Gaussian();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(90, (UnivariateRealFunction) gaussian0, 181.0, 0.0, allowedSolution0);
      assertEquals(181.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(181.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 914.0298039505, 0.0);
      Tan tan0 = new Tan();
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-1.296961545654727E14), 0.0, 914.0298039505);
      assertEquals(914.0298039505, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 914.0298039505, 0.0);
      Tan tan0 = new Tan();
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-1.296961545654727E14), (-4386.92923887), 914.0298039505);
      assertEquals((-4386.92923887), illinoisSolver0.getMax(), 0.01);
      assertEquals((-1.2632557623065298E14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2085, 2085, 2059.74856742007);
      illinoisSolver0.solve(20, (UnivariateRealFunction) tan0, (-4.149649752465535E30), (-1.296961545654727E14), (-4386.92923887), allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals((-4386.92923887), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.296961545654727E14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sigmoid sigmoid0 = new Sigmoid();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1, (UnivariateRealFunction) sigmoid0, (double) 1, (-1830.74098520851), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2508, (UnivariateRealFunction) atan0, (double) 2508, (double) 2508, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2,508, 2,508]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(3567, (UnivariateRealFunction) null, (double) 3567, (double) 3567, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sinh sinh0 = new Sinh();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.013567280596362252);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      illinoisSolver0.solve(941510867, (UnivariateRealFunction) sinh0, (-280.142081212212), (double) 941510867, (-1610.8727192572), allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinh sinh0 = new Sinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-3811), (UnivariateRealFunction) sinh0, (double) (-3811), (double) (-3811), (double) (-3811), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-3,811) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Constant constant0 = new Constant(1228);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1228, (UnivariateRealFunction) constant0, (double) 1228, (double) 1228, (double) 1228, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,228, 1,228]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2105, (UnivariateRealFunction) tan0, (double) 2105, 2831.8459514669935, 2831.8459514669935, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [2,105, 2,831.846], values: [0.134, 3.235]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 914.0298039505, 0.0);
      Tan tan0 = new Tan();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-1419), (UnivariateRealFunction) tan0, 914.0298039505, (-1.296961545654727E14), (-1.296961545654727E14));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,419) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Minus minus0 = new Minus();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1867, (UnivariateRealFunction) minus0, (double) 1867, (double) 1867, (double) 1867);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,867, 1,867]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2067, (UnivariateRealFunction) tan0, 2.718281828459045, (double) 2067, (double) 2067);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [2.718, 2,067], values: [-0.451, -0.17]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sinh sinh0 = new Sinh();
      illinoisSolver0.setup(2141207627, sinh0, 2141207627, 2141207627, (-2.278545018028058E-8));
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2,141,207,627, 2,141,207,627]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-2557.056035), 0.5);
      Ulp ulp0 = new Ulp();
      illinoisSolver0.setup(1300, ulp0, 0.5, 2.692858526215887E14, 0.0);
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0.5, 269,285,852,621,588.7], values: [0, 0.031]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(36, (UnivariateRealFunction) tan0, (double) 2085, 2868.347679023126, (double) 2085, allowedSolution0);
      assertEquals(2085.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2824.2917955772245, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2067, (UnivariateRealFunction) tan0, (double) 2067, 2831.8459514669935, 2831.8459514669935, allowedSolution0);
      assertEquals(2831.8459514669935, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2067.1679660427917, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2104, (UnivariateRealFunction) tan0, (-3080.550592161206), (double) 2104, (double) 2104, allowedSolution0);
      assertEquals(2104.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-2555.685623695315), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2085, 2085, 2059.74856742007);
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-1.296961545654727E14), 2059.74856742007, 0.0, allowedSolution0);
      assertEquals((-1.1898269383100677E14), double0, 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.2599210498948732, 3932.0, 3932.0);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-3080.550592161206), 2138.021, (double) 2085, allowedSolution0);
      assertEquals(2085.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-829.9124391195769), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.29546533, 1.29546533, 1826.65797);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 1826.65797, (double) 2085, 1.29546533, allowedSolution0);
      assertEquals(1.29546533, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2085.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.29546533, 1.29546533, 1826.65797);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 1826.65797, (double) 2085, 1.29546533, allowedSolution0);
      assertEquals(1.29546533, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2026.682698641659, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2831.8459514669935, 2831.8459514669935, 137.660770024575);
      double double0 = illinoisSolver0.solve(1481, (UnivariateRealFunction) tan0, 137.660770024575, (double) 1481, 137.660770024575, allowedSolution0);
      assertEquals(137.660770024575, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(137.660770024575, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.29546533, 1.29546533, 1826.65797);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 0.487391294859283, (double) 2085, 1.29546533, allowedSolution0);
      assertEquals(1.29546533, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(514.5850223529426, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2085, 2085, 2085);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      illinoisSolver0.solve(20, (UnivariateRealFunction) tan0, (double) 20, (double) 2085, 2831.8459514669935, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(2831.8459514669935, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(20.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-35.199301109885184), (-35.199301109885184), 1825.8092220575788);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 1825.8092220575788, (double) 2085, (-35.199301109885184), allowedSolution0);
      assertEquals((-35.199301109885184), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1896.2908083286493, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2067, (UnivariateRealFunction) tan0, (double) 2067, 2831.223096891694, 2831.223096891694, allowedSolution0);
      assertEquals(2831.223096891694, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2183.4068942451063, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(2067, (UnivariateRealFunction) tan0, 1.0000000000003333E-6, (double) 2067, 1.0000000000003333E-6);
      assertEquals(1.0000000000003333E-6, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(2065.5971698812514, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-448.86), (-3080.550592161206));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-0.0013888888689039883), 7.23048287909478E-11, 9.716415261201638E20, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(9.716415261201638E20, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Gaussian gaussian0 = new Gaussian();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(232, (UnivariateRealFunction) gaussian0, (-3614.055773827792), 1826.65797, allowedSolution0);
      assertEquals((-3614.055773827792), pegasusSolver0.getMin(), 0.01);
      assertEquals((-3614.055773827792), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinh sinh0 = new Sinh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(941510867, (UnivariateRealFunction) sinh0, (-38.1748), 543.6, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinh sinh0 = new Sinh();
      // Undeclared exception!
      regulaFalsiSolver0.solve(941510867, (UnivariateRealFunction) sinh0, (-1610.8727192572), (double) 941510867, 1.0E-6);
  }
}

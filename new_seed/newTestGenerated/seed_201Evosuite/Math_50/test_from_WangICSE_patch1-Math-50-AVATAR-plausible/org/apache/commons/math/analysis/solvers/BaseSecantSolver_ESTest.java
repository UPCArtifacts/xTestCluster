/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 25 04:55:14 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Constant;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log1p;
import org.apache.commons.math.analysis.function.Logistic;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2894.8358942618, (-608.021660081475), (-6.925130046780284));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Rint rint0 = new Rint();
      double double0 = illinoisSolver0.solve(85, (UnivariateRealFunction) rint0, (-3297.6), 223.40901257, (-608.021660081475), allowedSolution0);
      assertEquals((-608.021660081475), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.4084417653677974, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0);
      Sigmoid sigmoid0 = new Sigmoid(1878, 0.0);
      double double0 = illinoisSolver0.solve(1878, (UnivariateRealFunction) sigmoid0, (-2.540927643469762E14), 1.633123935319537E16, (-0.09088450866185192));
      assertEquals((-0.09088450866185192), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.633123935319537E16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Gaussian gaussian0 = new Gaussian();
      double double0 = regulaFalsiSolver0.solve(539, (UnivariateRealFunction) gaussian0, (double) 539, (double) 539, 1.1450131076874919);
      assertEquals(539.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(539.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206), (-3080.550592161206));
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(2085, (UnivariateRealFunction) identity0, (-260.0), (double) 2085, (double) 2085, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(2085.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.225743062930824E-8, 1.378050551190786E29, 1.225743062930824E-8);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      illinoisSolver0.solve(764, (UnivariateRealFunction) tan0, 1.225743062930824E-8, 806.05236049, 2.692858526215887E14, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(2.692858526215887E14, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(806.05236049, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2085, 2069.718768215679, 2894.8358942618);
      illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-3080.550592161206), 2069.718768215679, 0.15519483846337206, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(0.15519483846337206, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-3080.550592161206), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(1576828337, (UnivariateRealFunction) tanh0, (-3022.478344208112), Double.POSITIVE_INFINITY, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.7840727057082404E-8, 2.7840727057082404E-8, 2.7840727057082404E-8);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 1.5874010519681994, 0.5, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1.587, 0.5]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1906, (UnivariateRealFunction) null, (double) 1906, (double) 1906, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1576828337, (UnivariateRealFunction) tanh0, (-3022.478344208112), (double) 1576828337, (AllowedSolution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseSecantSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(90, (UnivariateRealFunction) tan0, (-3229.7951191111), 0.5, (double) 2085, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (90) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(3318, (UnivariateRealFunction) tan0, 1.5874010519681994, 1.5874010519681994, (-3080.550592161206), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1.587, 1.587]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.19999954120254515, 1.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-2.0), 8.251545029714408E-9, (-4.9E-324), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-2, 0], values: [2.185, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log1p log1p0 = new Log1p();
      // Undeclared exception!
      regulaFalsiSolver0.solve(1576828337, (UnivariateRealFunction) log1p0, (-1.0), (double) 1576828337, 620.037747);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Constant constant0 = new Constant((-150));
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-150), (UnivariateRealFunction) constant0, (double) (-150), (double) (-150), (double) (-150));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-150) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(5, (UnivariateRealFunction) cbrt0, (double) 5, (double) 5, (double) 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [5, 5]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-56748), (UnivariateRealFunction) null, (double) (-56748), (double) (-56748), (double) (-56748));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Inverse inverse0 = new Inverse();
      regulaFalsiSolver0.setup(174, inverse0, 174, 174, 1.2246467991473532E-16);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [174, 174]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Logistic logistic0 = new Logistic((-2094.0), (-2094.0), 571.642697458, 1576828337, 1576828337, 1.0E-6);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(1576828337, (UnivariateRealFunction) logistic0, (-2094.0), 1.0E-6, 0.2989971831467553, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828337, (UnivariateRealFunction) tanh0, (-3046.892988938914), (double) 1576828337, allowedSolution0);
      assertEquals(1.576828337E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.9055273045076783E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-542.5047647), (double) 1576828303, allowedSolution0);
      assertEquals(7.884138802476177E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.2320113276055112E-13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2130, (UnivariateRealFunction) tanh0, (-3022.478344208112), (double) 2130, allowedSolution0);
      assertEquals(2130.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(3.32469727983909E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3633, (UnivariateRealFunction) tanh0, (-3022.47834420811), (double) 3633, allowedSolution0);
      assertEquals(3633.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-2.5656071048169938E-14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2146056543, (UnivariateRealFunction) tanh0, (-3022.478344208112), (double) 2146056543, allowedSolution0);
      assertEquals(1.0730267602608279E9, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.8682261875422264E-21, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828337, (UnivariateRealFunction) tanh0, (-3022.478344208112), (double) 1576828337, allowedSolution0);
      assertEquals(1.576828337E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1.0597249934312654E-20), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828337, (UnivariateRealFunction) tanh0, (-3022.478344208112), (double) 1576828337, allowedSolution0);
      assertEquals(7.884126572608279E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(3.434505944346824E-11, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828337, (UnivariateRealFunction) tanh0, (-3022.478344208112), (double) 1576828337, allowedSolution0);
      assertEquals(1.576828337E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1.0597249934312654E-20), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828370, (UnivariateRealFunction) tanh0, (-1343.806555238037), (double) 1576828370, allowedSolution0);
      assertEquals(1.57682837E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1.6219986616848592E-10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log1p log1p0 = new Log1p();
      double double0 = regulaFalsiSolver0.solve(648, (UnivariateRealFunction) log1p0, (-0.010714690733195933), (double) 648, (-0.010714690733195933));
      assertEquals((-0.010714690733195933), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.2021365155370708E-16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log1p log1p0 = new Log1p();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(204, (UnivariateRealFunction) log1p0, (-0.010714690733195933), (double) 204, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (204) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-1.0), 0.07692307692307693, allowedSolution0);
      assertEquals((-0.46153846153846156), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2.1175823681357508E-22, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.4342944622039795, 1.0000000000003333E-6);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(2085, (UnivariateRealFunction) tan0, (-1.0), 0.5, allowedSolution0);
      assertEquals((-0.25), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      double double0 = regulaFalsiSolver0.solve(1576828337, (UnivariateRealFunction) tanh0, (double) 1576828337, 0.0, 0.0);
      assertEquals(1.576828337E9, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2894.8358942618, (-6.925130046780284));
      double double0 = illinoisSolver0.solve(218, (UnivariateRealFunction) tan0, 0.0, 2.863114320854288E-7, 0.75);
      assertEquals(2.863114320854288E-7, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(2144631334, (UnivariateRealFunction) tanh0, (-3022.47834420811), (double) 2144631334, allowedSolution0);
      assertEquals(2.144631334E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-4.816362723483237E-10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      regulaFalsiSolver0.solve(1576828337, (UnivariateRealFunction) tanh0, (-307.6), (double) 1576828337, (double) 1576828337);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 25 04:44:49 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Acosh;
import org.apache.commons.math.analysis.function.Cosh;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2894.8358942618, (-608.021660081475), (-6.925130046780284));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Rint rint0 = new Rint();
      double double0 = illinoisSolver0.solve(85, (UnivariateRealFunction) rint0, (-3297.6), 223.40901257, (-608.021660081475), allowedSolution0);
      assertEquals((-608.021660081475), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.4084417653677974, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.7840727057082404E-8, 2.7840727057082404E-8, 2.7840727057082404E-8);
      Tan tan0 = new Tan();
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 2.7840727057082404E-8, 2059.3140006377052, 2.7840727057082404E-8);
      assertEquals(2.7840727057082404E-8, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2059.313974493549, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0);
      Sigmoid sigmoid0 = new Sigmoid();
      double double0 = illinoisSolver0.solve(1878, (UnivariateRealFunction) sigmoid0, (-2.540927643469762E14), 1.633123935319537E16, (-0.09088450866185192));
      assertEquals(1.633123935319537E16, illinoisSolver0.getMax(), 0.01);
      assertEquals((-2.540927643469762E14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206), (-3080.550592161206));
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(2085, (UnivariateRealFunction) identity0, (-260.0), (double) 2085, (double) 2085, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(2085.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.225743062930824E-8, 1.378050551190786E29, 1.225743062930824E-8);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      illinoisSolver0.solve(764, (UnivariateRealFunction) tan0, 1.225743062930824E-8, 806.05236049, 2.692858526215887E14, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(2.692858526215887E14, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(806.05236049, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2085, 2069.718768215679, 2894.8358942618);
      illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-3080.550592161206), 2069.718768215679, 0.15519483846337206, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(0.15519483846337206, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-3080.550592161206), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-523.3731475493631), 525.4598768, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Acosh acosh0 = new Acosh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-1), (UnivariateRealFunction) acosh0, (double) (-1), (double) (-1), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.7840727057082404E-8, 2.7840727057082404E-8, 2.7840727057082404E-8);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 1.5874010519681994, 0.5, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1.587, 0.5]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-189), (UnivariateRealFunction) null, (double) (-189), (double) (-189), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1311999606, (UnivariateRealFunction) tanh0, (-3.180057), (double) 1311999606, (AllowedSolution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseSecantSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(3318, (UnivariateRealFunction) tan0, 1.5874010519681994, 1.5874010519681994, (-3080.550592161206), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1.587, 1.587]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.19999954120254515, 1.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-2.0), 8.251545029714408E-9, (-4.9E-324), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-2, 0], values: [2.185, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      // Undeclared exception!
      regulaFalsiSolver0.solve(2089849767, (UnivariateRealFunction) sin0, (-813.108569655487), 1.0, (-1143.475503));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Logit logit0 = new Logit((-264), (-264));
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-264), (UnivariateRealFunction) logit0, (double) (-264), (double) (-264), (double) (-264));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-264) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(8388607, (UnivariateRealFunction) null, (double) 8388607, (double) 8388607, (double) 8388607);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-0.0029928126634245827));
      Cosh cosh0 = new Cosh();
      pegasusSolver0.setup(110, cosh0, 110, 110, (-0.0029928126634245827));
      // Undeclared exception!
      try { 
        pegasusSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [110, 110]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      illinoisSolver0.setup(2085, tan0, (-1564.016698227421), 540.7223114670827, (-1564.016698227421));
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-1,564.017, 540.722], values: [0.542, 0.386]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(424, (UnivariateRealFunction) tanh0, (-0.9999999999999747), (double) 424, allowedSolution0);
      assertEquals(211.50000000000003, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.4273818803457034E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(16, (UnivariateRealFunction) tanh0, (-1844.2), (double) 16, allowedSolution0);
      assertEquals((-914.1), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-449.04999999998824), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1311999595, (UnivariateRealFunction) tanh0, (-1.6751659946116337), (double) 1311999595, allowedSolution0);
      assertEquals(6.559997966624169E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2.2575265682306172E-14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1311999606, (UnivariateRealFunction) tanh0, (-0.38789784126587107), (double) 1311999606, allowedSolution0);
      assertEquals(6.55999802806051E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3.1719137940344123E-14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1311999606, (UnivariateRealFunction) tanh0, (-0.9999999999999747), (double) 1311999606, allowedSolution0);
      assertEquals(6.559998025E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2.0771566686101197E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1311999606, (UnivariateRealFunction) tanh0, (-0.9999999999999747), (double) 1311999606, allowedSolution0);
      assertEquals(6.559998025E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(4.079884406449577E-17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1311999606, (UnivariateRealFunction) tanh0, (-1.6428929023856324E-4), (double) 1311999606, allowedSolution0);
      assertEquals(6.559998029999179E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.527450501957709E-17), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1311999606, (UnivariateRealFunction) tanh0, (-0.9999999999999747), (double) 1311999606, allowedSolution0);
      assertEquals(6.559998025E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(4.079884406449577E-17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1311999613, (UnivariateRealFunction) tanh0, (-0.9999999999999747), (double) 1311999613, allowedSolution0);
      assertEquals(6.55999806E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2.0771570303975426E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1311999595, (UnivariateRealFunction) tanh0, (-1.2495827409833475), (double) 1311999595, allowedSolution0);
      assertEquals(6.559997968752086E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(4.76384382599494E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(1311999606, (UnivariateRealFunction) tanh0, (-0.9999999999999747), (double) 1311999606, allowedSolution0);
      assertEquals(6.559998025E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(4.079884406449577E-17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(115, (UnivariateRealFunction) expm1_0, (-2134.98836), (double) 115, (double) 115, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (115) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-1.0), 0.07692307692307693, allowedSolution0);
      assertEquals((-0.46153846153846156), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-2.1175823681337581E-22), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(2085, (UnivariateRealFunction) tan0, (-1.0), 0.07692307692307693, allowedSolution0);
      assertEquals((-0.46153846153846156), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sigmoid sigmoid0 = new Sigmoid();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2110, (UnivariateRealFunction) sigmoid0, (double) 2110, (-4467.47734519155), allowedSolution0);
      assertEquals((-4467.47734519155), regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-4467.47734519155), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2894.8358942618, (-6.925130046780284));
      double double0 = illinoisSolver0.solve(218, (UnivariateRealFunction) tan0, 0.0, 2.863114320854288E-7, 0.75);
      assertEquals(2.863114320854288E-7, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 184.050736521, 184.050736521, 184.050736521);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [184.051, 184.051]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206), (-3080.550592161206));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      illinoisSolver0.solve(3371, (UnivariateRealFunction) tan0, (-3080.550592161206), (-688.25), (-75.516546), allowedSolution0);
  }
}

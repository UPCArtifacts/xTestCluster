/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 25 04:57:48 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2894.8358942618, (-608.021660081475), (-6.925130046780284));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Rint rint0 = new Rint();
      double double0 = illinoisSolver0.solve(85, (UnivariateRealFunction) rint0, (-3297.6), 223.40901257, (-608.021660081475), allowedSolution0);
      assertEquals((-608.021660081475), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.4084417653677974, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Gaussian gaussian0 = new Gaussian(3, 3.519214381619341E-9);
      double double0 = pegasusSolver0.solve(3, (UnivariateRealFunction) gaussian0, 3.519214381619341E-9, (double) 3, 3.519214381619341E-9);
      assertEquals(3.519214381619341E-9, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(3.519214381619341E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206), (-3080.550592161206));
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(2085, (UnivariateRealFunction) identity0, (-260.0), (double) 2085, (double) 2085, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(2085.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.225743062930824E-8, 1.378050551190786E29, 1.225743062930824E-8);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      illinoisSolver0.solve(764, (UnivariateRealFunction) tan0, 1.225743062930824E-8, 806.05236049, 2.692858526215887E14, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(2.692858526215887E14, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(806.05236049, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2085, 2069.718768215679, 2894.8358942618);
      illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-3080.550592161206), 2069.718768215679, 0.15519483846337206, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(0.15519483846337206, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-3080.550592161206), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(1979031007, (UnivariateRealFunction) tanh0, Double.NEGATIVE_INFINITY, 3526.857519973752, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-1), (UnivariateRealFunction) cos0, (double) (-1), (double) (-1), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.7840727057082404E-8, 2.7840727057082404E-8, 2.7840727057082404E-8);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 1.5874010519681994, 0.5, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1.587, 0.5]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-21), (UnivariateRealFunction) null, (double) (-21), (double) (-21), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-979.47592523), (double) 1576828303, (AllowedSolution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseSecantSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206), (-3080.550592161206));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      illinoisSolver0.solve(3371, (UnivariateRealFunction) tan0, (-3080.550592161206), (-688.25), (-75.516546), allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-2147483587), (UnivariateRealFunction) atan0, (double) (-2147483587), (double) (-2147483587), (double) (-2147483587), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,147,483,587) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(3318, (UnivariateRealFunction) tan0, 1.5874010519681994, 1.5874010519681994, (-3080.550592161206), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1.587, 1.587]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.19999954120254515, 1.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-2.0), 8.251545029714408E-9, (-4.9E-324), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-2, 0], values: [2.185, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3079.446091264824), (-3079.446091264824), (-3079.446091264824));
      Tan tan0 = new Tan();
      // Undeclared exception!
      illinoisSolver0.solve(758697391, (UnivariateRealFunction) tan0, (-535.16), (double) 758697391, (-3079.446091264824));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Log10 log10_0 = new Log10();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve((-478), (UnivariateRealFunction) log10_0, (double) (-478), (double) (-478), (double) (-478));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-478) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(5, (UnivariateRealFunction) cbrt0, (double) 5, (double) 5, (double) 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [5, 5]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(304212062, (UnivariateRealFunction) null, (double) 304212062, (double) 304212062, (double) 304212062);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      regulaFalsiSolver0.setup(97790255, cbrt0, 97790255, 1.0E-6, 1.0E-6);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [97,790,255, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Signum signum0 = new Signum();
      regulaFalsiSolver0.setup(432, signum0, 23.49657789470335, 432, 23.49657789470335);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [23.497, 432], values: [1, 1]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(90, (UnivariateRealFunction) tan0, (-3325.3754), 3.8225073629948715E-14, 1.0E-6, allowedSolution0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.5648452042973926E-14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-1631.19579), (double) 1576828303, allowedSolution0);
      assertEquals(7.88413335902105E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2.2852541451721746E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(30, (UnivariateRealFunction) tanh0, (-988.4265163998065), (double) 30, allowedSolution0);
      assertEquals((-479.21325819990324), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-7.825714205802803E-13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828351, (UnivariateRealFunction) tanh0, (-3.56990048077156), (double) 1576828351, allowedSolution0);
      assertEquals(1.576828351E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(4.661000862564267E-14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(46, (UnivariateRealFunction) tanh0, (-985.883689415812), (double) 46, allowedSolution0);
      assertEquals((-469.94184470790594), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-6.051419632521738E-11), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(30, (UnivariateRealFunction) tanh0, (-985.883689415812), (double) 30, allowedSolution0);
      assertEquals(30.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(4.803065585819783E-20, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(555, (UnivariateRealFunction) tanh0, (-1983.1355809389872), (double) 555, allowedSolution0);
      assertEquals(555.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-8.642760077601405E-27), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-979.47592522911), (double) 1576828303, allowedSolution0);
      assertEquals(7.884136617620374E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(3.303858628210299E-18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-1.6191199830525167), (double) 1576828303, allowedSolution0);
      assertEquals(1.576828303E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-7.501171062663491E-21), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(2147483621, (UnivariateRealFunction) tan0, (-1.0), 1.0E-6, allowedSolution0);
      assertEquals((-0.49999950000000004), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(580, (UnivariateRealFunction) tanh0, (-979.47592523), (double) 580, allowedSolution0);
      assertEquals(580.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.740531234553167E-8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Log log0 = new Log();
      double double0 = pegasusSolver0.solve(15, (UnivariateRealFunction) log0, 1.0E-6, (double) 15, 1.0E-6);
      assertEquals(1.0E-6, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.9999999999999999, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Signum signum0 = new Signum();
      double double0 = illinoisSolver0.solve(296, (UnivariateRealFunction) signum0, (-3345.512814), 1063.6282743810668, 1063.6282743810668);
      assertEquals(1063.6282743810668, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-5.242996652528318E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(2147483621, (UnivariateRealFunction) tan0, (-1.0), 1.0E-6, allowedSolution0);
      assertEquals((-0.49999950000000004), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Rint rint0 = new Rint();
      double double0 = pegasusSolver0.solve(1012470496, (UnivariateRealFunction) rint0, (double) 1012470496, (-1.1769158714281245E-8), (-1.1769158714281245E-8));
      assertEquals((-1.1769158714281245E-8), pegasusSolver0.getMax(), 0.01);
      assertEquals((-1.1769158714281245E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2894.8358942618, (-6.925130046780284));
      double double0 = illinoisSolver0.solve(218, (UnivariateRealFunction) tan0, 0.0, 2.863114320854288E-7, 0.75);
      assertEquals(2.863114320854288E-7, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2085, 2085, 2085);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-1.0), 0.07692307692307693, allowedSolution0);
      assertEquals((-0.46153846153846156), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      regulaFalsiSolver0.solve(1893677209, (UnivariateRealFunction) cos0, 3356.20347878822, (double) 1893677209, 1.1729626924728665E-8);
  }
}

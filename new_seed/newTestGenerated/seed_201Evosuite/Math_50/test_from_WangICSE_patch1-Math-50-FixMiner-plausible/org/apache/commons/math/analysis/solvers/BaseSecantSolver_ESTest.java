/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 25 04:52:35 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2894.8358942618, (-608.021660081475), (-6.925130046780284));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Rint rint0 = new Rint();
      double double0 = illinoisSolver0.solve(85, (UnivariateRealFunction) rint0, (-3297.6), 223.40901257, (-608.021660081475), allowedSolution0);
      assertEquals((-608.021660081475), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.4084417653677974, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0);
      Sigmoid sigmoid0 = new Sigmoid();
      double double0 = illinoisSolver0.solve(1878, (UnivariateRealFunction) sigmoid0, (-2.540927643469762E14), 1.633123935319537E16, (-0.09088450866185192));
      assertEquals(1.633123935319537E16, illinoisSolver0.getMax(), 0.01);
      assertEquals((-2.540927643469762E14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206), (-3080.550592161206));
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(2085, (UnivariateRealFunction) identity0, (-260.0), (double) 2085, (double) 2085, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(2085.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.225743062930824E-8, 1.378050551190786E29, 1.225743062930824E-8);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      illinoisSolver0.solve(764, (UnivariateRealFunction) tan0, 1.225743062930824E-8, 806.05236049, 2.692858526215887E14, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(2.692858526215887E14, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(806.05236049, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2085, 2069.718768215679, 2894.8358942618);
      illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-3080.550592161206), 2069.718768215679, 0.15519483846337206, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(0.15519483846337206, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-3080.550592161206), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(1576828295, (UnivariateRealFunction) expm1_0, (-979.47592522911), (double) 1576828295, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-1), (UnivariateRealFunction) cos0, (double) (-1), (double) (-1), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.7840727057082404E-8, 2.7840727057082404E-8, 2.7840727057082404E-8);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 1.5874010519681994, 0.5, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1.587, 0.5]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-21), (UnivariateRealFunction) null, (double) (-21), (double) (-21), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1576828316, (UnivariateRealFunction) tanh0, (-986.1805967542382), (double) 1576828316, (AllowedSolution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseSecantSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2429.814042468);
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(3037, (UnivariateRealFunction) expm1_0, (-2052.05568897), (double) 3037, (-0.999999999998896), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (3,037) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-2147483587), (UnivariateRealFunction) atan0, (double) (-2147483587), (double) (-2147483587), (double) (-2147483587), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,147,483,587) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(3318, (UnivariateRealFunction) tan0, 1.5874010519681994, 1.5874010519681994, (-3080.550592161206), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1.587, 1.587]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.19999954120254515, 1.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-2.0), 8.251545029714408E-9, (-4.9E-324), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-2, 0], values: [2.185, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Inverse inverse0 = new Inverse();
      // Undeclared exception!
      regulaFalsiSolver0.solve(1576828312, (UnivariateRealFunction) inverse0, (-1.100655796203199), (double) 1576828312, (double) 1576828312);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(5, (UnivariateRealFunction) cbrt0, (double) 5, (double) 5, (double) 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [5, 5]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(304212062, (UnivariateRealFunction) null, (double) 304212062, (double) 304212062, (double) 304212062);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      regulaFalsiSolver0.setup(2146769857, asinh0, 2146769857, 2146769857, 2146769857);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2,146,769,857, 2,146,769,857]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sigmoid sigmoid0 = new Sigmoid(4489, 4489);
      regulaFalsiSolver0.setup(4489, sigmoid0, (-0.8516717280857429), 0.0, (-0.8516717280857429));
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-0.852, 0], values: [4,489, 4,489]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(90, (UnivariateRealFunction) tan0, (-3325.3754), 3.8225073629948715E-14, 1.0E-6, allowedSolution0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.5648452042973926E-14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-1631.19579), (double) 1576828303, allowedSolution0);
      assertEquals(7.88413335902105E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2.2852541451721746E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828312, (UnivariateRealFunction) tanh0, (-922.4339), (double) 1576828312, allowedSolution0);
      assertEquals(7.884136947830501E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.2106921899199452E-15), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828351, (UnivariateRealFunction) tanh0, (-3.56990048077156), (double) 1576828351, allowedSolution0);
      assertEquals(1.576828351E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(4.661000862564267E-14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(46, (UnivariateRealFunction) tanh0, (-985.883689415812), (double) 46, allowedSolution0);
      assertEquals((-469.94184470790594), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-6.051419632521738E-11), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(30, (UnivariateRealFunction) tanh0, (-985.883689415812), (double) 30, allowedSolution0);
      assertEquals((-477.941844707906), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(4.803065585819783E-20, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(73, (UnivariateRealFunction) tanh0, (-985.883689415812), (double) 73, allowedSolution0);
      assertEquals(73.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1.7763424481119533E-19), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-979.47592522911), (double) 1576828303, allowedSolution0);
      assertEquals(1.576828303E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(3.303858628210299E-18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-1.6191199830525167), (double) 1576828303, allowedSolution0);
      assertEquals(7.884141506904399E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-7.501171062663491E-21), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(2147483621, (UnivariateRealFunction) tan0, (-1.0), 1.0E-6, allowedSolution0);
      assertEquals((-0.49999950000000004), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(73, (UnivariateRealFunction) tanh0, (-985.883689415812), (double) 73, allowedSolution0);
      assertEquals((-456.44184470790594), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(3.4815836535094773E-10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(59, (UnivariateRealFunction) tan0, (-692.525775513196), 0.9999997615814209, 0.9999997615814209);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (59) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Signum signum0 = new Signum();
      double double0 = illinoisSolver0.solve(296, (UnivariateRealFunction) signum0, (-3345.512814), 1063.6282743810668, 1063.6282743810668);
      assertEquals(1063.6282743810668, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-5.242996652528318E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(2147483621, (UnivariateRealFunction) tan0, (-1.0), 1.0E-6, allowedSolution0);
      assertEquals((-0.49999950000000004), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sigmoid sigmoid0 = new Sigmoid();
      double double0 = regulaFalsiSolver0.solve(991866653, (UnivariateRealFunction) sigmoid0, (double) 991866653, (-1980.714), (-1980.714));
      assertEquals((-1980.714), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1980.714), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2894.8358942618, (-6.925130046780284));
      double double0 = illinoisSolver0.solve(218, (UnivariateRealFunction) tan0, 0.0, 2.863114320854288E-7, 0.75);
      assertEquals(2.863114320854288E-7, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2085, 2085, 2085);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-1.0), 0.07692307692307693, allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getMin(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      regulaFalsiSolver0.solve(1576828312, (UnivariateRealFunction) tanh0, (-549.8053456428826), (double) 1576828312, (double) 1576828312);
  }
}

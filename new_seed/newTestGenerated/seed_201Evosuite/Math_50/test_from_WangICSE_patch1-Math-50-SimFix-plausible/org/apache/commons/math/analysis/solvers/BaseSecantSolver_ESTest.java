/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 25 04:47:29 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2894.8358942618, (-608.021660081475), (-6.925130046780284));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Rint rint0 = new Rint();
      double double0 = illinoisSolver0.solve(85, (UnivariateRealFunction) rint0, (-3297.6), 223.40901257, (-608.021660081475), allowedSolution0);
      assertEquals((-608.021660081475), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.4084417653677974, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Exp exp0 = new Exp();
      double double0 = regulaFalsiSolver0.solve(50050030, (UnivariateRealFunction) exp0, (-3872.374131207), (double) 50050030, (double) 50050030);
      assertEquals(5.005003E7, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3872.374131207), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0);
      Sigmoid sigmoid0 = new Sigmoid(1878, 0.0);
      double double0 = illinoisSolver0.solve(1878, (UnivariateRealFunction) sigmoid0, (-2.540927643469762E14), 1.633123935319537E16, (-0.09088450866185192));
      assertEquals((-2.540927643469762E14), illinoisSolver0.getMin(), 0.01);
      assertEquals(1.633123935319537E16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206), (-3080.550592161206));
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(2085, (UnivariateRealFunction) identity0, (-260.0), (double) 2085, (double) 2085, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(2085.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.225743062930824E-8, 1.378050551190786E29, 1.225743062930824E-8);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      illinoisSolver0.solve(764, (UnivariateRealFunction) tan0, 1.225743062930824E-8, 806.05236049, 2.692858526215887E14, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(806.05236049, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2085, 2069.718768215679, 2894.8358942618);
      illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, (-3080.550592161206), 2069.718768215679, 0.15519483846337206, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(0.15519483846337206, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-3080.550592161206), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(5630, (UnivariateRealFunction) tan0, (-886872.2989361201), 0.008333333333329196, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1.0));
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(242, (UnivariateRealFunction) tan0, (-1.0), 0.031, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (242) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2001382763, (UnivariateRealFunction) log0, (double) 2001382763, (double) 2001382763, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2,001,382,763, 2,001,382,763]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1555, (UnivariateRealFunction) null, (-2171.60759), (-2171.60759), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0), (-1.0));
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      illinoisSolver0.solve(2147483623, (UnivariateRealFunction) tan0, 22.0, (double) 2147483623, (-1.0), allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-2147483587), (UnivariateRealFunction) atan0, (double) (-2147483587), (double) (-2147483587), (double) (-2147483587), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,147,483,587) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(3318, (UnivariateRealFunction) tan0, 1.5874010519681994, 1.5874010519681994, (-3080.550592161206), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1.587, 1.587]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(3, (UnivariateRealFunction) null, (double) 3, 1.2393345855018391E-8, (double) 3, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3079.446091264824), (-3079.446091264824), (-3079.446091264824));
      Tan tan0 = new Tan();
      // Undeclared exception!
      illinoisSolver0.solve(758697391, (UnivariateRealFunction) tan0, (-535.16), (double) 758697391, 6.821210263296962E-12);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Gaussian gaussian0 = new Gaussian(0.1428571343421936, 0.1428571343421936);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-2337), (UnivariateRealFunction) gaussian0, (double) (-2337), (double) (-2337), 0.1428571343421936);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,337) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(5, (UnivariateRealFunction) cbrt0, (double) 5, (double) 5, (double) 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [5, 5]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) cbrt0, 2560.289710481719, (double) 1576828303, 2560.289710481719);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [2,560.29, 1,576,828,303], values: [13.68, 1,163.933]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      regulaFalsiSolver0.setup(5, polynomialFunction0, 5.0, 5.0, 1.1296682888011765E-24);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [5, 5]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Exp exp0 = new Exp();
      regulaFalsiSolver0.setup(2147479270, exp0, 0.3333333134651184, 2147479270, 2147479270);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0.333, 2,147,479,270], values: [1.396, \u221E]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-543.9753706039603), (double) 1576828303, allowedSolution0);
      assertEquals(7.884138795123147E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(6.762104184858851E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2085);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 22.0, (double) 2085, (double) 2085, allowedSolution0);
      assertEquals(2085.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(33.21700524473226, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 38.52132790071778, (double) 2085, (double) 2085, allowedSolution0);
      assertEquals(2085.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1468.6945662686178, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-528.590357885099), (double) 1576828303, allowedSolution0);
      assertEquals(7.88413887204821E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(6.026378857821393E-19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1.0));
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(292, (UnivariateRealFunction) tan0, (-1.0), 1.3505091590065623, allowedSolution0);
      assertEquals(0.17525457950328116, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-8.327728034327369E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-832.0));
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(159, (UnivariateRealFunction) asinh0, (-832.0), 5.464221199275238E-104, allowedSolution0);
      assertEquals((-416.0), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1.0));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(331, (UnivariateRealFunction) tan0, (-1.0), 1.3505091590065623, allowedSolution0);
      assertEquals(0.17525457950328116, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-8.327728034327369E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-542.5047647), 1.3505091590065623, allowedSolution0);
      assertEquals((-270.5771277704967), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(8.058548623856449E-23, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      double double0 = regulaFalsiSolver0.solve(1576828303, (UnivariateRealFunction) tanh0, (-1650.0466), (double) 1576828303, (-1650.0466));
      assertEquals((-1650.0466), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2.567474405492828E-17), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.7840727057082404E-8, 2.7840727057082404E-8, 2.7840727057082404E-8);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 2.7840727057082404E-8, (double) 2085, 1.5874010519681994, allowedSolution0);
      assertEquals(1.5874010519681994, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2059.3140006377052, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2085, (UnivariateRealFunction) tan0, 22.0, (double) 2085, (double) 2085, allowedSolution0);
      assertEquals(2085.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(26.7035375328478, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1505, (UnivariateRealFunction) tan0, (-1.0), 1.0E-6, allowedSolution0);
      assertEquals((-1.0), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      double double0 = regulaFalsiSolver0.solve(1073739210, (UnivariateRealFunction) tanh0, (double) 1073739210, 0.0, 0.0);
      assertEquals(1.07373921E9, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2085, 2085, 331);
      double double0 = regulaFalsiSolver0.solve(2085, (UnivariateRealFunction) tan0, (-1948.859707023), (double) 331, allowedSolution0);
      assertEquals(331.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1948.859707023), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      regulaFalsiSolver0.solve(513, (UnivariateRealFunction) cbrt0, (-1.0), (double) 513, (-1.0));
  }
}

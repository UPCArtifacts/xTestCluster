/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 25 05:23:24 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Log1p;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-5422.654149888), (-2.614321876069694E-10), (-2.614321876069694E-10));
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1018, univariateRealFunction0, (-4991.82), (-2.614321876069694E-10), 0.2, allowedSolution0);
      assertEquals(0.2, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Gaussian gaussian0 = new Gaussian(1269, 0.5, 0.16666666666666666);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1269, (UnivariateRealFunction) gaussian0, (-2750.75713), 0.16666666666666666, allowedSolution0);
      assertEquals(0.16666666666666666, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-2750.75713), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-265.4032945179), (-265.4032945179), 0.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(447, (UnivariateRealFunction) tan0, 0.0, 834.9160059, allowedSolution0);
      assertEquals(834.9160059, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0, 1.0E-6, 1.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      pegasusSolver0.solve(4, (UnivariateRealFunction) tan0, 0.0, (-2985.44579), (-1.7168146928204135), allowedSolution0);
      double double0 = pegasusSolver0.doSolve();
      assertEquals((-1.7168146928204135), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(751, (UnivariateRealFunction) tan0, 8.251545029714408E-9, 1.6493110087365634, 1.304E19, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(1.304E19, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.5707963267948908, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-5422.654149888), (-2602.7030003102), (-2602.7030003102));
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      regulaFalsiSolver0.solve(1018, univariateRealFunction0, (-4991.82), (-2602.7030003102), 0.19999999999923582, allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(0.19999999999923582, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3726.3510018704806), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-1446), (UnivariateRealFunction) identity0, (double) (-1446), (double) (-1446), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,446) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(373, (UnivariateRealFunction) identity0, (double) 373, (double) 373, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [373, 373]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2147483645, (UnivariateRealFunction) null, (double) 2147483645, (double) 2147483645, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log1p log1p0 = new Log1p();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(3381, (UnivariateRealFunction) log1p0, (-1.0), 1448.0, 1448.0, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-484.4725578), (-484.4725578));
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(106, (UnivariateRealFunction) tan0, (-2.568535939683023E-8), 1.1617411226618236E-10, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (106) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(781, (UnivariateRealFunction) tanh0, (double) 781, (double) 781, (double) 781, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [781, 781]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-3038.201068535768));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2147480302, (UnivariateRealFunction) cbrt0, 5.495750357934599E-46, (double) 2147480302, (double) 3663, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 2,147,480,302], values: [0, 1,290.158]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-3038.201068535768), (-3038.201068535768), (-3038.201068535768));
      // Undeclared exception!
      regulaFalsiSolver0.solve(3663, (UnivariateRealFunction) cbrt0, (-3038.201068535768), (double) 3663, (double) 3663);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-301), (UnivariateRealFunction) sin0, (double) (-301), (double) (-301), (double) (-301));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-301) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.24764147622668076, 0.24764147622668076, 0.24764147622668076);
      Tan tan0 = new Tan();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(106, (UnivariateRealFunction) tan0, 3275.6, (-4424.400859616708), (-62.24811465317509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [3,275.6, -4,424.401]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(923, (UnivariateRealFunction) null, (double) 923, (double) 923, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2807.88014579825, 1018, 6000763.146022816);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      regulaFalsiSolver0.setup(512, sinc0, 194.3719424, 194.3719424, 2.3568545750340535);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [194.372, 194.372]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(766, (UnivariateRealFunction) tan0, (-3080.550592161206), 1.6493110087365634, 0.5, allowedSolution0);
      assertEquals(0.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-2536.836067773774), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(3069, (UnivariateRealFunction) asinh0, (-3015.1638767921295), 1.3858744357814076E-13, (double) 3069, allowedSolution0);
      assertEquals(3069.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-4.786659760099741E-11), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3097, (UnivariateRealFunction) asinh0, (-3015.1638767921295), (double) 3097, (double) 3097, allowedSolution0);
      assertEquals(3097.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.238217571097268E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3097, (UnivariateRealFunction) asinh0, (-3015.1638767921295), (double) 3097, allowedSolution0);
      assertEquals(3097.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-4.3423697201428E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      double double0 = regulaFalsiSolver0.solve(3069, (UnivariateRealFunction) asinh0, (-3015.1638767921295), (double) 3069, (-3015.1638767921295));
      assertEquals((-3015.1638767921295), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.3858744357814076E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2014, (UnivariateRealFunction) sinc0, 0.0, (double) 2014, allowedSolution0);
      assertEquals(1007.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2013.7608909510575, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1372, (UnivariateRealFunction) asinh0, (-292.18), (double) 3052, (double) 3052, allowedSolution0);
      assertEquals(3052.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(4.175730279623943E-12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3038.201068535768), (-1543.276740767));
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(3663, (UnivariateRealFunction) cbrt0, (-469.8272355867544), 42864.45966944271, allowedSolution0);
      assertEquals(21197.316216927975, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.8783603267414785E-46, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-3038.201068535768));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1530, (UnivariateRealFunction) cbrt0, (-960.252151807), 8.397175413052351E-23, allowedSolution0);
      assertEquals((-480.1260759035), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(7.75522642142011E-46, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-3038.201068535768));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1207, (UnivariateRealFunction) cbrt0, (-3038.201068535768), (double) 1207, allowedSolution0);
      assertEquals((-915.6005342678841), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-7.8547080979059E-46), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-2602.7030003102), (-2602.7030003102), (-3054.7390637722187));
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-3054.7390637722187));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(2147483598, (UnivariateRealFunction) harmonicOscillator0, (-1432.2980260276984), 1.3385915536385138, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1778.051803643194), 1.765254609153999E-13);
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(897, (UnivariateRealFunction) cbrt0, (-11.994622260291896), 1.765254609153999E-13, allowedSolution0);
      assertEquals((-5.99731113014586), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.0053115796261679E-13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(163);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(163, (UnivariateRealFunction) asinh0, (-1.1368869198003874E-15), 1.0, allowedSolution0);
      assertEquals(0.49999999999999944, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.1368869198003874E-15), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      double double0 = regulaFalsiSolver0.solve(199, (UnivariateRealFunction) asinh0, (-1.1368869198003874E-15), (double) 199, (double) 199);
      assertEquals(199.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Ceil ceil0 = new Ceil();
      double double0 = regulaFalsiSolver0.solve(719911633, (UnivariateRealFunction) ceil0, (double) 719911633, (-0.16624879837036133), (double) 719911633);
      assertEquals(7.19911633E8, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-0.16624879837036133), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      regulaFalsiSolver0.solve(3100, (UnivariateRealFunction) asinh0, (-429.594771883), (double) 3100, (-429.594771883));
  }
}

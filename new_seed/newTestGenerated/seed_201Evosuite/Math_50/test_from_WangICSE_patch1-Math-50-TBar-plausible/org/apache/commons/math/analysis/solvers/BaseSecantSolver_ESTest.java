/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 25 05:00:30 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asin;
import org.apache.commons.math.analysis.function.Cosh;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      double double0 = illinoisSolver0.solve(Integer.MAX_VALUE, (UnivariateRealFunction) tan0, (-76.3), 4.9E-324, (double) Integer.MAX_VALUE);
      assertEquals(2.147483647E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-2.9E-322), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0E-6, 1.0E-6);
      Rint rint0 = new Rint();
      double double0 = illinoisSolver0.solve(1713, (UnivariateRealFunction) rint0, (-985.504), 1311.254052247);
      assertEquals(162.87502612349988, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.3921425840408119, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-265.4032945179), (-265.4032945179), 0.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(447, (UnivariateRealFunction) tan0, 0.0, 834.9160059, allowedSolution0);
      assertEquals(417.45800295, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0, 1.0, 1.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2147483606, (UnivariateRealFunction) tan0, (-5518.007978043227), 1.0, (double) 2147483606, allowedSolution0);
      assertEquals(2.147483606E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-374.0020073300187), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0, 1.0E-6, 1.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      pegasusSolver0.solve(4, (UnivariateRealFunction) tan0, 0.0, (-2985.44579), (-1.7168146928204135), allowedSolution0);
      double double0 = pegasusSolver0.doSolve();
      assertEquals((-1.7168146928204135), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0, 1.0, 1.0);
      Tan tan0 = new Tan();
      illinoisSolver0.solve(1249, (UnivariateRealFunction) tan0, 1.853071246671334E-6, 37656.963931266, 37656.963931266);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(37656.963931266, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.01883352848381037, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      illinoisSolver0.solve(2147476002, (UnivariateRealFunction) tan0, (-1628.8669719267555), 0.5, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals((-814.1834859633777), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-9.42477796076938), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), (-3080.550592161206));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      illinoisSolver0.solve(2147476002, (UnivariateRealFunction) tan0, (-1628.8669719267555), 0.5, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0, 1.0, 1.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-984371540), (UnivariateRealFunction) tan0, 5.650007086920087E-9, 6753.623, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-984,371,540) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cosh cosh0 = new Cosh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1284, (UnivariateRealFunction) cosh0, (double) 1284, (double) 1284, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,284, 1,284]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(15, (UnivariateRealFunction) null, (double) 15, (double) 15, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sinh sinh0 = new Sinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      illinoisSolver0.solve(500530859, (UnivariateRealFunction) sinh0, (-231.614472), 905.7970258742571, (double) 500530859, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3080.550592161206), 0.6366197723675814);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-229), (UnivariateRealFunction) tan0, 1.5874010519681994, (double) (-229), (-3080.550592161206), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-229) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cosh cosh0 = new Cosh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2, (UnivariateRealFunction) cosh0, (double) 2, (double) 2, (double) 2, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2, 2]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0, 1.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1784, (UnivariateRealFunction) tan0, (-466.12358674), 1.5874010519681994, 864.8282553149829, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-466.124, 1.587], values: [-2.346, -60.218]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(199, (UnivariateRealFunction) tan0, (-3080.550592161206), 2.356194490192345, (double) 2085, (AllowedSolution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseSecantSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tan tan0 = new Tan();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-5518.007978043227), (-1.0));
      // Undeclared exception!
      illinoisSolver0.solve(2147483606, (UnivariateRealFunction) tan0, (-979.2), (-374.0020073300187), 797.46939);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asin asin0 = new Asin();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-60710172), (UnivariateRealFunction) asin0, (double) (-60710172), (double) (-60710172), (double) (-60710172));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-60,710,172) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0, 1.0, 1.0);
      Tan tan0 = new Tan();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2147483606, (UnivariateRealFunction) tan0, 2971.3983, (-2168.0966765), (-1901.415634));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2,971.398, -2,168.097]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2147390167, (UnivariateRealFunction) null, (double) 2147390167, (double) 2147390167, (double) 2147390167);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0, 1.0, 1.0);
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(43808, (-1.7976931348623157E308), 43808);
      illinoisSolver0.setup(43808, harmonicOscillator0, 43808, 305.24710375, 305.24710375);
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [43,808, 305.247]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      illinoisSolver0.setup(5, tan0, (-2316.2441668), (-267.8410369), 5);
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-2,316.244, -267.841], values: [-1.236, -1.041]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2137, (UnivariateRealFunction) tan0, (-1.0), (double) 2137, 1979.2033721028145, allowedSolution0);
      assertEquals(1979.2033721028145, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1979.2033721028145, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2.384185791015625E-7, 1457.6126304541);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2137, (UnivariateRealFunction) tan0, 1457.6126304541, (double) 2137, allowedSolution0);
      assertEquals(1797.3063152270502, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1518.9881306559641, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(37.879132484452015);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2147475992, (UnivariateRealFunction) tan0, 1.1473021080059394E8, (double) 2147475992, (-2134.727862), allowedSolution0);
      assertEquals(1.1473021080059394E8, illinoisSolver0.getMin(), 0.01);
      assertEquals(1.5268277407701352E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(38.93, 38.93, 38.93);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(1246, (UnivariateRealFunction) tan0, 38.93, (double) 1246, allowedSolution0);
      assertEquals(642.4649999999999, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(659.9265364647263, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(37.879132484452015, 37.879132484452015, 37.879132484452015);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(192708, (UnivariateRealFunction) tan0, 1.0E-6, (double) 192708, allowedSolution0);
      assertEquals(96354.00000049999, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(93760.54489255729, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(38.93, 38.93, 38.93);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(1246, (UnivariateRealFunction) tan0, 38.93, (double) 1246, 1444.3051, allowedSolution0);
      assertEquals(1444.3051, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1246.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(38.93, 38.93, 38.93);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(22205, (UnivariateRealFunction) tan0, 38.93, 1058.2015166232359, (double) 22205, allowedSolution0);
      assertEquals(22205.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(38.93, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(38.93, 38.93, 38.93);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(1246, (UnivariateRealFunction) tan0, 38.93, (double) 1246, allowedSolution0);
      assertEquals(642.4649999999999, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1246.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log log0 = new Log();
      double double0 = regulaFalsiSolver0.solve(1066, (UnivariateRealFunction) log0, 1.0E-6, (double) 1066, 1.0E-6);
      assertEquals(1.0E-6, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0000000000000004, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(38.93);
      Tan tan0 = new Tan();
      double double0 = illinoisSolver0.solve(1253, (UnivariateRealFunction) tan0, 38.93, (double) 1253, (double) 1253);
      assertEquals(38.93, illinoisSolver0.getMin(), 0.01);
      assertEquals(771.7091163843755, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0, 1.0, 1.0);
      Tan tan0 = new Tan();
      double double0 = illinoisSolver0.solve(1246, (UnivariateRealFunction) tan0, (-1.0), 1.0, (-1.0));
      assertEquals((-1.0), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Exp exp0 = new Exp();
      double double0 = regulaFalsiSolver0.solve(24001, (UnivariateRealFunction) exp0, (double) 24001, (-2408.298205897722), (-2408.298205897722));
      assertEquals((-2408.298205897722), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2408.298205897722), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Gaussian gaussian0 = new Gaussian();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1900, (UnivariateRealFunction) gaussian0, (double) 1900, (double) 1900, (double) 1900, allowedSolution0);
      assertEquals(1900.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1900.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(37.879132484452015, 37.879132484452015);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2147475980, (UnivariateRealFunction) tan0, 37.879132484452015, 3.796438503807006E8, 3.796438503807006E8, allowedSolution0);
      assertEquals(37.879132484452015, illinoisSolver0.getMin(), 0.01);
      assertEquals(7.811072799180877E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(78.92721051762746, 78.92721051762746, 78.92721051762746);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      illinoisSolver0.solve(1221, (UnivariateRealFunction) tan0, (-683.8615), (double) 1221, allowedSolution0);
  }
}

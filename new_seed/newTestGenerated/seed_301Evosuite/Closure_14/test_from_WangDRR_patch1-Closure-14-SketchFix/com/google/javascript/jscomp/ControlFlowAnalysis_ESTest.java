/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:46:40 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckAccidentalSemicolon;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckMissingGetCssName;
import com.google.javascript.jscomp.CheckMissingReturn;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorFormat;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FieldCleanupPass;
import com.google.javascript.jscomp.FlowSensitiveInlineVariables;
import com.google.javascript.jscomp.GroupVariableDeclarations;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LineNumberCheck;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.MinimizeExitPoints;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PeepholeCollectPropertyAssignments;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ControlFlowAnalysis_ESTest extends ControlFlowAnalysis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(125, "", 125, 125);
      Node node1 = new Node(113, node0, node0, node0, node0, 29, 4095);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      ControlFlowAnalysis.computeFallThrough(node1);
      controlFlowAnalysis0.process(node0, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(110);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node1 = Node.newString(77, "Unknown class name");
      Node node2 = new Node(37, node1, node1, node1, 94, 110);
      jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      Stack<JSType> stack0 = new Stack<JSType>();
      ControlFlowAnalysis.isContinueStructure(node2);
      InputId inputId0 = new InputId("Unknown class name");
      inputId0.toString();
      AbstractCompiler abstractCompiler0 = null;
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node3, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString(129, "_ ", 129, 129);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(80, node0, node0);
      Node node2 = new Node(115, node1, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(115);
      Compiler compiler0 = new Compiler();
      Node node1 = Node.newString(61, "com.google.javascript.jscomp.DefaultPassConfig$14", 37, (-1377));
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node2 = new Node(200000, node0, node0, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FieldCleanupPass.QualifiedNameSearchTraversal fieldCleanupPass_QualifiedNameSearchTraversal0 = new FieldCleanupPass.QualifiedNameSearchTraversal(jSTypeRegistry0, "qo");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, fieldCleanupPass_QualifiedNameSearchTraversal0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      SyntheticAst syntheticAst0 = new SyntheticAst("o{O+L $)/jf5o7spF[");
      Node node3 = syntheticAst0.getAstRoot(compiler0);
      Node node4 = Node.newString(1744, "com.google.javascript.jscomp.DefaultPassConfig$14");
      Node node5 = peepholeRemoveDeadCode0.tryOptimizeBlock(node3);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      reorderConstantExpression0.optimizeSubtree(node5);
      Node node6 = ControlFlowAnalysis.computeFallThrough(node4);
      node0.addChildToFront(node6);
      Node node7 = syntheticAst0.getAstRoot(compiler0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node0 = Node.newString("", (-127), (-127));
      controlFlowAnalysis0.process(node0, node0);
      ControlFlowAnalysis.computeFallThrough(node0);
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      Node node2 = new Node(0, node0, node1, node1);
      ControlFlowAnalysis.computeFollowNode(node0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString(129, "_ ", 129, 129);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node1 = new Node(115, node0, node0);
      Compiler compiler1 = new Compiler();
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.mayThrowException(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      Node node0 = Node.newString(118, "", 125, 3385);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node1 = node0.cloneNode();
      controlFlowAnalysis0.process(node1, node0);
      controlFlowAnalysis0.process(node1, node0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      node0.copyInformationFromForTree(node1);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal1, node0, node0);
      Node node2 = new Node(163, node1, node1, node1);
      NodeTraversal nodeTraversal2 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      controlFlowAnalysis0.visit(nodeTraversal1, node1, node1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(118);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Node node1 = new Node((-4628), node0, 1795, 30);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newString(131, "E};e`nG]S PI]CZ3'@N", 131, 131);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("E};e`nG]S PI]CZ3'@N");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node2 = Node.newString("E};e`nG]S PI]CZ3'@N", (-2078), 2);
      controlFlowAnalysis0.process(node0, node2);
      Node node3 = new Node(49, node1, node2, node1);
      ControlFlowAnalysis.computeFollowNode(node2);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("J:VPdFfd[\"o");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = Node.newString("J:VPdFfd[\"o", 29, 46);
      controlFlowAnalysis0.process(node0, node0);
      Node node2 = new Node(38, node1, node1, node1, node0, 108, 45);
      Node node3 = ControlFlowAnalysis.computeFollowNode(node1, controlFlowAnalysis0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      controlFlowAnalysis0.process(node3, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("[f$`*T$CYBFS,");
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      Node node1 = new Node(8, 45, 1);
      Node node2 = new Node(108, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.process(node0, node2);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node2);
      ControlFlowAnalysis.getCatchHandlerForBlock(node1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(119, 119, 119);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      Node node1 = new Node(130, 40, 47);
      Node node2 = new Node(256, node1, node0, node0, node1, 44, 114);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node0);
      ControlFlowAnalysis.computeFollowNode(node3, controlFlowAnalysis0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      Node node4 = compiler0.externsRoot;
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node2, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(119, 119, 119);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node1 = new Node(3574, 3574, (-307));
      Node node2 = new Node(4, node0, node0, node1, node0, 38, 37);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      Node node3 = ControlFlowAnalysis.computeFollowNode(node1, controlFlowAnalysis1);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      Node node4 = ControlFlowAnalysis.computeFollowNode(node1);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node3, node4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(115);
      Compiler compiler0 = new Compiler();
      Node node1 = Node.newString(61, "com.google.javascript.jscomp.DefaultPassConfig$14", 37, (-1377));
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node1, node1);
      Node node2 = new Node(200000, node0, node0, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FieldCleanupPass.QualifiedNameSearchTraversal fieldCleanupPass_QualifiedNameSearchTraversal0 = new FieldCleanupPass.QualifiedNameSearchTraversal(jSTypeRegistry0, "qo");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, fieldCleanupPass_QualifiedNameSearchTraversal0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      SyntheticAst syntheticAst0 = new SyntheticAst("o{O+L $)/jf5o7spF[");
      Node node3 = syntheticAst0.getAstRoot(compiler0);
      Node.newString(1744, "com.google.javascript.jscomp.DefaultPassConfig$14");
      Node node4 = peepholeRemoveDeadCode0.tryOptimizeBlock(node3);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node5 = reorderConstantExpression0.optimizeSubtree(node4);
      node0.addChildToFront(node5);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node4, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(2088);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node1 = new Node(51, 47, 49);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      Node node3 = new Node(40, node0, node2, node1, node1, 39, 125);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowAnalysis.computeFollowNode(node2, controlFlowAnalysis1);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      controlFlowAnalysis0.process(node0, node3);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node0 = Node.newString(125, "", 125, 125);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node1 = new Node(113, node0, node0, node0, node0, 29, 4095);
      Node node2 = ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      controlFlowAnalysis0.process(node2, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("J:VPdd[\"o");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = Node.newString("J:VPdd[\"o", 29, 46);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      controlFlowAnalysis0.process(node0, node1);
      Node node2 = new Node(105, node1, node0, node0, 3248, 86);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node2);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node3, node3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString(125, "", 125, 125);
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0);
      Node node1 = Node.newString("");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node1, node1);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      controlFlowAnalysis0.process(node2, node0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node2);
      Node node3 = new Node(112, node1, node2, node0);
      controlFlowAnalysis0.visit(nodeTraversal0, node1, node1);
      ControlFlowAnalysis.computeFollowNode(node0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString(131, "E};e`nG]S PI]CZ3'@N", 131, 131);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$1");
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      Node node3 = new Node(112, node1, node1, node0);
      ControlFlowAnalysis.computeFollowNode(node2);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(110, 110, 2448);
      Compiler compiler0 = new Compiler();
      Node.newString(54, "YLS|!v{G4Z@a_", 1, 16);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node1 = new Node(116, node0, node0, node0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SWITCH 110 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      Node node0 = new Node(115, 29, 115);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler1, true, true);
      ControlFlowAnalysis controlFlowAnalysis2 = new ControlFlowAnalysis(compiler0, false, true);
      Compiler compiler2 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler2, controlFlowAnalysis2);
      Node node1 = new Node(3156, node0, node0, node0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis1.visit(nodeTraversal0, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(53);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node0 = Node.newString(125, "", 125, 125);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node1 = Node.newString("");
      controlFlowAnalysis0.process(node0, node0);
      controlFlowAnalysis0.process(node0, node0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      Node node2 = new Node(120, node0, node0, node1);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis.computeFallThrough(node2);
      Node node3 = ControlFlowAnalysis.computeFollowNode(node1, controlFlowAnalysis0);
      assertNull(node3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(115);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node(41, 53, 42);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, lineNumberCheck0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal1, node1, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node node1 = Node.newString(48, "JSC_UNMATCHED_END_MARKER", 50, 12);
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
      Node node2 = new Node(54, node1, node0, 3238, 4425);
      node0.copyInformationFrom(node2);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, checkMissingReturn0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node((-2017), 118, (-2017));
      Compiler compiler0 = new Compiler();
      Node node1 = Node.newString(113, "com.google.javascript.jscomp.ControlFlowAnalysis$1", 8, 103);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      controlFlowAnalysis0.visit(nodeTraversal0, node3, node2);
      assertFalse(node3.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString(712, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(41, node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Logger.getLogger("");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      controlFlowAnalysis0.process(node0, node0);
      Node.newString(36, "", 4095, 36);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertEquals(36, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(130, "J:VPdd[\"o", 126, 130);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString(131, "E};e`nG]S PI]CZ3'@N", 131, 131);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      Node node1 = new Node(32, node0, 38, 16);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      controlFlowAnalysis0.process(node0, node1);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node2.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(110, 110, 110);
      Compiler compiler0 = new Compiler();
      Node node1 = Node.newString(75, "YLS|!v{G4Z@a_", 1, 16);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(boolean1);
      
      System.setCurrentTimeMillis(49);
      boolean boolean2 = ControlFlowAnalysis.isBreakTarget(node0, (String) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString("om.google.javascrpt.jscom.ControlFlowAnalysis$AstControlFowGrph$1");
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node1 = new Node(15, (-433), (-2140));
      Node node2 = new Node(114, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      nodeTraversal0.getCompiler();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
      controlFlowAnalysis0.process(node3, node3);
      controlFlowAnalysis0.process(node2, node2);
      Node node4 = null;
      try {
        node4 = new Node(4, node0, node1, 110, 2864);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(4, node0);
      controlFlowAnalysis0.process(node0, node1);
      Node node2 = new Node(52, node1, 53, 2);
      controlFlowAnalysis0.process(node2, node1);
      ControlFlowAnalysis.computeFallThrough(node0);
      Compiler compiler1 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, controlFlowAnalysis0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(cleanupPasses0);
      passConfig_PassConfigDelegate0.getTypedScopeCreator();
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Node node3 = Node.newString(2, "com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      controlFlowAnalysis0.visit(nodeTraversal1, node1, node3);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node0 = Node.newString(125, "", 125, 125);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node1 = node0.cloneNode();
      controlFlowAnalysis0.process(node0, node0);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal1, node1, node1);
      node1.isQualifiedName();
      Node node2 = new Node(98, node0, node0, node1);
      NodeTraversal nodeTraversal2 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.process(node2, node0);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node2);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node0 = Node.newString("]w%N];]\"#", 119, 119);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Node node1 = new Node(111, node0, 1, (-993));
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Logger.getGlobal();
      Node node0 = Node.newString("");
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(111, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node0 = Node.newString(125, "", 125, 125);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node1 = node0.cloneNode();
      controlFlowAnalysis0.process(node0, node0);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal1, node1, node1);
      Node node2 = new Node(98, node0, node0, node1);
      NodeTraversal nodeTraversal2 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.process(node2, node0);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node2, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString(17, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(117, nodeArray0, 31, (-1795));
      Compiler compiler0 = new Compiler();
      InputId inputId0 = new InputId("");
      inputId0.toString();
      inputId0.toString();
      ControlFlowAnalysis.isBreakStructure(node1, false);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(125, "", 125, 125);
      Node node1 = new Node(113, node0, node0, node0, node0, 29, 4095);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node0 = Node.newString(125, "", 125, 125);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node1 = node0.cloneNode();
      controlFlowAnalysis0.process(node0, node0);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal1, node1, node1);
      controlFlowAnalysis0.process(node0, node0);
      Compiler compiler1 = new Compiler();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      Node node3 = new Node(48, node0, node2, 2096, 16);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(125, "qE}", 125, 125);
      Node node1 = new Node(42, node0, node0, node0);
      Node node2 = ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      assertNull(node2);
      
      ControlFlowAnalysis.mayThrowException(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode((Node) null, controlFlowAnalysis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstCmntrolFlowGraph$1");
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node1 = new Node((-1259), (-35), 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q4wsT2&*9Bh");
      Node node2 = new Node(41, node0, node1, 30, 41);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node3 = ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      assertNotNull(node3);
      
      node3.copyInformationFrom(node2);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler1, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, controlFlowAnalysis1);
      ControlFlowAnalysis controlFlowAnalysis2 = new ControlFlowAnalysis(compiler1, true, false);
      controlFlowAnalysis2.process(node2, node0);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString("om.google.javascrpt.jscom.ControlFlowAnalysis$AstControlFowGrph$1");
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(2, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      controlFlowAnalysis0.process(node1, node0);
      Node node2 = new Node(15, 43, 4);
      Node node3 = Node.newString(117, "om.google.javascrpt.jscom.ControlFlowAnalysis$AstControlFowGrph$1", 712, (-2430));
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(checkLevel0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler1, checkAccidentalSemicolon0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal1, node3, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot find continue target.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(49, (-733), (-733));
      Compiler compiler0 = new Compiler();
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString(5363, "", 35, 130);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      InputId inputId0 = new InputId("com.google.javascript.jscomp.StrictModeCheck$NonExternChecks");
      inputId0.toString();
      inputId0.toString();
      compiler0.setHasRegExpGlobalReferences(true);
      Node node2 = Node.newString("1D`x(B]Wc");
      ControlFlowAnalysis.isBreakStructure(node2, false);
      controlFlowAnalysis0.process(node1, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean1 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = Node.newString(0, "Named type with empty name component");
      Node node1 = new Node(114, node0, node0, node0, 41, 114);
      jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, jSType0);
      node0.addSuppression("EbW ");
      Stack<JSType> stack0 = new Stack<JSType>();
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      InputId inputId0 = new InputId("y$qqYU$Py+@>+");
      inputId0.toString();
      inputId0.toString();
      ControlFlowAnalysis.isBreakStructure(node0, false);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      boolean boolean1 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Logger.getGlobal();
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      Node node0 = new Node((-3610), (-3610), 328);
      Node node1 = new Node(77, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, controlFlowAnalysis0);
      Compiler compiler2 = nodeTraversal0.getCompiler();
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler2, true, true);
      controlFlowAnalysis1.process(node1, node0);
      Node node2 = Node.newString((-4363), "");
      controlFlowAnalysis1.visit(nodeTraversal0, node1, node1);
      ControlFlowAnalysis.isContinueStructure(node2);
      TypedScopeCreator typedScopeCreator0 = null;
      try {
        typedScopeCreator0 = new TypedScopeCreator(compiler2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(103, 0, 0);
      Compiler compiler1 = new Compiler();
      Node node2 = Node.newString(51, "a(=jtA,-72C)Cj\"", (-19), 30);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      InputId inputId0 = new InputId("mL|");
      node1.useSourceInfoFromForTree(node2);
      InputId inputId1 = new InputId("");
      inputId1.toString();
      controlFlowAnalysis0.process(node0, node2);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      cleanupPasses0.getTypedScopeCreator();
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler1, referenceCollectingCallback0, (ScopeCreator) null);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal1, node0, node0);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node3.isParamList());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      ControlFlowAnalysis.computeFollowNode(node1);
      Node node2 = Node.newString(125, "", 125, 125);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      Node node3 = peepholeReplaceKnownMethods0.optimizeSubtree(node2);
      peepholeReplaceKnownMethods0.isEcmaScript5OrGreater();
      Node node4 = Normalize.parseAndNormalizeSyntheticCode(compiler0, "", "(az3FA+)P8H1W~'");
      controlFlowAnalysis0.process(node4, node3);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(125);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(119, 119, 119);
      Compiler compiler0 = new Compiler();
      Node node1 = Node.newString(48, "JSC_UNMATCHED_END_MARKER", (-650), 12);
      Compiler compiler1 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler1, checkLevel0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, true);
      Node node2 = new Node(16, 41, 30);
      controlFlowAnalysis0.process(node1, node2);
      ControlFlowAnalysis.isContinueStructure(node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      controlFlowAnalysis0.shouldTraverse((NodeTraversal) null, node2, node0);
      System.setCurrentTimeMillis(2306L);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString("[f$`*T$CYBFS,");
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(8, 2864, 1);
      Node node2 = new Node(108, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Compiler compiler2 = nodeTraversal0.getCompiler();
      controlFlowAnalysis0.process(node0, node1);
      Node.newString(37, "[f$`*T$CYBFS,");
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler1, false, false);
      Node node3 = new Node(47, 636, 4095);
      controlFlowAnalysis1.process(node3, node0);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node2);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler2, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal1, node1, node1);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler2);
      NodeTraversal nodeTraversal2 = new NodeTraversal(compiler2, controlFlowAnalysis0, syntacticScopeCreator0);
      boolean boolean1 = controlFlowAnalysis0.shouldTraverse(nodeTraversal2, node2, node2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(46, 46, 150);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node(38, 126, 4379);
      Compiler compiler1 = new Compiler();
      Node node2 = Node.newString(29, "Cq{n~@d>2Zkx>Mb`?F$", (-2645), 2);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, true, false);
      ControlFlowAnalysis.computeFallThrough(node2);
      controlFlowAnalysis0.process(node2, node2);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      ControlFlowAnalysis.computeFallThrough(node1);
      // Undeclared exception!
      try { 
        compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Node node0 = new Node(82, (-2655), 705);
      Compiler compiler0 = new Compiler();
      Node node1 = Node.newString(54, "mL|", 19, 120);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      InputId inputId0 = new InputId("K$.;: kP?");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(117, nodeArray0, 2, 36);
      node2.useSourceInfoFromForTree(node1);
      inputId0.toString();
      controlFlowAnalysis0.process(node1, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node2, node2);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node3.isArrayLit());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString(129, "_ ", 129, 129);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(80, node0, node0);
      Node node2 = new Node(117, node1, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node.newString("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2", 37, 38);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // 80
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = Node.newString(0, "Named type with empty name component");
      Node node1 = new Node(114, node0, node0, node0, 41, 114);
      jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, jSType0);
      node0.addSuppression("EbW ");
      Stack<JSType> stack0 = new Stack<JSType>();
      ControlFlowAnalysis.mayThrowException(node0);
      Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
      node2.addSuppression("");
      ControlFlowAnalysis.isContinueStructure(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit((NodeTraversal) null, node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString("[f$`*T$CYBFS,");
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      Node node1 = new Node(8, 2864, 1);
      ControlFlowAnalysis.isBreakTarget(node1, "");
      Node node2 = new Node(120, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Compiler compiler2 = nodeTraversal0.getCompiler();
      controlFlowAnalysis0.process(node0, node1);
      Node node3 = Node.newString(37, "[f$`*T$CYBFS,");
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      Node.newString(24, "", 3297, 53);
      controlFlowAnalysis0.visit(nodeTraversal0, node2, node1);
      ControlFlowAnalysis.isContinueStructure(node2);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      Compiler compiler3 = new Compiler((PrintStream) null);
      Node node4 = compiler3.externsRoot;
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node2, (Node) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler2);
      ControlFlowAnalysis.mayThrowException(node1);
      ControlFlowAnalysis.computeFollowNode(node3, controlFlowAnalysis1);
      // Undeclared exception!
      try { 
        controlFlowAnalysis1.shouldTraverse(nodeTraversal0, node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString(120, "Vdi`n]ve7}1", 120, 120);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      NodeTraversal nodeTraversal1 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal1, node0, node0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      ControlFlowAnalysis.isBreakTarget(node0, "Vdi`n]ve7}1");
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("[f$`*T$CYBFS,");
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      Node node1 = new Node(8, 2864, 1);
      Node node2 = new Node(108, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Compiler compiler2 = nodeTraversal0.getCompiler();
      controlFlowAnalysis0.process(node0, node1);
      Node.newString(37, "[f$`*T$CYBFS,");
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      Node.newString(24, "", 3297, 53);
      controlFlowAnalysis0.visit(nodeTraversal0, node2, node1);
      ControlFlowAnalysis.isContinueStructure(node2);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      Compiler compiler3 = new Compiler((PrintStream) null);
      Node node3 = compiler3.externsRoot;
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node2, (Node) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler2);
      // Undeclared exception!
      try { 
        controlFlowAnalysis1.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(116, 714, 714);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(2, node0, node0, 4095, 0);
      Node node2 = node0.copyInformationFrom(node1);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(116, 705, 705);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node1 = new Node(2, node0, node0, 4095, 130);
      node0.copyInformationFrom(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Logger.getLogger("=(RHr=@+lLQg{)");
      Compiler compiler1 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString("E};e`nG]S PI]CZ3'@N");
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(77, node0);
      Node.newNumber(1027.0067871);
      controlFlowAnalysis0.process(node0, node1);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString(129, ", ", 129, 129);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(77, node0);
      controlFlowAnalysis0.process(node0, node1);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node1, ", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(119, 119, 119);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      Node node1 = new Node(16, 41, 30);
      controlFlowAnalysis0.process(node0, node1);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      boolean boolean1 = controlFlowAnalysis0.shouldTraverse((NodeTraversal) null, node1, node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(110, 110, 2448);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.newString(2, "YLS|!v{G4Z@a_", 1, 16);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, true, false);
      Compiler compiler1 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, controlFlowAnalysis0);
      nodeTraversal0.getCurrentNode();
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = new Node(110, 940, 2071);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString(37, "YLS|!v{G4Z@a_", 4095, 38);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      InputId inputId0 = new InputId("~u}^Wn5/<z0/=V6bZou");
      inputId0.toString();
      inputId0.toString();
      ControlFlowAnalysis.isBreakStructure(node1, false);
      controlFlowAnalysis0.process(node1, node1);
      GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal1, node1, node1);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node2.isString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(116, 705, 705);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.newString(54, "", 36, 86);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      InputId inputId0 = new InputId("");
      inputId0.toString();
      Node node1 = Node.newString(69, "checkStrictMode", 0, 308);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(4, node0);
      controlFlowAnalysis0.process(node0, node1);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      passConfig_PassConfigDelegate0.getTypedScopeCreator();
      Compiler compiler1 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, controlFlowAnalysis0, (ScopeCreator) null);
      controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
      ControlFlowAnalysis.isContinueStructure(node1);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node2 = compiler_IntermediateState0.externsRoot;
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.shouldTraverse(nodeTraversal0, (Node) null, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(117, "84m", 117, 117);
      Node node1 = new Node(95, node0, node0, node0);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // Cannot find continue target.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1";
      Node node0 = Node.newString("om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1");
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(2, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      nodeTraversal0.getCompiler();
      controlFlowAnalysis0.process(node1, node0);
      Node.newString(2, "om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1");
      Node node2 = Node.newString(117, "om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1", 712, (-2430));
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // Cannot find continue target.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(117, "84m", 117, 117);
      Node node1 = new Node(95, node0, node0, node0);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // Cannot find continue target.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(116, 705, 705);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSCompiler_StaticMethods_");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString(2, "mL-", 113, 1523);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      InputId inputId0 = new InputId("mL-");
      inputId0.toString();
      ControlFlowAnalysis.isBreakStructure(node0, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(116, 705, 705);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

//   @Test(timeout = 4000)
//   public void test071()  throws Throwable  {
//       Node node0 = Node.newString("Cannot find break target.", 0, 0);
//       node0.toStringTree();
//       Node node1 = new Node(12, node0, node0, node0, node0);
//       node0.addChildrenToFront(node1);
//       Compiler compiler0 = new Compiler();
//       ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
//       ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
//       String string0 = "AVx9S";
//       JSType jSType0 = null;
//       ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType(jSType0);
//       ObjectType objectType0 = ObjectType.cast(parameterizedType0);
//       ObjectType objectType1 = FunctionType.getTopDefiningInterface(objectType0, objectType0.EMPTY_TYPE_COMPONENT);
//       EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, objectType1);
//       EnumElementType enumElementType0 = enumType0.getElementsType();
//       String string1 = null;
//       Node node2 = enumElementType0.getPropertyNode(string1);
//       ControlFlowAnalysis.getExceptionHandler(node2);
//       Node node3 = ControlFlowAnalysis.getExceptionHandler(node1);
//       int int0 = (-1318);
//       node0.setCharno(int0);
//       node0.addChildrenAfter(node1, node1);
//       node1.detachChildren();
//       ControlFlowAnalysis.computeFallThrough(node3);
//       boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node3);
//       Node node4 = ControlFlowAnalysis.computeFollowNode(node3);
//       AbstractCompiler abstractCompiler0 = null;
//       boolean boolean1 = true;
//       node0.addChildrenToFront(node3);
//       node1.addChildBefore(node4, node4);
//       node1.removeProp(node3.INPUT_ID);
//       ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(abstractCompiler0, boolean0, boolean1);
//       ControlFlowAnalysis.mayThrowException(node1);
//       controlFlowAnalysis1.process(node0, node4);
//   }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Logger.getGlobal();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = Node.newString(712, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSType0.toString();
      jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(113, nodeArray0, 31, (-1795));
      node1.addSuppression("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2");
      Node.newString("Not declared as a constructor", 49, 2042);
      Stack<JSType> stack0 = new Stack<JSType>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Named type with empty name component");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      ControlFlowAnalysis.isBreakStructure(node1, true);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node0 = Node.newString(125, "", 125, 125);
      Node node1 = new Node(113, node0, node0, node0, node0, 29, 4095);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node1, "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(116, 705, 705);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString(2, "mL-", 113, 1523);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      InputId inputId0 = new InputId("mL-");
      inputId0.toString();
      ControlFlowAnalysis.isBreakStructure(node0, false);
      controlFlowAnalysis0.process(node1, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node0);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = new Node(116, node0, node0, node0, node0, 112, 54);
      Compiler compiler1 = new Compiler((PrintStream) null);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString(2, "", 49, 1539);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      InputId inputId0 = new InputId("JSC_UNMATCHED_END_MARKER");
      inputId0.toString();
      inputId0.toString();
      boolean boolean0 = ControlFlowAnalysis.isBreakStructure(node0, false);
      controlFlowAnalysis0.process(node1, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean1 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(110);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.jsRoot;
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(110);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node((-1916), node0, 1379, 46);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(108, "", 108, 108);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(110, 110, 2448);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString(75, "YLS|!v{G4Z@a_", 1, 16);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      InputId inputId0 = new InputId("1sN}>");
      inputId0.toString();
      inputId0.toString();
      ControlFlowAnalysis.isBreakStructure(node1, false);
      controlFlowAnalysis0.process(node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(110, 110, 2448);
      Compiler compiler0 = new Compiler();
      Node node1 = Node.newString(54, "YLS|!v{G4Z@a_", 1, 16);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      controlFlowAnalysis0.process(node1, node1);
      node0.isUnscopedQualifiedName();
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse((NodeTraversal) null, node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(31, node0, 33, 112);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "otj yP@a8>[4W|JP~t");
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      Node node3 = new Node(8, node2, 4, 2);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      compiler0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node3, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("J:VPdd[\"o");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node.newString("STRIP", 29, 46);
      controlFlowAnalysis0.process(node0, node0);
      Node node1 = Node.newString(4095, "STRIP");
      controlFlowAnalysis0.process(node1, node0);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Stack<Node> stack0 = new Stack<Node>();
      NodeTraversal.traverseRoots((AbstractCompiler) compiler0, (List<Node>) stack0, (NodeTraversal.Callback) controlFlowAnalysis0);
      controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "STRIP");
      Node node2 = new Node(103, node0, 30, 54);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node2, node0);
      InputId inputId0 = new InputId("STRIP");
      inputId0.toString();
      inputId0.toString();
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis1.process(node0, node2);
      ControlFlowAnalysis.isBreakStructure(node2, false);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      String string0 = "";
      Node node0 = Node.newString(108, "", 108, 108);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      String string0 = "";
      Node node0 = Node.newString(108, "", 108, 108);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(77, "YLS|!v{G4Z@a_", 102, (-602));
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      InputId inputId0 = new InputId("pL%a&.s74e\"uVVR");
      inputId0.toString();
      inputId0.toString();
      ControlFlowAnalysis.isBreakStructure(node0, false);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax0.skipFinallyNodes(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(46, 46, 2448);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      Node node1 = Node.newString(2761, "YLS|!v{G4Z@a_");
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, "YLS|!v{G4Z@a_");
      assertFalse(boolean0);
      
      controlFlowAnalysis1.process(node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0, (ScopeCreator) null);
      controlFlowAnalysis0.visit(nodeTraversal0, node0, node1);
      InputId inputId0 = new InputId("YLS|!v{G4Z@a_");
      inputId0.toString();
      inputId0.toString();
      ControlFlowAnalysis.isBreakStructure(node0, false);
      controlFlowAnalysis1.process(node0, node0);
      NodeTraversal nodeTraversal1 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      Node node2 = compiler0.externsRoot;
      boolean boolean1 = controlFlowAnalysis1.shouldTraverse(nodeTraversal1, node1, (Node) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(105, 105, 105);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName((AbstractCompiler) null, checkLevel0, "");
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, checkMissingGetCssName0);
      nodeTraversal0.getCompiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      Node node1 = new Node(47, node0, 32, 40);
      controlFlowAnalysis0.process(node0, node1);
      Node node2 = Node.newString(37, "");
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      InputId inputId0 = new InputId("");
      inputId0.toString();
      inputId0.toString();
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node2);
      assertTrue(boolean1);
      
      boolean boolean2 = ControlFlowAnalysis.isContinueStructure(node2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Logger.getGlobal();
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node0 = new Node(105, 2938, (-931));
      boolean boolean0 = true;
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler1, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis1.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node0 = Node.newString(125, "", 125, 125);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(125, "", 125, 125);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = new Node(105, 105, 105);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      String string0 = "";
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName((AbstractCompiler) null, checkLevel0, "");
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, checkMissingGetCssName0);
      nodeTraversal0.getCompiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(105);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      String string0 = "";
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName((AbstractCompiler) null, checkLevel0, "");
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, checkMissingGetCssName0);
      nodeTraversal0.getCompiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString(105, "_ ", 105, 105);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(115, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(77, 77, 77);
      Node node1 = new Node(31, node0, 33, 35);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      Node node0 = Node.newString(105, "", (-1394), 105);
      InputId inputId0 = new InputId("  ");
      inputId0.toString();
      inputId0.toString();
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      Node node0 = Node.newString(105, "", (-1394), 105);
      InputId inputId0 = new InputId("  ");
      inputId0.toString();
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(115, node0, 47, 43);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node1);
      assertTrue(boolean0);
      
      boolean boolean1 = ControlFlowAnalysis.isContinueStructure(node1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, "t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node0 = Node.newString(33, "", 33, 118);
      InputId inputId0 = new InputId("  ");
      inputId0.toString();
      inputId0.toString();
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString(129, ", ", 129, 129);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(77, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node1, ", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node.newString(0, "Named type with empty name component");
      jSType0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Named type with empty name component");
      Node node0 = new Node(37);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      jSTypeArray0[1] = (JSType) enumType1;
      Stack<JSType> stack0 = new Stack<JSType>();
      JSType jSType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) enumType0, jSTypeArray0[0], (List<JSType>) stack0);
      jSTypeArray0[2] = jSType1;
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.addSuppression("I?i^T}8bb69d\"~");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = new Node(0, 44, 8);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      ControlFlowAnalysis.computeFallThrough(node1);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      Logger logger1 = logger0.getParent();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger1);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("D");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      LightweightMessageFormatter.withoutSource();
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node2 = peepholeCollectPropertyAssignments0.optimizeSubtree(node1);
      Node node3 = new Node(49, node2, node1, node1, node1, 12, 2);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      compiler0.getState();
      controlFlowAnalysis0.process(node1, node3);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Logger.getGlobal();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = Node.newString(712, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSType0.toString();
      jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(113, nodeArray0, 31, (-1795));
      node1.addSuppression("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2");
      Stack<JSType> stack0 = new Stack<JSType>();
      ControlFlowAnalysis.isContinueStructure(node0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Named type with empty name component");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node2 = compiler_IntermediateState0.externsRoot;
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "";
      Node node0 = Node.newString(125, "", 125, 125);
      Node node1 = new Node(113, node0, node0, node0, node0, 29, 4095);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      InputId inputId0 = new InputId("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      node0.setInputId(inputId0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, true, true);
      Logger.getLogger("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      Compiler compiler1 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, controlFlowAnalysis1);
      Node node1 = new Node(49, node0, node0, node0, node0);
      compiler0.getRoot();
      controlFlowAnalysis0.visit(nodeTraversal0, node1, (Node) null);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString("om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1");
      ControlFlowAnalysis.isBreakTarget(node0, "om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1");
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      compiler0.disableThreads();
      Node node1 = Node.newString(126, "om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1", 43, (-549));
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis1.process(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString(126, "E}V;e`nG]S PI]CZ3'@N", 126, 126);
      AbstractCompiler abstractCompiler0 = null;
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      Logger logger1 = logger0.getParent();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger1);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      LightweightMessageFormatter.withoutSource();
      Logger.getLogger("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = new Node(30, node1, node1, node1, 2, (-20));
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node2);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node3);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(113, node0, 30, 32);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.isContinueStructure(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeSyntheticCode(compiler0, "", "4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Logger.getGlobal();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = Node.newString(712, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSType0.toString();
      Node node1 = new Node(48, node0, node0, node0, (-2), 111);
      jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, jSType0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      node0.isUnscopedQualifiedName();
      Node node2 = new Node(113, nodeArray0, 31, (-1795));
      node2.addSuppression("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2");
      Stack<JSType> stack0 = new Stack<JSType>();
      ControlFlowAnalysis.isContinueStructure(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit((NodeTraversal) null, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node0 = Node.newString(125, "", 125, 125);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node1 = new Node(113, node0, node0, node0, node0, 29, 4095);
      Node node2 = ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      assertNotNull(node2);
      assertEquals(1, node2.getChildCount());
      
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      InputId inputId0 = new InputId("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      inputId0.toString();
      node0.setInputId(inputId0);
      ControlFlowAnalysis.isBreakTarget(node0, "InputId: com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("", "", 47, (-2060));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(124, node0, node0, node0, 50, 45);
      ControlFlowAnalysis.mayThrowException(node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis.getCatchHandlerForBlock(node2);
      Node node3 = ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      assertNull(node3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      InputId inputId0 = new InputId("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      inputId0.toString();
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1", 41, 524288);
      Node node2 = new Node(4, node1);
      controlFlowAnalysis0.process(node0, node2);
      Node node3 = compiler0.parseTestCode("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      controlFlowAnalysis0.process(node0, node3);
      ControlFlowAnalysis.isContinueStructure(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node4 = new Node(52, node0, node3, node2, 52, 111);
      ControlFlowAnalysis.mayThrowException(node4);
      ControlFlowAnalysis.computeFallThrough(node2);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.mayThrowException((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = new Node(102, 0, 0);
      Node node1 = new Node(48, node0, (-1544), 1500);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ControlFlowAnalysis.isBreakStructure(node1, true);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString("om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1");
      ControlFlowAnalysis.isContinueStructure(node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      compiler0.disableThreads();
      Node node1 = Node.newString(126, "om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1", 43, (-549));
      controlFlowAnalysis0.process(node1, node0);
      ControlFlowAnalysis.isBreakStructure(node1, false);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.visit((NodeTraversal) null, node1, node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      Logger logger1 = logger0.getParent();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger1);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      LightweightMessageFormatter.withoutSource();
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node2 = peepholeCollectPropertyAssignments0.optimizeSubtree(node1);
      Node node3 = new Node(49, node2, node1, node1, node1, 12, 2);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      Node node4 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node5 = compiler_IntermediateState0.externsRoot;
      Node node6 = ControlFlowAnalysis.computeFallThrough(node3);
      ControlFlowAnalysis.mayThrowException(node6);
      ControlFlowAnalysis.computeFollowNode(node4, controlFlowAnalysis0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = Node.newString(0, "Named type with empty name component");
      jSType0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Named type with empty name component");
      Node node1 = new Node(37);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      jSTypeArray0[1] = (JSType) enumType1;
      Stack<JSType> stack0 = new Stack<JSType>();
      JSType jSType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) enumType0, jSTypeArray0[0], (List<JSType>) stack0);
      jSTypeArray0[2] = jSType1;
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.addSuppression("I?i^T}8bb69d\"~");
      Node node3 = ControlFlowAnalysis.computeFallThrough(node1);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node4 = new Node(16, node1, node3, node0, node1, 12, (-691));
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      loggerErrorManager0.setTypedPercent(35);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      controlFlowAnalysis0.process(node0, node2);
      assertFalse(node0.isSetterDef());
      
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(712, "W=W0]");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      jSType0.toString();
      Node node1 = new Node(1357, node0, node0, node0, (-196), 29);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry1.createEnumType("~v83GF!t0n|<!mI1'", node1, jSType0);
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(4, nodeArray0, 116, 49);
      node1.addSuppression("Not declared as a constructor");
      Stack<JSType> stack0 = new Stack<JSType>();
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      controlFlowAnalysis0.process(node1, node2);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      InputId inputId0 = new InputId("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      inputId0.toString();
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1", 41, 524288);
      Node node2 = new Node(4, node1);
      controlFlowAnalysis0.process(node0, node2);
      Node node3 = Node.newString((-2332), "com.google.javascript.jscomp.RenameLabels$DefaultNameSupplier");
      controlFlowAnalysis0.process(node0, node3);
      ControlFlowAnalysis.isContinueStructure(node2);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0, (ScopeCreator) null);
      controlFlowAnalysis0.visit(nodeTraversal0, node1, node3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node4 = null;
      try {
        node4 = new Node(40, node1, (-1016), 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      Node node1 = new Node(4, node0);
      controlFlowAnalysis0.process(node0, node1);
      // Undeclared exception!
      try { 
        compiler0.loadLibraryCode("M~Yl`Yo9t2(&`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString("om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1");
      Node node1 = Node.newString(2, "om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1", 49, 12);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      Node node2 = new Node(86, node1, node0, node0, 114, 8);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node2);
      ControlFlowAnalysis.computeFallThrough(node2);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString("om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1");
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      compiler0.disableThreads();
      Node node1 = Node.newString(2, "om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1", 49, 12);
      controlFlowAnalysis0.process(node0, node1);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      Node node2 = new Node(86, node1, node0, node0, 114, 8);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node2);
      ControlFlowAnalysis.computeFallThrough(node2);
      boolean boolean2 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(119, 119, 119);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      int int0 = 1269;
      Node node1 = Node.newString(125, "", 21, 1269);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(45, node0, node0, 46, 44);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, "Pure functions:\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(114);
      Node node1 = new Node(31, node0, 33, 112);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node1);
      boolean boolean1 = ControlFlowAnalysis.isBreakTarget(node0, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      InputId inputId0 = new InputId("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      inputId0.toString();
      node0.setInputId(inputId0);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("#EA0WtW2ce(QuF<", "com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1", 6158, (-4078));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(39, node0, node0, node0, 4095, 38);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis.computeFallThrough(node1);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString("om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1");
      ControlFlowAnalysis.isContinueStructure(node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      compiler0.disableThreads();
      Node node1 = Node.newString(126, "om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1", 43, (-549));
      controlFlowAnalysis0.process(node1, node0);
      ControlFlowAnalysis.isBreakStructure(node1, false);
      Node node2 = new Node((-545), node1, node1, node0, node1, (-8), 52);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis1.process(node2, node2);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("J:VPdFfdjo");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node1 = new Node(36);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Node node2 = new Node(103, node0, 30, 54);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node2, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newString(102, "E};e`nG]S PI]CZ3'@N", 102, 102);
      InputId inputId0 = new InputId("E};e`nG]S PI]CZ3'@N");
      inputId0.toString();
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.mayThrowException(node0);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = new Node(102, 0, 0);
      Node node1 = new Node(48, node0, (-1544), 1500);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ControlFlowAnalysis.isBreakStructure(node1, true);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.mayThrowException(node0);
      boolean boolean0 = true;
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(82, 82, 82);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis1.process(node0, node0);
      ControlFlowAnalysis.mayThrowException(node0);
      Node node1 = new Node(42, node0, node0, node0, node0, (-2169), (-30));
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(boolean0);
      
      ControlFlowAnalysis.computeFallThrough(node1);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(119, 119, 119);
      Compiler compiler0 = new Compiler();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("#EA0WtW2ce(QuF<", "~e*B5Jx;:1y", 33, (-2749));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = Node.newString(45, "d:]wc,6ywm");
      ControlFlowAnalysis.mayThrowException(node1);
      ControlFlowAnalysis.computeFallThrough(node0);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = Node.newString(0, "Named type with empty name component");
      Node node1 = new Node(114, node0, node0, node0, 41, 114);
      jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, jSType0);
      Stack<JSType> stack0 = new Stack<JSType>();
      ControlFlowAnalysis.isContinueStructure(node0);
      InputId inputId0 = new InputId("Not declared as a type name");
      inputId0.toString();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      controlFlowAnalysis0.process(node0, node1);
      assertFalse(node1.isVar());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(4);
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants((AbstractCompiler) null, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, normalize_VerifyConstants0);
      nodeTraversal0.getCompiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      controlFlowAnalysis0.process(node1, node1);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = Node.newString(0, "Named type with empty name component");
      Node node1 = new Node(114, node0, node0, node0, 41, 114);
      jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, jSType0);
      Stack<JSType> stack0 = new Stack<JSType>();
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertFalse(boolean0);
      
      InputId inputId0 = new InputId("Not declared as a type name");
      inputId0.toString();
      Node node2 = new Node(37, node1, node1, node1);
      Node node3 = ControlFlowAnalysis.computeFollowNode(node0);
      assertEquals(114, node3.getCharno());
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString(129, "_ ", 129, 129);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(115, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = Node.newString(0, "Named type with empty name component");
      jSType0.toString();
      Node node1 = new Node(114, node0, node0, node0, 41, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, jSType0);
      EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, enumType0);
      jSTypeArray0[1] = (JSType) enumType1;
      node1.addSuppression("Named type with empty name component");
      Stack<JSType> stack0 = new Stack<JSType>();
      ControlFlowAnalysis.isContinueStructure(node1);
      Logger logger0 = Logger.getLogger("");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      loggerErrorManager0.setTypedPercent((-3331.071499918));
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      controlFlowAnalysis0.process(node0, node1);
      assertFalse(node0.isWhile());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString("[f$`*T$CYBFS,");
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      Node node1 = new Node(8, 45, 1);
      Node node2 = new Node(108, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.process(node0, node2);
      ControlFlowGraph<Node> controlFlowGraph0 = controlFlowAnalysis0.getCfg();
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(119, 119, 119);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Logger logger0 = Logger.getLogger("");
      ErrorFormat errorFormat0 = ErrorFormat.SOURCELESS;
      errorFormat0.toFormatter(compiler0, false);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      Logger logger1 = logger0.getParent();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger1);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger.getLogger("com.google.javascript.jscomp.AnonymousFunctionNamingPolicy");
      LoggerErrorManager loggerErrorManager1 = new LoggerErrorManager(lightweightMessageFormatter0, logger1);
      Compiler compiler1 = new Compiler(loggerErrorManager1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Compiler compiler2 = new Compiler(loggerErrorManager0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler2, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal1, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString("keepSimplifiedHookExpression must keep at least 1 branch");
      InputId inputId0 = new InputId(".#O,>1DE}");
      node0.setInputId(inputId0);
      ControlFlowAnalysis.isContinueStructure(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(0, node0);
      ControlFlowAnalysis.mayThrowException(node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node2.isTry());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = Node.newString(0, "Named type with empty name component");
      jSType0.toString();
      Node node1 = new Node(114, node0, node0, node0, 41, 113);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, jSType0);
      EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, enumType0);
      jSTypeArray0[1] = (JSType) enumType1;
      node1.addSuppression("Named type with empty name component");
      Stack<JSType> stack0 = new Stack<JSType>();
      ControlFlowAnalysis.isContinueStructure(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit((NodeTraversal) null, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseUnknownType();
      Compiler compiler0 = new Compiler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      File file0 = MockFile.createTempFile("Not declared as a constructor", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Compiler compiler1 = new Compiler(mockPrintStream0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, true);
      Node node0 = Node.newString(113, "*>v/G", 113, 1);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(125, "", 125, 125);
      Node node1 = new Node(113, node0, node0, node0, node0, 29, 4095);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(119, 119, 119);
      Compiler compiler0 = new Compiler();
      Node node1 = Node.newString(48, "JSC_UNMATCHED_END_MARKER", (-650), 12);
      Compiler compiler1 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler1, checkLevel0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, true);
      Node node2 = new Node(16, 41, 30);
      controlFlowAnalysis0.process(node1, node2);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node1);
      boolean boolean1 = controlFlowAnalysis0.shouldTraverse((NodeTraversal) null, node2, node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      Logger logger1 = logger0.getParent();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger1);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node.newString("", 8506, (-4007));
      Node node2 = new Node(684, node0);
      controlFlowAnalysis0.process(node0, node0);
      controlFlowAnalysis0.process(node0, node1);
      ControlFlowAnalysis.isContinueStructure(node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0, (ScopeCreator) null);
      controlFlowAnalysis0.visit(nodeTraversal0, node2, node2);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node2, node2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node0 = Node.newString(101, "G:]Ev!*<|. O|>\"r]", 38, 38);
      Node node1 = new Node((-459), node0, node0, 1, 44);
      Node node2 = peepholeFoldWithTypes0.optimizeSubtree(node1);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G:]Ev!*<|. O|>\"r]");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((MessageFormatter) null, mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      cleanupPasses0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(111, 111, 111);
      ControlFlowAnalysis.isBreakStructure(node0, false);
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("Cannot find continue target.");
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Logger.getGlobal();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("D");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node0 = Node.newString(49, "Cannot find continue target.", 1737, 3910);
      Node node1 = new Node((-20), node0);
      controlFlowAnalysis0.process(node1, node1);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node1, "Cannot find continue target.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler1, true, false);
      compiler0.disableThreads();
      Node node0 = Node.newString(49, "msg.undef.prop.delete", 110, (-789));
      ControlFlowAnalysis controlFlowAnalysis2 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis2.process(node0, node0);
      ControlFlowAnalysis.isBreakStructure(node0, false);
      Node node1 = new Node((-405), node0, node0, node0, node0, 10, 41);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node1);
      controlFlowAnalysis1.process(node2, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(112);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      node0.detachChildren();
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node1, node2);
      ControlFlowAnalysis.isBreakStructure(node0, false);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node3 = new Node(2, node2);
      Node node4 = peepholeRemoveDeadCode0.optimizeSubtree(node1);
      Node node5 = null;
      try {
        node5 = new Node(928, node4, node3, node1, node0, 125, (-804));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.setLength(725);
      controlFlowAnalysis0.process(node0, node0);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(41, node0);
      Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      Node node4 = new Node((-432), node1, node1, node3, node2, 31, 38);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax1 = new PeepholeSubstituteAlternateSyntax(true);
      Node node5 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node3);
      controlFlowAnalysis0.process(node5, node4);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(111, "J:VPdd[\"o", 126, 111);
      AbstractCompiler abstractCompiler0 = null;
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(111, 111, 111);
      Node node1 = new Node((-3307), node0, 15, 2);
      ControlFlowAnalysis.isBreakStructure(node0, false);
      Compiler compiler0 = new Compiler();
      Node.newString(111, "Cannot find continue target.", 112, (-259));
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = new Node(112);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      node0.detachChildren();
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(112);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      assertFalse(node0.isBreak());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = Node.newString(0, "Named type with empty name component");
      jSType0.toString();
      Node node1 = new Node(114, node0, node0, node0, 41, 113);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, jSType0);
      EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, enumType0);
      jSTypeArray0[1] = (JSType) enumType1;
      Stack<JSType> stack0 = new Stack<JSType>();
      ControlFlowAnalysis.isContinueStructure(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      ControlFlowAnalysis.computeFollowNode(node1, controlFlowAnalysis0);
      ControlFlowAnalysis.isContinueStructure(node1);
      ControlFlowAnalysis.isBreakStructure(node0, false);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node2.isString());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(36, node0, 35, 50);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFallThrough(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      Logger logger1 = logger0.getParent();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger1);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("");
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      reorderConstantExpression0.optimizeSubtree(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node.newString(29, "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2", 29, 4);
      Node node1 = new Node(684, node0);
      controlFlowAnalysis0.process((Node) null, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakStructure((Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(119);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newString("tPAipa}qG|L");
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(">7^GP", charset0);
      node0.putProp((-979), jSSourceFile0);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.isBreakStructure(node0, false);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("tPAipa}qG|L");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(50, 50, 50);
      Node node1 = new Node(35, node0, node0, node0, node0);
      Node node2 = reorderConstantExpression0.optimizeSubtree(node1);
      ControlFlowAnalysis.computeFollowNode(node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      controlFlowAnalysis0.process(node0, node0);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node3 = compiler_IntermediateState0.externsRoot;
      controlFlowAnalysis0.process((Node) null, node2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString(131, "E};e`nG]S PI]CZ3'@N", 131, 131);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(35, node0);
      controlFlowAnalysis0.process(node0, node1);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, ">-(I{NY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(4, node0);
      controlFlowAnalysis0.process(node0, node1);
      Node node2 = new Node(52, node1, 53, 2);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = ControlFlowAnalysis.mayThrowException(node2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node0 = Node.newString(125, "", 125, 125);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node1 = node0.cloneNode();
      controlFlowAnalysis0.process(node0, node0);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal1, node1, node1);
      Node node2 = new Node(120, node0, node0, node1);
      NodeTraversal nodeTraversal2 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.visit(nodeTraversal2, node0, node1);
      assertFalse(node0.isHook());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(33);
      Node node1 = new Node(54, node0, 32, 1601);
      node1.setWasEmptyNode(true);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("D");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(105, 105, 105);
      AbstractCompiler abstractCompiler0 = null;
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      String string0 = "";
      peepholeSubstituteAlternateSyntax0.getExceptionHandler(node0);
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName((AbstractCompiler) null, checkLevel0, "");
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, checkMissingGetCssName0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      controlFlowAnalysis0.getCfg();
      Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node.newString(96, "J:VPdFfd[\"o");
      SyntheticAst syntheticAst0 = new SyntheticAst("Sd~_N~OBGdgBtv1f");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = ControlFlowAnalysis.getExceptionHandler(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2", "interface", (-643), (-643));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler1, true, true);
      Node node0 = Node.newString("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node1 = Node.newString(1895, "", 3, 2048);
      Node node2 = Normalize.parseAndNormalizeTestCode(compiler1, "", "interface");
      controlFlowAnalysis1.process(node1, node2);
      ControlFlowAnalysis.isContinueStructure(node0);
      Node.newString(42, "1I7{9[oG`}!");
      Node node3 = new Node(54, node1, node1, node2, node2, 38, 13);
      Node node4 = ControlFlowAnalysis.getExceptionHandler(node2);
      assertNull(node4);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node0 = Node.newString("");
      InputId inputId0 = new InputId("");
      node0.getInputId();
      node0.setInputId(inputId0);
      String string0 = "{JRPo^o}7'E&z11|8p";
      Node node1 = Node.newString(39, "");
      Node node2 = new Node(30, node1, node1, node1, 2802, 116);
      controlFlowAnalysis0.process(node2, node2);
      controlFlowAnalysis0.process(node2, node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      controlFlowAnalysis0.process(node2, node0);
      Node node3 = null;
      try {
        node3 = new Node(132, (Node) null, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString(102, "E};e`nG]S PI]CZ3'@N", 102, 102);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      Node node1 = Node.newString(30, "!M^Krq0>R", 2, 0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      controlFlowAnalysis0.process(node1, node1);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, "!M^Krq0>R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(103, 103, 103);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, true, false);
      Node node1 = compiler0.jsRoot;
      controlFlowAnalysis0.process((Node) null, node0);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node((-864));
      Node node1 = new Node(37, node0, 39, 54);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      String string0 = "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$1";
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$1");
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      Node node2 = new Node(30, node1, node0);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node0);
      node3.siblings();
      compiler0.parseTestCode("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$1");
      Compiler compiler1 = null;
      try {
        compiler1 = new Compiler((ErrorManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // the error manager cannot be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node0 = new Node(119, 119, 409);
      Node node1 = new Node(409, node0, 119, 40);
      ControlFlowAnalysis.isBreakStructure(node1, true);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node2 = Node.newString(390, "", 45, 44);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node2, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseUnknownType();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      File file0 = MockFile.createTempFile("Not declared as a constructor", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      Node node0 = Node.newString(113, "*>v/G", 113, 1);
      ControlFlowAnalysis.isContinueStructure(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      cleanupPasses0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = Node.newString(0, "Named type with empty name component");
      jSType0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Named type with empty name component");
      Node node1 = new Node(114, node0, node0, node0, 41, 113);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      jSTypeArray0[1] = (JSType) enumType1;
      Stack<JSType> stack0 = new Stack<JSType>();
      ControlFlowAnalysis.isContinueStructure(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      ControlFlowAnalysis.computeFollowNode(node1, controlFlowAnalysis0);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node1, "Unknown class name");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      String string0 = "com.google.javascript.jscom.ControlFlowAnalysis$AstControlFlowGraph$1";
      Node node0 = Node.newString("com.google.javascript.jscom.ControlFlowAnalysis$AstControlFlowGraph$1");
      InputId inputId0 = new InputId("com.google.javascript.jscom.ControlFlowAnalysis$AstControlFlowGraph$1");
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node1 = Node.newString(38, "{JRPo^o}7'E&z11|8p");
      Node node2 = new Node((-2), node0, node1, node1, 4, 102);
      controlFlowAnalysis0.process(node0, node2);
      controlFlowAnalysis0.process(node1, node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      controlFlowAnalysis0.process(node0, node2);
      Node node3 = null;
      try {
        node3 = new Node(4062, node0, 309, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("J:VPdFfd[\"o");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = Node.newString("J:VPdFfd[\"o", 29, 46);
      controlFlowAnalysis0.process(node0, node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      Node node3 = new Node(4095, node2, node0, node1);
      Node node4 = ControlFlowAnalysis.computeFollowNode(node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Logger.getGlobal();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("D");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = new Node(4095, node0, node0, node0, node0, 52, 8);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node1, node1);
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(36, node0, 35, 50);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(31, node0, 33, 35);
      ControlFlowAnalysis.computeFollowNode(node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(119, 119, 119);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node1 = Node.newString(125, "", 21, (-436));
      controlFlowAnalysis0.process(node1, node1);
      ControlFlowAnalysis.isContinueStructure(node1);
      Node node2 = new Node((-199), node1, node0, node0, node0, 49, 1);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler1, true, true);
      Node node0 = Node.newString("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2");
      Node node1 = Node.newString(1895, "", 3, 2048);
      Node node2 = Normalize.parseAndNormalizeTestCode(compiler1, "", "interface");
      controlFlowAnalysis1.process(node1, node2);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis controlFlowAnalysis2 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      ControlFlowAnalysis controlFlowAnalysis3 = new ControlFlowAnalysis(compiler1, false, false);
      boolean boolean1 = ControlFlowAnalysis.isBreakTarget(node1, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node0 = Node.newString("com.google.javascript.jscom.ControlFlowAnalysis$AstControlFlowGraph$1");
      InputId inputId0 = new InputId("com.google.javascript.jscom.ControlFlowAnalysis$AstControlFlowGraph$1");
      node0.setInputId(inputId0);
      controlFlowAnalysis0.process(node0, node0);
      controlFlowAnalysis0.process(node0, node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      controlFlowAnalysis0.process(node0, node0);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      ControlFlowAnalysis controlFlowAnalysis2 = new ControlFlowAnalysis(compiler0, true, false);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis2);
      ControlFlowAnalysis controlFlowAnalysis3 = new ControlFlowAnalysis(compiler0, false, true);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget((Node) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(36, node0, 2427, 50);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node1);
      boolean boolean1 = ControlFlowAnalysis.isBreakTarget(node0, (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      jSTypeArray0[0] = jSType0;
      Node node0 = Node.newString(0, "Named type with empty name component");
      jSType0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Named type with empty name component");
      Node node1 = new Node(114, node0, node0, node0, 41, 113);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      jSTypeArray0[1] = (JSType) enumType1;
      Stack<JSType> stack0 = new Stack<JSType>();
      JSType jSType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) enumType0, jSTypeArray0[0], (List<JSType>) stack0);
      jSTypeArray0[2] = jSType1;
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ControlFlowAnalysis.getCatchHandlerForBlock(node2);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node3 = new Node((-25), node1);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$1");
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, true, true);
      Node node2 = Node.newString(1213, "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2", 37, 38);
      Node node3 = new Node((-346), node2);
      controlFlowAnalysis0.process(node3, node1);
      ControlFlowAnalysis.isBreakStructure(node3, true);
      Node node4 = null;
      try {
        node4 = new Node(4, node0, node2, node1, node1, 1, 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      Node node1 = new Node(32, node0, 15, 2);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakStructure((Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
          JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
          JSType[] jSTypeArray0 = new JSType[3];
          ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
          JSType jSType0 = modificationVisitor0.caseUnknownType();
          jSTypeArray0[0] = jSType0;
          Node node0 = Node.newString(0, "Named type with empty name component");
          jSType0.toString();
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Named type with empty name component");
          Node node1 = new Node(114, node0, node0, node0, 41, 113);
          EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, jSType0);
          EnumType enumType1 = enumType0.toMaybeEnumType();
          jSTypeArray0[1] = (JSType) enumType1;
          Stack<JSType> stack0 = new Stack<JSType>();
          JSType jSType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) enumType0, jSTypeArray0[0], (List<JSType>) stack0);
          jSTypeArray0[2] = jSType1;
          Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
          ControlFlowAnalysis.getCatchHandlerForBlock(node2);
          ControlFlowAnalysis.isBreakStructure(node1, false);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor148.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:422)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, "t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = new Node(110, (-515), (-515));
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.newString(78, "", 4095, 31);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      InputId inputId0 = new InputId("");
      inputId0.toString();
      inputId0.toString();
      ControlFlowAnalysis.isBreakStructure(node0, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      InputId inputId0 = new InputId("com.google.javascript.jscomp.9ontr'lFlowAnalysis$AstControlFlowGraph$1");
      node0.setInputId(inputId0);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(51, node0);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node0 = Node.newString("com.google.javascript.jscom.ControlFlowAnalysis$AstControlFlowGraph$1");
      InputId inputId0 = new InputId("com.google.javascript.jscom.ControlFlowAnalysis$AstControlFlowGraph$1");
      node0.setInputId(inputId0);
      controlFlowAnalysis0.process(node0, node0);
      controlFlowAnalysis0.process(node0, node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      controlFlowAnalysis0.process(node0, node0);
      Node node1 = new Node(3895, node0, 987, 39);
      node0.srcrefTree(node1);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, true, true);
      assertFalse(controlFlowAnalysis1.equals((Object)controlFlowAnalysis0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(36, node0, 35, 50);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.mayThrowException(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      ControlFlowGraph<Node> controlFlowGraph0 = controlFlowAnalysis0.getCfg();
      assertNull(controlFlowGraph0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = new Node(2, 2, 2);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Node node1 = new Node(2, node0, 4095, 15);
      controlFlowAnalysis0.process(node1, node0);
      assertFalse(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFloGraph$1");
      InputId inputId0 = new InputId("com.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFloGraph$1");
      ControlFlowAnalysis.isBreakStructure(node0, false);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, "com.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFloGraph$1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget((Node) null, "com.google.javascript.jscomp.ControlFlowAnalysis$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(45, node0, node0, 46, 44);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node1, "H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      Node node0 = new Node(112);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      node0.detachChildren();
      ControlFlowAnalysis.computeFallThrough(node1);
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node(119);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString(120, "Vdi`n]ve7}1", 120, 120);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      NodeTraversal nodeTraversal1 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal1, node0, node0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      NodeTraversal nodeTraversal2 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      boolean boolean1 = ControlFlowAnalysis.isBreakTarget(node1, "Vdi`n]ve7}1");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = new Node(30);
      Node node1 = new Node(1010, node0, node0, node0, node0, 52, 37);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Logger.getGlobal();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      Node node0 = Node.newString("");
      controlFlowAnalysis0.process(node0, node0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = linkedFlowScope1.getRootNode();
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = new Node(125);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      assertFalse(node0.isExprResult());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(50, 50, 50);
      Node node1 = new Node(35, node0, node0, node0, node0);
      Node node2 = reorderConstantExpression0.optimizeSubtree(node1);
      ControlFlowAnalysis.computeFollowNode(node0);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node2);
      node3.siblings();
      Node node4 = ControlFlowAnalysis.computeFallThrough(node3);
      Node node5 = null;
      try {
        node5 = new Node(262144, node3, node4, node2, node0, 16, 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(50, 50, 50);
      Node node1 = new Node(4095, node0, node0, node0, 41, 2);
      Node node2 = reorderConstantExpression0.optimizeSubtree(node1);
      ControlFlowAnalysis.computeFollowNode(node0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node3 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      node1.addChildBefore(node2, node3);
      Node node4 = ControlFlowAnalysis.computeFallThrough(node2);
      node4.siblings();
      ControlFlowAnalysis.computeFallThrough(node4);
      Compiler compiler0 = null;
      try {
        compiler0 = new Compiler((ErrorManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // the error manager cannot be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = compiler0.jsRoot;
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process((Node) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.mayThrowException((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString("Cannot find break target.", 0, 0);
      node0.toStringTree();
      node0.addChildrenToFront(node0);
      // Undeclared exception!
      ControlFlowAnalysis.getExceptionHandler(node0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(50, 50, 50);
      Node node1 = new Node(4095, node0, node0, node0, 41, 2);
      Node node2 = reorderConstantExpression0.optimizeSubtree(node1);
      ControlFlowAnalysis.computeFollowNode(node0);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node2);
      node3.siblings();
      ControlFlowAnalysis.computeFallThrough(node3);
      Compiler compiler0 = null;
      try {
        compiler0 = new Compiler((ErrorManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // the error manager cannot be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(36, node0, 35, 50);
      Compiler compiler0 = new Compiler();
      Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString("Cannot find break target.", 0, 0);
      node0.toStringTree();
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      node0.addChildrenToFront(node1);
      node1.detachChildren();
      ControlFlowAnalysis.computeFallThrough(node1);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.computeFollowNode(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      ControlFlowAnalysis.computeFollowNode(node1);
      ControlFlowAnalysis.isContinueStructure(node1);
      Node node2 = new Node(42, node1, 37, 31);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFallThrough((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      boolean boolean0 = false;
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$1");
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      Node node2 = new Node(125, node1, node1);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node2);
      node3.siblings();
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFallThrough((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      System.setCurrentTimeMillis(10L);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("~o");
      node0.toString(true, true, true);
      Node.newString("~o");
      ControlFlowAnalysis.mayThrowException(node0);
      System.setCurrentTimeMillis(50);
      Node node1 = ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(115, "YLS|!v{G4Z@a_", (-1), (-1));
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      InputId inputId0 = new InputId("W~oNt@0#{Wka");
      inputId0.toString();
      inputId0.toString();
      ControlFlowAnalysis.isBreakStructure(node0, false);
      Logger logger0 = Logger.getLogger("1sN}>");
      assertEquals("1sN}>", logger0.getName());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString("om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1");
      ControlFlowAnalysis.isBreakTarget(node0, "om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1");
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      Node node1 = Node.newString(77, "om.google.javascrpt.jscomp.ControlFlowAnalysis$AstControlFowGrph$1", 43, (-549));
      controlFlowAnalysis0.process(node1, node0);
      ControlFlowAnalysis.isBreakStructure(node1, false);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, true);
      Node node2 = ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node(90);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      assertFalse(node0.isNot());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = new Node(119);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = new Node((-1125));
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node0 = Node.newString("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$1");
      InputId inputId0 = new InputId("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$1");
      node0.setInputId(inputId0);
      controlFlowAnalysis0.process(node0, node0);
      controlFlowAnalysis0.process(node0, node0);
      ControlFlowAnalysis.isBreakStructure(node0, false);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      controlFlowAnalysis0.process((Node) null, node0);
      ControlFlowAnalysis.isContinueStructure(node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode((Node) null, controlFlowAnalysis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$1");
      ControlFlowAnalysis.isBreakStructure(node0, false);
      Node node1 = ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node0 = Node.newString("");
      Node node1 = peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      ControlFlowAnalysis.getCatchHandlerForBlock(node1);
      AbstractCompiler abstractCompiler0 = null;
      node1.addSuppression("INHERITS");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode((Node) null, controlFlowAnalysis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("J:VPdFfd[\"o");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(36, node0, 35, 50);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(36, node0, 35, 50);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString((-405), "r\"", (-405), 602);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node1);
      ControlFlowAnalysis.isContinueStructure(node2);
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(50, 50, 50);
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      // Undeclared exception!
      try { 
        reorderConstantExpression0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString(125, "qE}", 125, 125);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getCatchHandlerForBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      Node node0 = compiler1.externAndJsRoot;
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getCatchHandlerForBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      Node node0 = new Node(255, (-1526), 255);
      Node node1 = new Node(105, node0, node0, node0, node0, 31, (-44));
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis1.process((Node) null, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString("Cannot find break target.", 0, 0);
      node0.toStringTree();
      ControlFlowAnalysis.computeFollowNode(node0);
      // Undeclared exception!
      try { 
        node0.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = ControlFlowAnalysis.computeFollowNode(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node1.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node0 = new Node(987);
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      ControlFlowAnalysis.computeFallThrough(node1);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowGraph<Node> controlFlowGraph0 = controlFlowAnalysis0.getCfg();
      assertNull(controlFlowGraph0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      ControlFlowGraph<Node> controlFlowGraph0 = controlFlowAnalysis0.getCfg();
      assertNull(controlFlowGraph0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node.newString(102, "", 102, 102);
      InputId inputId0 = new InputId("");
      inputId0.toString();
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isContinueStructure((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node0 = compiler_IntermediateState0.externsRoot;
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isContinueStructure((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = new Node(108);
      Node node1 = new Node(30, node0, node0, node0, node0, 52, 26);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax0.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = new Node((-44));
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0, "");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, syntacticScopeCreator0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, true, false);
  }
}

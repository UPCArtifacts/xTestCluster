/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 18:57:11 GMT 2023
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.ChartChangeListener;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.ChartProgressListener;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.PolarItemRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JFreeChart_ESTest extends JFreeChart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.handleClick(1684, 10, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlignment(10);
      jFreeChart0.getBackgroundImageAlignment();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("#/6JVf\"gOII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      BufferedImage bufferedImage0 = new BufferedImage(613, 10, 10);
      jFreeChart0.setBackgroundImage(bufferedImage0);
      BufferedImage bufferedImage1 = jFreeChart0.createBufferedImage(10, 1120);
      jFreeChart0.setBackgroundImage(bufferedImage1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle(0, (Title) dateTitle0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getLegend((-2));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      jFreeChart0.setBorderPaint(piePlot3D0.DEFAULT_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(multiplePiePlot0);
      jFreeChart0.plotChanged(plotChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Font font0 = Font.decode("^3?VN<v\"H}e+f");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(jDBCCategoryDataset0);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(jDBCCategoryDataset0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart("^3?VN<v\"H}e+f", font0, spiderWebPlot0, false);
      jFreeChart0.removeLegend();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "");
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(2.0F, 15);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, cyclicNumberAxis0);
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent(paintScaleLegend0, jFreeChart0, 1177, 500);
      jFreeChart0.notifyListeners(chartProgressEvent0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      DateTitle dateTitle0 = new DateTitle();
      TitleChangeEvent titleChangeEvent0 = new TitleChangeEvent(dateTitle0);
      jFreeChart0.notifyListeners(titleChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0.DEFAULT_LABEL_FONT, piePlot3D0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 1, (-733), 3, 800, 4168, false, false, true, false, false, true);
      jFreeChart0.addProgressListener(chartPanel0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", meterPlot0.DEFAULT_LABEL_FONT, combinedRangeXYPlot0, false);
      jFreeChart0.getXYPlot();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      jFreeChart0.getTitle();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'subtitle' argument.", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      jFreeChart0.getSubtitles();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
      JFreeChart jFreeChart1 = new JFreeChart("o4&", jFreeChart0.DEFAULT_TITLE_FONT, multiplePiePlot0, false);
      jFreeChart1.getSubtitleCount();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getPlot();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ArrayList<ThermometerPlot> arrayList0 = new ArrayList<ThermometerPlot>();
      jFreeChart0.setSubtitles(arrayList0);
      jFreeChart0.getLegend();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getBackgroundPaint();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlpha((-196.7F));
      jFreeChart0.getBackgroundImageAlpha();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      BufferedImage bufferedImage0 = new BufferedImage(613, 10, 10);
      jFreeChart0.setBackgroundImage(bufferedImage0);
      jFreeChart0.getBackgroundImage();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(936, 10, (double) 10, (double) 600, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(909, 2147483646);
      CenterArrangement centerArrangement0 = new CenterArrangement();
      LegendTitle legendTitle0 = new LegendTitle(multiplePiePlot0, centerArrangement0, centerArrangement0);
      jFreeChart0.drawTitle(legendTitle0, graphics2D0, rectangle0, true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3740, 600, 987.0, (double) 15, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(600, 10);
      jFreeChart0.drawTitle(dateTitle0, graphics2D0, rectangle0, true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(800, 1366, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.createBufferedImage(10, 2, 3, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0.DEFAULT_LABEL_FONT, piePlot3D0, false);
      // Undeclared exception!
      try { 
        jFreeChart0.titleChanged((TitleChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ArrayList<ThermometerPlot> arrayList0 = new ArrayList<ThermometerPlot>();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      arrayList0.add(thermometerPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setSubtitles(arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.ThermometerPlot cannot be cast to org.jfree.chart.title.Title
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Rectangle rectangle0 = new Rectangle(10, 3);
      LegendTitle legendTitle0 = new LegendTitle(multiplePiePlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle(legendTitle0, (Graphics2D) null, rectangle0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Double0, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      JScrollPane jScrollPane0 = new JScrollPane();
      JViewport jViewport0 = jScrollPane0.getViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      Rectangle2D rectangle2D0 = multiplePiePlot0.DEFAULT_INSETS.createOutsetRectangle((Rectangle2D) rectangle0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) null, rectangle2D0, (Point2D) point2D_Float0, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 2145251336, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1073741824, 10, 10, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("RenderingHints given are null", piePlot3D0.DEFAULT_LABEL_FONT, piePlot3D0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 2143910463, (double) 10, 815.71378441352, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2140349150, 2140349150, (double) 2140349150, (double) 10, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions (width=2140349150 height=2140349150) are too large
         //
         verifyException("java.awt.image.SampleModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(680, 420);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2137296185, 10);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1188), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1188) and height (10) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.addLegend((LegendTitle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("6ApzA[RC03+_", stackedAreaRenderer0.DEFAULT_VALUE_LABEL_FONT, (Plot) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      boolean boolean0 = jFreeChart0.equals(jFreeChart0);
      assertTrue(jFreeChart0.isNotify());
      assertTrue(boolean0);
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'subtitle' argument.", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 15, 270, 10, 10, 10, false, false, false, false, false, false);
      jFreeChart0.setBackgroundImageAlpha(420);
      assertEquals(420.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (-1776.77533), (double) 1.0F, chartRenderingInfo0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      jFreeChart0.setNotify(true);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      jFreeChart0.clearSubtitles();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.addSubtitle((Title) dateTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      jFreeChart0.getSubtitle(0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getLegend(0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getSubtitleCount();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-4173), 470, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-4173) and height (470) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(1882.4146137744);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'padding' argument.", meterPlot0);
      boolean boolean0 = jFreeChart0.isBorderVisible();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(300, 10, 680, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 680
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0.DEFAULT_LABEL_FONT, piePlot3D0, false);
      jFreeChart0.fireChartChanged();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertNotSame(jFreeChart1, jFreeChart0);
      assertTrue(jFreeChart1.isNotify());
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertFalse(jFreeChart1.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart1 = multiplePiePlot0.getPieChart();
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertTrue(jFreeChart1.isNotify());
      assertFalse(jFreeChart1.isBorderVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      JFreeChart jFreeChart1 = new JFreeChart((String) null, jFreeChart0.DEFAULT_TITLE_FONT, multiplePiePlot0, false);
      boolean boolean0 = jFreeChart0.equals(jFreeChart1);
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertFalse(boolean0);
      assertFalse(jFreeChart1.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("489my^az-pR~-1YG|t", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      JFreeChart jFreeChart1 = new JFreeChart(meterPlot0);
      boolean boolean0 = jFreeChart0.equals(jFreeChart1);
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(boolean0);
      assertTrue(jFreeChart1.isNotify());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      JFreeChart jFreeChart1 = new JFreeChart(multiplePiePlot0);
      jFreeChart1.setAntiAlias(false);
      boolean boolean0 = jFreeChart0.equals(jFreeChart1);
      assertFalse(jFreeChart1.getAntiAlias());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      boolean boolean0 = jFreeChart0.equals(multiplePiePlot0);
      assertFalse(boolean0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3071.26736), (-1.0), "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      jFreeChart0.removeProgressListener((ChartProgressListener) null);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, true);
      jFreeChart0.removeProgressListener(chartPanel0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0);
      jFreeChart0.setBackgroundImageAlpha(10);
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.renderer.category.LineAndShapeRenderer", ringPlot0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      jFreeChart0.removeChangeListener(chartPanel0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.removeChangeListener((ChartChangeListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'listener' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      jFreeChart0.removeChangeListener(chartPanel0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("", multiplePiePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      jFreeChart0.addChangeListener(chartPanel0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(270, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      jFreeChart0.draw(graphics2D0, rectangle2D0, (Point2D) null, chartRenderingInfo0);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(270, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle(legendTitle0, (Graphics2D) null, (Rectangle2D) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Rectangle rectangle0 = new Rectangle(680, 10);
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle((Title) null, (Graphics2D) null, rectangle0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 't' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      DateTitle dateTitle0 = new DateTitle();
      BufferedImage bufferedImage0 = new BufferedImage(613, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(10, 270, 10, 10);
      jFreeChart0.drawTitle(dateTitle0, graphics2D0, rectangle0, false);
      assertEquals((-48), rectangle0.height);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlpha(0.5F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      jFreeChart0.setBackgroundImageAlignment(270);
      jFreeChart0.setBackgroundImageAlignment(10);
      assertEquals(10, jFreeChart0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlignment(15);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImage((Image) null);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      BufferedImage bufferedImage0 = new BufferedImage(10, 15, 10);
      jFreeChart0.setBackgroundImage(bufferedImage0);
      jFreeChart0.setBackgroundImage(bufferedImage0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      jFreeChart0.setBackgroundImage(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Point point0 = new Point(10, (-2885));
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle2D rectangle2D0 = multiplePiePlot0.DEFAULT_INSETS.createOutsetRectangle((Rectangle2D) rectangle0, true, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.draw(graphics2D0, rectangle2D0, (Point2D) point0, chartRenderingInfo0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundPaint((Paint) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, piePlot0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getBaseFillPaint();
      jFreeChart0.setBackgroundPaint(paint0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setTextAntiAlias(true);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setTextAntiAlias(false);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      jFreeChart0.setAntiAlias(false);
      assertFalse(jFreeChart0.getAntiAlias());
      
      jFreeChart0.setAntiAlias(true);
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      jFreeChart0.setAntiAlias(false);
      jFreeChart0.setAntiAlias(false);
      assertFalse(jFreeChart0.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setAntiAlias(false);
      boolean boolean0 = jFreeChart0.getAntiAlias();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      jFreeChart0.setAntiAlias(true);
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle(0, (Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle(2143986117, (Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'subtitle' argument.", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      CompositeTitle compositeTitle0 = new CompositeTitle();
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((-1403), (Title) compositeTitle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle((-308));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ArrayList<ThermometerPlot> arrayList0 = new ArrayList<ThermometerPlot>();
      arrayList0.add((ThermometerPlot) null);
      jFreeChart0.setSubtitles(arrayList0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      // Undeclared exception!
      try { 
        jFreeChart0.setSubtitles((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'subtitles' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      LegendTitle legendTitle0 = jFreeChart0.getLegend(10);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(legendTitle0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      jFreeChart0.setTitle("X#/6J2f\"=OII.x");
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setTitle((String) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setTitle((TextTitle) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3065.9295616369);
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      TextTitle textTitle0 = new TextTitle();
      jFreeChart0.setTitle(textTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setTitle("org.jfree.chart.event.ChartProgressListener");
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setPadding(multiplePiePlot0.DEFAULT_INSETS);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.setRenderingHints((RenderingHints) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // RenderingHints given are null
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("489my^az-pR~-1YG|t", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      jFreeChart0.setRenderingHints(renderingHints0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, combinedRangeXYPlot0, true);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("zsE]ew[P", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, false);
      assertTrue(jFreeChart0.isNotify());
      
      jFreeChart0.setNotify(false);
      assertFalse(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("123", (Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot0);
      jFreeChart0.getPadding();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBorderVisible(false);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      boolean boolean0 = jFreeChart0.equals(jFreeChart1);
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(boolean0);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertTrue(jFreeChart1.isNotify());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getTitle();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      BufferedImage bufferedImage0 = new BufferedImage(613, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(10, 270);
      jFreeChart0.draw(graphics2D0, (Rectangle2D) rectangle0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setTextAntiAlias((Object) combinedRangeXYPlot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.jfree.chart.plot.CombinedRangeXYPlot@3d incompatible with Text-specific antialiasing enable key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", compassPlot0);
      jFreeChart0.getBackgroundPaint();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      jFreeChart0.setBorderStroke(piePlot3D0.DEFAULT_LABEL_OUTLINE_STROKE);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart1 = multiplePiePlot0.getPieChart();
      boolean boolean0 = jFreeChart0.equals(jFreeChart1);
      assertTrue(jFreeChart1.isNotify());
      assertFalse(boolean0);
      assertFalse(jFreeChart1.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BasicStroke basicStroke0 = (BasicStroke)jFreeChart0.getBorderStroke();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.PiePlot cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getSubtitles();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.PiePlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JFreeChart.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getBackgroundImage();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getAntiAlias();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      float float0 = jFreeChart0.getBackgroundImageAlpha();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      XYPlot xYPlot0 = new XYPlot();
      jFreeChart0.setBorderPaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart1 = new JFreeChart(spiderWebPlot0);
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertTrue(jFreeChart1.isNotify());
      assertFalse(boolean0);
      assertFalse(jFreeChart1.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      BufferedImage bufferedImage0 = new BufferedImage(613, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double(1.0F, 613, 8.0, 10);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.draw(graphics2D0, rectangle2D0, chartRenderingInfo0);
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Color color0 = (Color)jFreeChart0.getBorderPaint();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("F,!A:");
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, (PolarItemRenderer) null);
      JFreeChart jFreeChart0 = new JFreeChart("Nb#^yL68y9Ji", polarPlot0);
      LegendTitle legendTitle0 = new LegendTitle(polarPlot0);
      jFreeChart0.addLegend(legendTitle0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertNotNull(legendTitle0);
      
      TitleChangeEvent titleChangeEvent0 = new TitleChangeEvent(legendTitle0);
      jFreeChart0.titleChanged(titleChangeEvent0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 10, (double) 10, (-925.23912), (ChartRenderingInfo) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2, bufferedImage0.getType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getTextAntiAlias();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.plotChanged((PlotChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("X#/6J2f\"=OII.x", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(200, 15);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.draw(graphics2D0, rectangle2D0, (Point2D) null, chartRenderingInfo0);
      assertEquals(200, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, bufferedImage0.getTileHeight());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      boolean boolean0 = jFreeChart0.isNotify();
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("~yp8=KsQ$u eF<", spiderWebPlot0.DEFAULT_LABEL_FONT, spiderWebPlot0, true);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertNotNull(legendTitle0);
      
      jFreeChart0.removeSubtitle(legendTitle0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }
}

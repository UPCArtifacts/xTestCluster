/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 22:32:44 GMT 2023
 */

package org.apache.commons.math3.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimplexTableau_ESTest extends SimplexTableau_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-401.71));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-401.71), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1461.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-401.71), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      simplexTableau0.hashCode();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-401.71), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-2389.0));
      assertEquals((-2389.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1.0));
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray1 = new double[2];
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, relationship0, (-1.0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals((-1.0), linearConstraint0.getValue(), 0.01);
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.offerFirst(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(2, doubleArray1.length);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals((-1.0), linearConstraint0.getValue(), 0.01);
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (double) doubleArray0[1]);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      simplexTableau0.hashCode();
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-2389.0));
      assertEquals((-2389.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1.0));
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray1 = new double[2];
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, relationship0, (-1.0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals((-1.0), linearConstraint0.getValue(), 0.01);
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.offerFirst(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(2, doubleArray1.length);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals((-1.0), linearConstraint0.getValue(), 0.01);
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray0[1]);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      simplexTableau0.hashCode();
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1461.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 17);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      simplexTableau0.hashCode();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, 71);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau1);
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2626.572790669);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2626.572790669, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1459.0058563894636), 2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2626.572790669, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1631.370365546), 99);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2626.572790669, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau1);
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2626.572790669, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 6.283185307179586, 0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 2708.936162593072, relationship0, doubleArray0, (-60.0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-2768.936162593072), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals((-2768.936162593072), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau1);
      
      boolean boolean1 = simplexTableau1.equals(simplexTableau0);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1802, (-1963.3306112987011));
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1802, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1802, arrayRealVector0.getDimension());
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction1);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, true, 784.0009329432276);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertEquals(0, linkedList0.size());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1802, arrayRealVector0.getDimension());
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01);
      assertNotNull(simplexTableau0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau1);
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1802, arrayRealVector0.getDimension());
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1946.756485875254));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      // Undeclared exception!
      try { 
        simplexTableau0.setEntry(5, 2, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (5)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1538.8));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      // Undeclared exception!
      try { 
        simplexTableau0.subtractRow(0, 1248, 0.902267575263977);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,248)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-1946.756485875254);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {0.0, 0.0, (-1946.756485875254), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1946.756485875254), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1946.756485875254));
      assertArrayEquals(new double[] {0.0, 0.0, (-1946.756485875254), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      boolean boolean0 = simplexTableau0.isOptimal();
      assertArrayEquals(new double[] {0.0, 0.0, (-1946.756485875254), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-2431.630437));
      assertArrayEquals(new double[] {6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-2431.630437), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, relationship0, 6.283185307179586);
      assertArrayEquals(new double[] {6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(6.283185307179586, linearConstraint0.getValue(), 0.01);
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.offer(linearConstraint0);
      assertArrayEquals(new double[] {6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(6.283185307179586, linearConstraint0.getValue(), 0.01);
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
      assertArrayEquals(new double[] {6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(2, doubleArray0.length);
      assertEquals((-2431.630437), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      simplexTableau0.dropPhase1Objective();
      assertArrayEquals(new double[] {6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(2, doubleArray0.length);
      assertEquals((-2431.630437), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      simplexTableau0.initializeColumnLabels();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 3589.219897871);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3589.219897871, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 3589.219897871);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3589.219897871, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      simplexTableau0.subtractRow(0, 0, 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3589.219897871, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1461.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-581.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      simplexTableau0.setEntry(0, 0, (-581.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1000.408934661402));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1000.408934661402), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1000.408934661402));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1000.408934661402), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1000.408934661402), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1.0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getWidth();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1461.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-581.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getSlackVariableOffset();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 3589.219897871);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3589.219897871, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3589.219897871);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3589.219897871, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getRhsOffset();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3589.219897871, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-4917.74196));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-4917.74196), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), (-132));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-4917.74196), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-4917.74196), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getNumSlackVariables();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, (-180.812));
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, relationship0, 786.387305);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(786.387305, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, linkedList0.size());
      assertEquals(786.387305, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-180.812));
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getNumSlackVariables();
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1461.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1461.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getNumObjectiveFunctions();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1000.408934661402));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1000.408934661402), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1000.408934661402));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1000.408934661402), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1000.408934661402), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1459.0058563894636));
      assertEquals(19, doubleArray0.length);
      assertEquals((-1459.0058563894636), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1459.0058563894636));
      assertEquals(19, doubleArray0.length);
      assertEquals((-1459.0058563894636), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertEquals(19, doubleArray0.length);
      assertEquals((-1459.0058563894636), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-2389.0));
      assertEquals((-2389.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1.0));
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray1 = new double[2];
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, relationship0, (-1.0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals((-1.0), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.offerFirst(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(2, doubleArray1.length);
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (double) doubleArray0[1]);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2658.4562259);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {(-2658.4562259)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
      assertArrayEquals(new double[] {(-2658.4562259)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2658.4562259, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2699.39;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {2699.39, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
      assertArrayEquals(new double[] {2699.39, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-2699.39), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-4917.74196));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-4917.74196), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), (-132));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-4917.74196), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getHeight();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-4917.74196), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1461.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1461.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals((-1461.0), linearConstraint0.getValue(), 0.01);
      assertNotNull(linearConstraint0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertFalse(linkedList0.contains(linearConstraint0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.offer(linearConstraint0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(1, doubleArray0.length);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals((-1461.0), linearConstraint0.getValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2988.37));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      simplexTableau0.dropPhase1Objective();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      
      double double0 = simplexTableau0.getEntry(1, 1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2, Double.POSITIVE_INFINITY);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, Double.POSITIVE_INFINITY);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, Double.POSITIVE_INFINITY, 2);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      double double0 = simplexTableau0.getEntry(0, 0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      double double0 = simplexTableau0.getEntry(0, 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 6.283185307179586, 0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      Integer integer0 = simplexTableau0.getBasicRow(0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 724.35757997);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(724.35757997, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-2658.4562259), relationship0, doubleArray0, 1.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2659.4562259, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(2659.4562259, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2658.4562259));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(1, doubleArray0.length);
      assertEquals(724.35757997, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      Integer integer0 = simplexTableau0.getBasicRow(1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(1, doubleArray0.length);
      assertEquals(724.35757997, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau0);
      
      Integer integer0 = simplexTableau0.getBasicRow(0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 33.648000872001006);
      assertEquals(11, doubleArray0.length);
      assertEquals(33.648000872001006, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 33.648000872001006);
      assertEquals(11, doubleArray0.length);
      assertEquals(33.648000872001006, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getArtificialVariableOffset();
      assertEquals(11, doubleArray0.length);
      assertEquals(33.648000872001006, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1461.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2988.37));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)simplexTableau0.createTableau(true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1461.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertNotNull(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      // Undeclared exception!
      try { 
        simplexTableau0.normalizeConstraints((Collection<LinearConstraint>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3484, 3484, 3484);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(3484, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(3484, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3484, arrayRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 1.0E-12);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(3484, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3484, arrayRealVector0.getDimension());
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(3484, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3484, arrayRealVector0.getDimension());
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau0);
      
      // Undeclared exception!
      simplexTableau0.isOptimal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2544);
      assertEquals(2544, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1439.0);
      assertEquals(2544, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1439.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1221.217503882476));
      assertEquals(0, linkedList0.size());
      assertEquals(2544, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1439.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau0);
      
      // Undeclared exception!
      simplexTableau0.getSolution();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1073741815, 3164);
      // Undeclared exception!
      SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      // Undeclared exception!
      try { 
        simplexTableau0.getEntry(1884, 1884);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,884)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.2396956838659177));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.2396956838659177));
      // Undeclared exception!
      try { 
        simplexTableau0.getBasicRow((-4363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (-4,363)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1384.16453));
      linkedList0.offer(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2102);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0, arrayRealVector0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector1, (-1.0));
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0));
      // Undeclared exception!
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2951);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.7937005259840998);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1868.5980700632745);
      // Undeclared exception!
      simplexTableau0.divideRow(0, 0.7937005259840998);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, (-327));
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow((-327), (-327));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-327)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2298, 2298);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12, (-3672));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3521), 1.0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1210.954430048);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), 2010);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,518 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, (Collection<LinearConstraint>) null, goalType0, false, 2612.7, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-635.912623147));
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2998);
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 2998);
      linkedList0.offer(linearConstraint0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.080639291795678E-30, 2998);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(494, 1294, 1294);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 232.7);
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3813), 1426, 2084.39);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-3813));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2084.39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,811 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, false, 320.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1684.4551424616452));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1459.0058563894636));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(378, 1191.94257);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, relationship0, 2.0);
      linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-701.259303261904));
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-701.259303261904));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      linkedList0.offer(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-701.259303261904));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.7583139396713283));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.7583139396713283));
      GoalType goalType1 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, false, (-1.7583139396713283));
      boolean boolean0 = simplexTableau1.equals(simplexTableau0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2298.5);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2298.5);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2298.5, 39);
      boolean boolean0 = simplexTableau1.equals(simplexTableau0);
      assertFalse(boolean0);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-41.117103752705674));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-41.117103752705674));
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 464.580634966);
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-701.259303261904));
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-701.259303261904));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      linkedList0.offer(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-701.259303261904));
      simplexTableau0.dropPhase1Objective();
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-701.259303261904));
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-650.4419275934688));
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-650.4419275934688), relationship0, doubleArray0, 719.7514);
      linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-650.4419275934688));
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.041666666666621166);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(746, (-1));
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(openMapRealVector0, 574.7205);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, false, (-3998.21284459497));
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.1675426322458509));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.1675426322458509));
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.1675426322458509));
      boolean boolean0 = simplexTableau1.equals(simplexTableau0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
      boolean boolean0 = simplexTableau0.equals(linearObjectiveFunction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
      boolean boolean0 = simplexTableau0.equals(simplexTableau0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-650.4419275934688));
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-650.4419275934688));
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1459.0058563894636));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1459.0058563894636));
      simplexTableau0.divideRow(0, (-1459.0058563894636));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1459.0058563894636));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.GEQ;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1459.0058563894636);
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, relationship0, 166.29028644);
      linkedList0.offer(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 166.29028644);
      simplexTableau0.dropPhase1Objective();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0));
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0));
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1459.0058563894636);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1459.0058563894636));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1459.0058563894636));
      boolean boolean0 = simplexTableau0.isOptimal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1645.1462758952));
      linkedList0.offer(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-634.6272752423), (-403));
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1));
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, (-1.0), relationship0, openMapRealVector0, (-1.0));
      linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0));
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) (-1);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-1.2588742703536392E188));
      linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1));
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.1675426322458509));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.1675426322458509));
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1));
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, (-1.0), relationship0, openMapRealVector0, (-1.0));
      linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0));
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1459.0058563894636));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1459.0058563894636));
      double[][] doubleArray1 = simplexTableau0.getData();
      assertEquals(1, doubleArray1.length);
  }
}

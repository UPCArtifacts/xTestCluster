/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 18:50:02 GMT 2023
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.integration.SimpsonIntegrator;
import org.apache.commons.math.analysis.integration.TrapezoidIntegrator;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvergingAlgorithmImpl_ESTest extends ConvergingAlgorithmImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.setRelativeAccuracy((-1.0));
      assertEquals((-1.0), secantSolver0.getRelativeAccuracy(), 0.01);
      
      secantSolver0.resetRelativeAccuracy();
      assertEquals(0.0, secantSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.setMaximalIterationCount(0);
      assertEquals(0, newtonSolver0.getMaximalIterationCount());
      
      newtonSolver0.resetMaximalIterationCount();
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.setAbsoluteAccuracy(391.35569490069);
      assertEquals(391.35569490069, secantSolver0.getAbsoluteAccuracy(), 0.01);
      
      secantSolver0.resetAbsoluteAccuracy();
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(Double.NaN);
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(Double.NaN, brentSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      simpsonIntegrator0.setRelativeAccuracy((-2.2572392971112485E12));
      assertEquals((-2.2572392971112485E12), simpsonIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      mullerSolver0.setMaximalIterationCount(867);
      assertEquals(867, mullerSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      bisectionSolver0.setAbsoluteAccuracy((-4009.32661166));
      assertEquals((-4009.32661166), bisectionSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.resetRelativeAccuracy();
      assertEquals(0, laguerreSolver0.getIterationCount());
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.resetAbsoluteAccuracy();
      assertEquals(64, trapezoidIntegrator0.getMaximalIterationCount());
      assertEquals(1.0E-6, trapezoidIntegrator0.getRelativeAccuracy(), 0.01);
      assertEquals(0, trapezoidIntegrator0.getIterationCount());
      assertEquals(1.0E-15, trapezoidIntegrator0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.setRelativeAccuracy(1970.7);
      double double0 = secantSolver0.getRelativeAccuracy();
      assertEquals(1970.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.setRelativeAccuracy((-231.214387449));
      double double0 = secantSolver0.getRelativeAccuracy();
      assertEquals((-231.214387449), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver((-2681), 0.0);
      int int0 = brentSolver0.getMaximalIterationCount();
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals((-2681), int0);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      assertEquals(0, laguerreSolver0.getIterationCount());
      
      double[] doubleArray0 = new double[2];
      laguerreSolver0.solveAll(doubleArray0, (-1354.8890446650353));
      int int0 = laguerreSolver0.getIterationCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(1486, 1486);
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals(1486.0, double0, 0.01);
      assertEquals(1486, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(1103.2423816953);
      brentSolver0.setAbsoluteAccuracy((-156.0));
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals((-156.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      double double0 = secantSolver0.getRelativeAccuracy();
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0, secantSolver0.getIterationCount());
      assertEquals(100, secantSolver0.getMaximalIterationCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      assertEquals(100, secantSolver0.getMaximalIterationCount());
      
      secantSolver0.setMaximalIterationCount(0);
      int int0 = secantSolver0.getMaximalIterationCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      int int0 = laguerreSolver0.getIterationCount();
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(0.0, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, int0);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0.0);
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, brentSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      int int0 = secantSolver0.getMaximalIterationCount();
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0, secantSolver0.getIterationCount());
      assertEquals(100, int0);
      assertEquals(0.0, secantSolver0.getRelativeAccuracy(), 0.01);
  }
}

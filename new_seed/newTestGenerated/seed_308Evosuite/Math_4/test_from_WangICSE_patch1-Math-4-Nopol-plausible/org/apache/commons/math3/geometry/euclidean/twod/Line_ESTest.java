/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 12:48:59 GMT 2023
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.AffineTransform;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(1);
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      assertNotNull(transform0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(3.145894820876798E-6, (-1450.0));
      affineTransform0.setTransform(0.0, 1501.52, 0.0, (-2613.00849), (-2613.00849), 0.19999954104423523);
      try { 
        Line.getTransform(affineTransform0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non-invertible affine transform collapses some lines into single points
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.570796327, 1.570796327);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, 1.0E-10);
      boolean boolean0 = line0.isParallelTo(line1);
      assertEquals(1.570796327, line0.getOriginOffset(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.5707963268429204, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-2325.734), (-2325.734));
      Line line0 = new Line(vector2D0, vector2D0);
      line0.setOriginOffset(1.0E-10);
      Vector2D vector2D1 = Vector2D.ZERO;
      boolean boolean0 = line0.contains(vector2D1);
      assertEquals(1.0E-10, line0.getOriginOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, (-796.953572));
      Line line1 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.sameOrientationAs(line1);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 40.43631523713645);
      Line line1 = line0.getReverse();
      line0.setAngle(0.0);
      double double0 = line1.getOffset(line0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1.57079632679);
      line0.setOriginOffset(994.728314);
      line0.intersection(line0);
      assertEquals(994.728314, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 40.43631523713645);
      Line line1 = line0.getReverse();
      Vector2D vector2D1 = line1.intersection(line0);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 1.5707963267948966);
      Line line1 = new Line(line0);
      Vector2D vector2D1 = line0.intersection(line1);
      assertNull(vector2D1);
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-2325.734), (-2325.734));
      Line line0 = new Line(vector2D0, (-2325.734));
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      Vector2D vector2D1 = line0.toSpace(vector1D0);
      assertEquals(1.0818077277511995E7, vector2D1.getNormSq(), 0.01);
      assertEquals(309779.98304477736, vector1D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, 3.141592653589793);
      Line line1 = line0.getReverse();
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 3.141592653589793);
      line0.revertSelf();
      assertEquals(Double.POSITIVE_INFINITY, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(0.0, vector2D0, 0.0, vector2D0, 0.0, vector2D0, 0.0, vector2D0);
      Line line0 = new Line(vector2D0, vector2D1);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-529.8442375658759));
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      assertFalse(vector1D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 40.43631523713645);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = line0.toSpace(vector1D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getX(), 0.01);
      assertEquals(-0.0, line0.getOriginOffset(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      Vector2D vector2D1 = line0.toSpace(vector1D0);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-3217.95086625));
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = line0.toSpace(vector1D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
      assertEquals(Double.NaN, vector2D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 3466.28763193086);
      Vector2D vector2D1 = new Vector2D(428.8015756023075, 3466.28763193086);
      line0.reset(vector2D1, 428.8015756023075);
      Line line1 = new Line(vector2D0, (-1.0));
      line0.intersection(line1);
      assertEquals((-339.16343987682603), line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1019.0491612934), 0.0);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(line0);
      line0.reset(vector2D0, (-3495.7));
      line1.setAngle((-2698.2428369609));
      line0.intersection(line1);
      assertEquals((-793.5542682510722), line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1019.0491612934), 0.0);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, 1.0);
      Vector2D vector2D1 = line1.intersection(line0);
      assertTrue(vector2D1.equals((Object)vector2D0));
      assertNotNull(vector2D1);
      assertEquals(0.0, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1.0E-10);
      Line line1 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = line0.intersection(line1);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
      assertNotNull(vector2D1);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(762.0, (-2337.7));
      Vector2D vector2D1 = new Vector2D(0.0875862700108075, vector2D0, (-2337.7), vector2D0, 1658.72842357, vector2D0, 0.0875862700108075, vector2D0);
      Line line0 = new Line(vector2D1, 762.0);
      Line line1 = line0.getReverse();
      assertEquals((-251589.1915596692), line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1155.1;
      Vector2D vector2D0 = new Vector2D(doubleArray0);
      Vector2D vector2D1 = Vector2D.ZERO;
      Line line0 = new Line(vector2D1, vector2D0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector2D vector2D2 = line0.getPointAt(vector1D0, 676.3515920243);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D2.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-2325.734), (-2325.734));
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      Vector2D vector2D1 = line0.getPointAt(vector1D0, (-915.916396706471));
      assertEquals((-2325.734), vector2D1.getX(), 0.01);
      assertEquals(2719.673567418029, vector2D1.getNorm(), 0.01);
      assertEquals((-1409.817603293529), vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector2D vector2D1 = line0.getPointAt(vector1D0, 0.0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOriginOffset();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1155.1;
      Vector2D vector2D0 = new Vector2D(doubleArray0);
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOriginOffset();
      assertEquals(1155.1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 0.7853981633974483);
      line0.setOriginOffset((-1168.9));
      double double0 = line0.getOriginOffset();
      assertEquals((-1168.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(762.0, (-2337.7));
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = new Vector2D(0.0875862700108075, vector2D0, (-2337.7), vector2D0, 1658.72842357, vector2D0, 0.0875862700108075, vector2D0);
      Line line1 = new Line(vector2D1, 762.0);
      double double0 = line0.getOffset(line1);
      assertEquals(249251.4915596692, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-2325.734), (-2325.734));
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, (-2325.734));
      Line line2 = line0.getReverse();
      double double0 = line2.getOffset(line1);
      assertEquals((-915.916396706471), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(0.0875862700108075, 0.0875862700108075);
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.setOriginOffset(3265.3);
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D0);
      assertEquals(3265.3, line0.getOriginOffset(), 0.01);
      assertEquals(3265.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = new Vector2D(1.986821492305628E-8, 1.986821492305628E-8);
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D1);
      assertEquals((-1.986821492305628E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, (-150.6));
      double double0 = line0.getAngle();
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.19644737231007525, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, 0.0);
      line0.setOriginOffset(0.0);
      Vector2D vector2D1 = new Vector2D((-2240.87552), 0.0);
      double double0 = line0.distance(vector2D1);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 40.43631523713645);
      Vector2D vector2D1 = Vector2D.POSITIVE_INFINITY;
      double double0 = line0.distance(vector2D1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(-0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1.57079632679);
      line0.setOriginOffset(994.728314);
      line0.copySelf();
      assertEquals(994.728314, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 417.0);
      Line line1 = line0.copySelf();
      assertEquals(Double.NEGATIVE_INFINITY, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.translateToPoint((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.sameOrientationAs((Hyperplane<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.reset(vector2D0, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.isParallelTo((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.getPointAt((Vector1D) null, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.getOffset((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.getOffset((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.contains((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector2D) null, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.reset(vector2D0, vector2D0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 0.0);
      line0.reset(vector2D0, vector2D0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, 2160.0);
      // Undeclared exception!
      try { 
        line0.reset((Vector2D) null, 0.8797048790539526);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.isParallelTo(line0);
      assertTrue(boolean0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.isParallelTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.contains(vector2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.contains(vector2D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.sameOrientationAs(line0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.sameOrientationAs(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.getOffset(line0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1.5707963267948966);
      Vector2D vector2D1 = line0.intersection(line0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertNotNull(vector2D1);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = line0.intersection(line0);
      assertTrue(vector2D1.equals((Object)vector2D0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.getReverse();
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.revertSelf();
      assertEquals(-0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.revertSelf();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.wholeHyperplane();
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.copySelf();
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = new Vector1D(992.0);
      Vector2D vector2D1 = line0.getPointAt(vector1D0, 992.0);
      assertEquals(Double.NaN, vector2D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.wholeSpace();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getAngle();
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector2D) null, 36.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.distance((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        Line.getTransform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.translateToPoint(vector2D0);
      assertFalse(vector2D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }
}

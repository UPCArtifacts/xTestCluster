/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 12:37:18 GMT 2023
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang.WordUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WordUtils_ESTest extends WordUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        WordUtils.abbreviate("Caught a SecurityException reading the system property '", (-3338), (-524), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = WordUtils.abbreviate("", 631, 0, "AIX");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = WordUtils.abbreviate("", 0, 204, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = WordUtils.wrap("j\na\nv\na\n.\nr\nu\nn\nt\ni\nm\ne\n.\nv\ne\nr\ns\ni\no\nn", (-1), "9H{+Ln9l!M-v MEx", true);
      assertEquals("j9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExa9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExv9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExa9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MEx.9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExr9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExu9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExn9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExt9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExi9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExm9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExe9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MEx.9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExv9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExe9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExr9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExs9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExi9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExo9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExn", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = WordUtils.wrap("", (-565), "Org.apache.commons.lang.wordutils", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = WordUtils.wrap("", 4);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = WordUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = WordUtils.initials("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = WordUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = WordUtils.wrap("~java.vendor.urlujava.vendor.urlDjava.vendor.url*java.vendor.url`java.vendor.urlBjava.vendor.url1java.vendor.urlIjava.vendor.url=java.vendor.urlqjava.vendor.url?", (-1344), "java.vendor.url", true);
      char[] charArray0 = new char[9];
      // Undeclared exception!
      WordUtils.capitalizeFully(string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[8];
      WordUtils.initials("j9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExa9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExv9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExa9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MEx.9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExr9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExu9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExn9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExt9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExi9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExm9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExe9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MEx.9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExv9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExe9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExr9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExs9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExi9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExo9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExn", charArray0);
      // Undeclared exception!
      WordUtils.capitalize("j9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExa9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExv9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExa9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MEx.9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExr9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExu9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExn9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExt9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExi9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExm9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExe9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MEx.9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExv9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExe9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExr9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExs9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExi9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExo9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExn", charArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = WordUtils.initials("A6E,X", (char[]) null);
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = WordUtils.initials((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      String string0 = WordUtils.uncapitalize("+#`|U/~,dh2ZEp", charArray0);
      assertEquals("+#`|U/~,dh2zEp", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = WordUtils.uncapitalize("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = WordUtils.uncapitalize((String) null, (char[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("G>g%FFmk$m`}Av&o ", (char[]) null);
      assertEquals("G>g%ffmk$m`}av&o ", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      String string0 = WordUtils.capitalize("j9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExa9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExv9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExa9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MEx.9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExr9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExu9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExn9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExt9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExi9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExm9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExe9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MEx.9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExv9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExe9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExr9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExs9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExi9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExo9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExn", charArray0);
      assertEquals("J9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExa9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExv9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExa9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MEx.9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExr9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExu9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExn9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExt9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExi9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExm9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExe9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MEx.9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExv9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExe9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExr9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExs9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExi9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExo9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExn", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = WordUtils.capitalize("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = WordUtils.capitalize((String) null, (char[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = WordUtils.wrap(" rc:N;", (-412), "K:s\"Z%7w#r(q4xeD:av", false);
      assertEquals("rc:N;", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = WordUtils.wrap("iMxBgBN", 1, (String) null, false);
      assertNotNull(string0);
      assertEquals("iMxBgBN", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, (-2649), (String) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = WordUtils.abbreviate("I", (-1812), 0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = WordUtils.abbreviate(" ", 0, (-1638), " ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = WordUtils.abbreviate(":)h/OaK:,8ML9q* fR", 0, 0, "?");
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = WordUtils.abbreviate("`H?FVWl", (-1), (-1), "~x");
      assertEquals("`H?FVWl", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = WordUtils.abbreviate("uczR_8}C%#gBbU ", (-2292), 2642, "uczR_8}C%#gBbU ");
      assertEquals("uczR_8}C%#gBbUuczR_8}C%#gBbU ", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = WordUtils.abbreviate((String) null, 66, 66, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      String string0 = WordUtils.initials("j9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExa9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExv9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExa9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MEx.9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExr9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExu9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExn9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExt9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExi9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExm9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExe9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MEx.9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExv9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExe9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExr9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExs9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExi9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExo9H{+Ln9l!M-v MEx\n9H{+Ln9l!M-v MExn", charArray0);
      assertEquals("j9", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.initials("M,up,+", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = WordUtils.initials("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = WordUtils.initials((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = WordUtils.swapCase("org.apache.commons.lang.WordUtils");
      assertEquals("ORG.APACHE.COMMONS.LANG.wORDuTILS", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = WordUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = WordUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = WordUtils.uncapitalize(" vs ");
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.uncapitalize("/", charArray0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalizeFully("u-G)", charArray0);
      assertEquals("u-G)", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalizeFully("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = WordUtils.capitalizeFully((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalize(" ", charArray0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = WordUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = WordUtils.wrap("Caught a SecurityException reading the system property '", (-147), "", false);
      assertEquals("CaughtaSecurityExceptionreadingthesystemproperty'", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, (-3987));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      WordUtils wordUtils0 = new WordUtils();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = WordUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = WordUtils.wrap(" E9zVs\"qmc:p0pq@6f", 0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = WordUtils.initials("?38oW");
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("X:R/Ksk$");
      assertEquals("X:r/ksk$", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = WordUtils.capitalize(" ");
      assertEquals(" ", string0);
  }
}

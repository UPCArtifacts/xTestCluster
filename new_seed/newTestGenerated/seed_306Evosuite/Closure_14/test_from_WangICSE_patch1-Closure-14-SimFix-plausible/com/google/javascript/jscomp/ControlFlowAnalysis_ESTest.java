/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 04 17:56:33 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckAccidentalSemicolon;
import com.google.javascript.jscomp.CheckDebuggerStatement;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.ConvertToDottedProperties;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LineNumberCheck;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ControlFlowAnalysis_ESTest extends ControlFlowAnalysis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      node0.setVarArgs(true);
      Node node1 = new Node(108, node0, node0, node0);
      ControlFlowAnalysis.computeFollowNode(node0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(125);
      Node node1 = new Node(125, node0, (-398), 12);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ControlFlowAnalysis.mayThrowException(node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      ControlFlowAnalysis.computeFallThrough(node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("qeIRa)'0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("+N-_'cj(4~N#tH^");
      Node node1 = new Node(108, node0, node0, node0);
      ControlFlowAnalysis.computeFallThrough(node1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node((-368));
      Node node1 = new Node(52, node0, 119, 51);
      ControlFlowAnalysis.mayThrowException(node1);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.computeFallThrough(node1);
      ControlFlowAnalysis.mayThrowException(node0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, convertToDottedProperties0);
      Compiler compiler2 = nodeTraversal0.getCompiler();
      Node node0 = compiler2.parseTestCode("1%{/,p]<yT-Pl!C");
      String string0 = "";
      File file0 = MockFile.createTempFile("1%{/,p]<yT-Pl!C", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Compiler compiler3 = new Compiler(mockPrintStream0);
      Node node1 = new Node(51);
      Node node2 = new Node(114, node0, node1, node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      controlFlowAnalysis0.process(node0, node1);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, (Logger) null);
      Compiler compiler4 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler4.getTypeRegistry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(77, node0, 404, 149);
      ControlFlowAnalysis.isBreakTarget(node0, "0(=3BM");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(77, 69, (-1898));
      Node node1 = new Node(2, node0, 41, 53);
      ControlFlowAnalysis.isBreakTarget(node0, (String) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(125);
      Node node1 = new Node(125, node0, (-398), 12);
      ControlFlowAnalysis.mayThrowException(node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis1.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2");
      Node node1 = new Node(152, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      nodeTraversal0.traverse(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      controlFlowAnalysis0.visit(nodeTraversal0, node0, node1);
      ControlFlowAnalysis.getExceptionHandler(node0);
      System.setCurrentTimeMillis((-365L));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Logger logger0 = Logger.getLogger("05UoWlxexA8> O");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
      loggerErrorManager0.getErrors();
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Node node0 = compiler1.parseTestCode("SMA&4z|5hb0s^ k\"L");
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      Node node2 = new Node(110, node0, node1, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, true, false);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node3 = peepholeRemoveDeadCode0.tryOptimizeBlock(node2);
      compiler0.getErrorManager();
      node0.addChildrenToFront(node3);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, controlFlowAnalysis0);
      Node node4 = peepholeSubstituteAlternateSyntax0.skipFinallyNodes(node1);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node3, node4);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.addChildToFront(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(31, 31, 31);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      controlFlowAnalysis0.process(node0, node0);
      ControlFlowAnalysis.computeFallThrough(node0);
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(45, node0, node0, node0);
      ControlFlowAnalysis.mayThrowException(node0);
      Compiler compiler0 = new Compiler();
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(565, 565, 565);
      Node node1 = new Node(114, node0, 0, 12);
      ControlFlowAnalysis.mayThrowException(node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      compiler0.setProgress(2207.0);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      controlFlowAnalysis0.process(node0, node1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Q");
      Node node1 = new Node(115, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString(35, "", 114, 2359);
      Node node1 = new Node(114, node0, 51, 51);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      Node node2 = ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      controlFlowAnalysis0.process(node1, node2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(109, 109, 109);
      Node node1 = new Node(102);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      ControlFlowAnalysis.computeFallThrough(node1);
      controlFlowAnalysis0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(87);
      Node node1 = new Node(49, node0, node0, 8, 49);
      ControlFlowAnalysis.mayThrowException(node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.isBreakTarget(node0, "");
      ControlFlowAnalysis.computeFallThrough(node1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)35;
      byteArray0[7] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = compiler0.parseTestCode("G");
      Node node1 = new Node(111, node0, node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.addChildrenToBack(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      ControlFlowAnalysis.computeFallThrough(node2);
      controlFlowAnalysis0.process(node0, node0);
      assertFalse(node0.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(125, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = peepholeRemoveDeadCode0.tryOptimizeBlock(node1);
      compiler0.getErrorManager();
      node1.addChildrenToFront(node2);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|C=,hkDnp{");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("|C=,hkDnp{");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(119, node0, node0, node0);
      controlFlowAnalysis0.process(node0, node1);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node0 = Node.newString(108, " for ");
      Compiler compiler2 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler2, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler2, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      controlFlowAnalysis0.process(node1, node1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|C=,hkDnp{");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("|C=,hkDnp{");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(118, node0, node0, node0);
      controlFlowAnalysis0.process(node0, node1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
      Compiler compiler2 = nodeTraversal0.getCompiler();
      Node node0 = compiler2.parseTestCode("=l");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler2, true, true);
      Node node1 = new Node(112, node0, node0, node0);
      controlFlowAnalysis0.process(node1, node1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A2,huDnp%");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("A2,huDnp%");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(4, node0, node0, node0);
      node0.putProp(51, (Object) null);
      controlFlowAnalysis0.process(node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      ControlFlowAnalysis.computeFollowNode(node1, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode((Node) null, controlFlowAnalysis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(120);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node0, node0);
      Node node1 = new Node(51, node0, node0, 29, 2724);
      node0.addChildToFront(node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      ControlFlowAnalysis.computeFallThrough(node1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("", "tweak getter function {0} used for tweak registered using {1}", 58, (-1919));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(105, 105, 105);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis.computeFallThrough(node0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(114, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node1, "=l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(109);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node(114, node0, 29, 33);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node1, "MNEIK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(108, " for ");
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node0 = Node.newString(108, " for ");
      Node node1 = new Node(114, node0, node0, node0);
      compiler0.getTypedScopeCreator();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, true, true);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(120);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      Node node1 = new Node(51, node0, node0, 1116, 2724);
      node0.addChildToFront(node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(125, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node0, node1);
      Compiler compiler1 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      controlFlowAnalysis0.visit(nodeTraversal0, node1, node0);
      ControlFlowAnalysis.getExceptionHandler(node0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      Node node1 = new Node(3141, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      Node node2 = new Node(4020, node1, node1, node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      ControlFlowAnalysis.isBreakTarget(node0, "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$1");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot find continue target.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(120);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      Node node1 = new Node(51, node0, node0, 1116, 2724);
      node0.addChildToFront(node1);
      Compiler compiler1 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(120);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node0, node0);
      ControlFlowAnalysis.mayThrowException(node0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node1 = new Node(114, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      controlFlowAnalysis0.process(node0, node1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(49, node0, node0, 8, 49);
      ControlFlowAnalysis.isContinueStructure(node1);
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.visit(nodeTraversal0, node1, node1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|C=,hkDnp{");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("|C=,hkDnp{");
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      SyntheticAst syntheticAst0 = new SyntheticAst("|C=,hkDnp{");
      InputId inputId0 = syntheticAst0.getInputId();
      node0.setInputId(inputId0);
      Node node1 = new Node(119, node0, node0, node0);
      controlFlowAnalysis0.process(node0, node1);
      ControlFlowAnalysis.computeFallThrough(node1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(125, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node2 = Node.newNumber((double) 51, (-3224), 61);
      controlFlowAnalysis0.process(node2, node1);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node2);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(125, node0, node0, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(114, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis.computeFollowNode(node0);
      System.setCurrentTimeMillis(54);
      ControlFlowAnalysis.computeFollowNode(node1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = new Node(52);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.isContinueStructure(node1);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      controlFlowAnalysis0.process(node0, node1);
      assertFalse(node1.isArrayLit());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      controlFlowAnalysis0.visit(nodeTraversal0, node1, node1);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(103);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "+/Ma0_z", "fnw$T9");
      Node node2 = new Node(102, node1, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis.computeFollowNode(node1);
      System.setCurrentTimeMillis(16);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(103);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis1.process(node0, node0);
      controlFlowAnalysis0.process(node0, node0);
      controlFlowAnalysis0.process(node0, node0);
      ControlFlowAnalysis.computeFallThrough(node0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(125, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node2 = Node.newNumber((double) 51, (-3224), 61);
      controlFlowAnalysis0.process(node2, node1);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node2);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node2);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, (Node) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(125, node0, 2, 12);
      ControlFlowAnalysis.mayThrowException(node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(125, node0, 2, 12);
      ControlFlowAnalysis.mayThrowException(node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis1.process(node0, node1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node((-1225));
      Node node1 = new Node(105, node0, 41, 54);
      ControlFlowAnalysis.mayThrowException(node1);
      AbstractCompiler abstractCompiler0 = null;
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Compiler compiler0 = new Compiler();
      Node node1 = Node.newString("=l");
      Node node2 = new Node(105, node0, node0, node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(129, "=l");
      Node node1 = new Node(33, node0, node0, node0);
      compiler0.getTypedScopeCreator();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      ControlFlowAnalysis.computeFallThrough(node1);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("PM*=l");
      Node node1 = new Node(127, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node2 = Normalize.parseAndNormalizeSyntheticCode(compiler0, "PM*=l", "PM*=l");
      Node node3 = new Node(127, node1, node1, node2);
      node1.addChildrenToBack(node3);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, true);
      ControlFlowAnalysis.computeFollowNode(node3);
      // Undeclared exception!
      try { 
        controlFlowAnalysis1.process(node2, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      Node node1 = new Node(3141, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // Cannot find continue target.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Logger logger0 = Tracer.logger;
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(verboseMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      LoggerErrorManager loggerErrorManager1 = new LoggerErrorManager(verboseMessageFormatter0, logger0);
      loggerErrorManager1.getWarnings();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node0 = new Node(117, 1766, (-3082));
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      Node node2 = peepholeRemoveDeadCode0.tryOptimizeBlock(node1);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node2, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // Cannot find continue target.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")e_=E1,f;[q;mM='I");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node1 = compiler0.parseTestCode(")e_=E1,f;[q;mM='I");
      Node node2 = new Node(2, node1, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(129);
      Node node1 = new Node(32, node0, 31, 1720);
      compiler0.getTypedScopeCreator();
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, true, true);
      controlFlowAnalysis0.process(node0, node0);
      ControlFlowAnalysis.computeFallThrough(node1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(117, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      Node node1 = new Node(3141, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // Cannot find continue target.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = compiler0.parseTestCode("G");
      Node node1 = new Node(111, node0, node0, node0);
      node0.addChildrenToBack(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      ControlFlowAnalysis.isBreakTarget(node0, "com.google.javascript.jscomp.CheckUnreachableCode");
      controlFlowAnalysis0.process(node1, node0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(110, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      Node node2 = new Node(112, node1, node1, node1);
      ControlFlowAnalysis.mayThrowException(node1);
      ControlFlowAnalysis.computeFollowNode(node1);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node2);
      assertFalse(node3.isHook());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      Node node0 = new Node(110);
      Node node1 = new Node(116, node0, 2447, (-566));
      compiler0.getTypedScopeCreator();
      Compiler compiler1 = new Compiler();
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node2.isSwitch());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(128, 128, 128);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(4, 0, 54);
      Compiler compiler1 = new Compiler();
      Compiler compiler2 = new Compiler(loggerErrorManager0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler2, false, false);
      ControlFlowAnalysis.computeFallThrough(node1);
      controlFlowAnalysis0.process(node0, node1);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(114, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(113);
      node0.checkTreeEquals(node0);
      byte[] byteArray0 = new byte[3];
      node0.children();
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis.computeFallThrough(node0);
      Compiler compiler0 = new Compiler();
      Node node1 = ControlFlowAnalysis.computeFollowNode(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(50, node0, 47, 1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFallThrough(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(114, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      controlFlowAnalysis0.process(node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(114);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(5467);
      Node node1 = new Node(35, node0, 1, 1184);
      Node node2 = new Node(2, node1, 250, (-202));
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node2);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node0 = new Node(129);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.mayThrowException(node0);
      Compiler compiler1 = new Compiler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Compiler compiler2 = new Compiler();
      Node node1 = new Node(2, node0, 12, 16);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      peepholeReplaceKnownMethods0.optimizeSubtree(node1);
      Node node2 = compiler2.parseTestCode("");
      Node.newString(49, "", 2694, 1000);
      Node node3 = new Node(47, node2, node1, node1);
      Compiler compiler3 = new Compiler();
      Node node4 = ControlFlowAnalysis.computeFollowNode(node2);
      assertEquals(1, node4.getChildCount());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(111, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis1);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(111, node0, node0, node0);
      node0.addChildrenToBack(node1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode(node1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(111, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      node0.addChildrenToBack(node1);
      Node node2 = compiler0.parseSyntheticCode("%F*tmy$N", "");
      controlFlowAnalysis0.process(node2, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(111, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      node0.addChildrenToBack(node1);
      controlFlowAnalysis0.process(node0, node1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      controlFlowAnalysis0.shouldTraverse((NodeTraversal) null, node0, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode(node1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W");
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("W");
      Node node1 = new Node(114, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node1);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(152);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      System.setCurrentTimeMillis(1);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node1.isTry());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(111, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test(timeout = 4000)
//   public void test077()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       Node node0 = compiler0.parseTestCode("");
//       Node node1 = new Node(115, node0, node0, node0);
//       node0.addChildrenToBack(node1);
//       node1.setSourceFileForTesting((String) null);
//       ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
//       // Undeclared exception!
//       try { 
//         controlFlowAnalysis0.process(node0, node0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//       }
//   }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(35, node0, 43, 4095);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(41, node0, 43, 4095);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(129);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("property access");
      Node node2 = new Node(40, node1, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node2, node1);
      controlFlowAnalysis0.getCfg();
      controlFlowAnalysis0.process(node0, node2);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node2);
      assertEquals(36, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(115, node0, node0, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.mayThrowException(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(111);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(111, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      Compiler compiler2 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler2, true, true);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler2, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot find continue target.");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(4, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, true);
      controlFlowAnalysis0.process(node0, node1);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node1);
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
      MockFile mockFile0 = new MockFile((File) null, "");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(49);
      Node node1 = new Node(126, node0, 2, 105);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node0, node1);
      assertFalse(node1.isGetProp());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(49, node0, 33, (-2510));
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node0, node0);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(111, "=l");
      Node node1 = new Node(111, node0, node0, node0);
      compiler0.getTypedScopeCreator();
      Node.newString("=l");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(111, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node1, node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(111, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, true);
      controlFlowAnalysis0.process(node0, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, processClosurePrimitives0, (ScopeCreator) null);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      controlFlowAnalysis0.shouldTraverse((NodeTraversal) null, node1, node1);
      Node node2 = ControlFlowAnalysis.getExceptionHandler(node0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = new Node(125, node0, 29, 54);
      node0.detachFromParent();
      ControlFlowAnalysis.mayThrowException(node1);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(110, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      Node node2 = new Node(112, node1, node1, node1);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node2);
      Node node3 = ControlFlowAnalysis.computeFollowNode(node0);
      assertNull(node3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(115, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process((Node) null, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable((Node) null);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0, (ScopeCreator) null);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, (Node) null);
      boolean boolean1 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, (Node) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(115, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process((Node) null, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable((Node) null);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler1, preprocessorSymbolTable0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, controlFlowAnalysis0, (ScopeCreator) null);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      assertTrue(boolean0);
      
      boolean boolean1 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(108);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      boolean boolean1 = ControlFlowAnalysis.isBreakStructure(node0, false);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(110, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      Node node2 = new Node(112, node1, node1, node1);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler1, true, false);
      ControlFlowAnalysis controlFlowAnalysis2 = new ControlFlowAnalysis(compiler1, true, false);
      controlFlowAnalysis2.process(node1, node2);
      assertFalse(node1.isVoid());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(35, 35, 35);
      Node node1 = new Node(112, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      controlFlowAnalysis0.process(node1, node1);
      controlFlowAnalysis0.process(node0, node0);
      Node node2 = ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      node0.setVarArgs(true);
      Node node1 = new Node(112, node0, node0, node0);
      Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(110, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      controlFlowAnalysis0.process(node0, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, processClosurePrimitives0, (ScopeCreator) null);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = new Node(50, node0, 47, 1);
      ControlFlowAnalysis.isBreakStructure(node0, false);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node1);
      Node node2 = new Node(44, node1);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node2);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(125, 2474, 125);
      Node node1 = new Node(44, node0, 125, 88);
      boolean boolean0 = ControlFlowAnalysis.isBreakStructure(node0, true);
      assertTrue(boolean0);
      
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis.isContinueStructure(node1);
      boolean boolean1 = ControlFlowAnalysis.isBreakTarget(node0, "\"YoR1bDYa");
      boolean boolean2 = ControlFlowAnalysis.isContinueStructure(node1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(125, node0, 125, 108);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node1, "MNEIK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(86, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node1, node1);
      assertFalse(node1.isCall());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(113);
      node0.checkTreeEquals(node0);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.mayThrowException(node0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node1 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      nodeTraversal0.getCompiler();
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      ControlFlowAnalysis controlFlowAnalysis2 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis2.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = new Node(37);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(110, node0, node0, node0);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      Node node2 = new Node(119, node1, node1, node1);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler1, false, false);
      ControlFlowAnalysis controlFlowAnalysis2 = new ControlFlowAnalysis(compiler1, true, false);
      controlFlowAnalysis2.process(node1, node2);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(115, node0, node0, node0);
      ControlFlowAnalysis.isBreakStructure(node0, false);
      Compiler compiler1 = new Compiler();
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node1);
      boolean boolean1 = ControlFlowAnalysis.isBreakTarget(node1, (String) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(115, node0, node0, node0);
      boolean boolean0 = true;
      ControlFlowAnalysis.isBreakStructure(node0, true);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node1, node0);
      Compiler compiler2 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler2, false, true);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler2, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Q");
      Node node1 = new Node(115, node0, node0, node0);
      node1.detachChildren();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process((Node) null, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable((Node) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, (Node) null, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = new Node(50, node0, 47, 1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("w!B4Ev f:,0tm~");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node2 = new Node(45);
      Node node3 = new Node(49, node2, node1, node2);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node2, node2);
      Node node4 = ControlFlowAnalysis.computeFollowNode(node1, controlFlowAnalysis0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node4, node3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node((-4296));
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("=l");
      Node node2 = new Node((-1455), node0, node0, node1);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, false, false);
      ControlFlowAnalysis.computeFollowNode(node1);
      ControlFlowAnalysis.computeFollowNode(node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakStructure((Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(116, "Pd");
      Node node1 = new Node(36, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Compiler compiler0 = new Compiler();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      Node node0 = new Node(116);
      Node node1 = new Node(4103, node0, 30, 38);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods(true);
      Node node2 = peepholeReplaceKnownMethods1.optimizeSubtree(node1);
      Node node3 = peepholeSimplifyRegExp0.optimizeSubtree(node2);
      compiler0.getTypedScopeCreator();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node2, node3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(115, node0, node0, node0);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(115, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      Node node0 = new Node(110);
      Node node1 = new Node(116, node0, 2447, (-566));
      Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node1);
      peepholeSimplifyRegExp0.optimizeSubtree(node2);
      compiler0.getTypedScopeCreator();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      ControlFlowAnalysis.computeFollowNode(node2);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node3.isBlock());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node(129);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node(35, node0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      controlFlowAnalysis0.process(node0, node0);
      ControlFlowAnalysis.computeFallThrough(node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax0.skipFinallyNodes(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(115);
      Compiler compiler0 = new Compiler((PrintStream) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      Node node1 = compiler1.parseTestCode("com.google.javascript.jscomp.XtbMessageBundle");
      Node node2 = new Node(30, node0, node0, node1);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      Compiler compiler2 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler2, false, true);
      controlFlowAnalysis0.process(node2, node1);
      Compiler compiler3 = new Compiler();
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.visit(nodeTraversal0, node2, node2);
      Node node3 = ControlFlowAnalysis.computeFollowNode(node1);
      assertNull(node3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(35, 35, 35);
      Node node1 = new Node(2, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis1.process(node0, node1);
      assertFalse(node1.isNot());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      ControlFlowAnalysis.mayThrowException(node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(128, 128, 128);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(4, 0, 54);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      cleanupPasses0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      CheckDebuggerStatement checkDebuggerStatement0 = new CheckDebuggerStatement(compiler1);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal1, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(126);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.removeFirstChild();
      ControlFlowAnalysis.isBreakTarget(node1, "");
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis.isBreakTarget(node1, "");
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertEquals(54, Node.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(110, node0, node0, node0);
      Node node2 = new Node(0, node1, 1273, 50);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis1.process(node0, node1);
      assertEquals(0, node0.getLength());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(110, "=l");
      Node node1 = new Node(110, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node1);
      assertFalse(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(50, node0, 47, 1);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node3 = peepholeSimplifyRegExp0.optimizeSubtree(node2);
      ControlFlowAnalysis.isContinueStructure(node3);
      Compiler compiler0 = new Compiler();
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      compiler0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, (ScopeCreator) null);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      compiler1.getTypedScopeCreator();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler1);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, nodeTraversal_Callback0, (ScopeCreator) null);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      cleanupPasses0.getTypedScopeCreator();
      Compiler compiler2 = nodeTraversal0.getCompiler();
      CheckDebuggerStatement checkDebuggerStatement0 = new CheckDebuggerStatement(compiler2);
      NodeTraversal nodeTraversal2 = new NodeTraversal(compiler1, checkDebuggerStatement0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal1, node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(105);
      Logger logger0 = Tracer.logger;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("2ZvnQ=k|XAxyePV");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Locale locale0 = Locale.FRENCH;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "2ZvnQ=k|XAxyePV", (Object[]) null);
      Compiler compiler0 = new Compiler(printStream0);
      Node node1 = compiler0.parseSyntheticCode("2ZvnQ=k|XAxyePV", "com.google.javascript.jscomp.DefaultPassConfig$31");
      ControlFlowAnalysis.isBreakStructure(node1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      ControlFlowAnalysis.isBreakStructure(node1, false);
      ControlFlowAnalysis.isBreakTarget(node1, "2ZvnQ=k|XAxyePV");
      ControlFlowAnalysis.mayThrowException(node1);
      boolean boolean1 = ControlFlowAnalysis.isBreakTarget(node1, "2ZvnQ=k|XAxyePV");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("P");
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      Node node1 = new Node(2, node0, node0);
      boolean boolean1 = ControlFlowAnalysis.isBreakTarget(node1, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node node1 = new Node((-903), node0, 42, 47);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, "MNEIK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=l");
      Node node1 = new Node(110, node0, node0, node0);
      Node node2 = new Node(35, node1, 16, (-2799));
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node1, "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$2");
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ControlFlowAnalysis.isBreakTarget(node0, "");
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(119);
      ControlFlowAnalysis.mayThrowException(node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = new Node(37);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(2, node0, node0, node0);
      Node node2 = new Node(669, node1, 43, 39);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
      ControlFlowAnalysis.isBreakStructure(node2, false);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node3, node3);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.visit(nodeTraversal0, node3, node0);
      ControlFlowAnalysis.computeFollowNode(node2);
      ControlFlowAnalysis.computeFallThrough(node0);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      Node node0 = new Node(110);
      Node node1 = new Node(116, node0, 2447, (-566));
      Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node2, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SWITCH is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      Node node0 = new Node(110);
      Node node1 = new Node(116, node0, 2447, (-566));
      Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node1);
      Node node3 = peepholeSimplifyRegExp0.optimizeSubtree(node2);
      ControlFlowAnalysis.isContinueStructure(node3);
      compiler0.getTypedScopeCreator();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0, (ScopeCreator) null);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      cleanupPasses0.getTypedScopeCreator();
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, nodeTraversal_Callback0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal1, node1, node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SWITCH is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = new Node(110);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node(35, node0);
      ControlFlowAnalysis.isContinueStructure(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      Node node0 = new Node(110);
      Node node1 = new Node(116, node0, 2447, (-566));
      Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node1);
      Node node3 = peepholeSimplifyRegExp0.optimizeSubtree(node2);
      ControlFlowAnalysis.isContinueStructure(node3);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|C=,hkDnp{");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("|C=,hkDnp{");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(116, node0, node0, node0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node(105);
      Logger logger0 = Tracer.logger;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ControlFlowAnalysis.mayThrowException(node0);
      Node node1 = new Node(40, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.getTypedScopeCreator();
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, controlFlowAnalysis0, (ScopeCreator) null);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      peepholeSubstituteAlternateSyntax0.getExceptionHandler(node0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, (Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = new Node(110);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node(35, node0);
      ControlFlowAnalysis.isContinueStructure(node1);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(110, "=l");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node(126, (-1056), 126);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node((-2909), (-2082), 33);
      Node node2 = new Node(120, node0);
      ControlFlowAnalysis.mayThrowException(node1);
      ControlFlowAnalysis.mayThrowException(node2);
      ControlFlowAnalysis.mayThrowException(node2);
      compiler0.getRoot();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.visit(nodeTraversal0, node0, node2);
      assertEquals(120, node2.getType());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, (-28), (-28));
      Logger logger0 = Tracer.logger;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node1 = new Node(2031);
      Compiler compiler0 = new Compiler();
      Node node2 = new Node(30, node1);
      ControlFlowAnalysis.isBreakStructure(node0, false);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis.mayThrowException(node2);
      Node.newNumber((double) 0, 108, (-511));
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(86);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node1 = new Node(30, node0, node0, 35, 8);
      controlFlowAnalysis0.process(node1, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean1 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(16, node0, node0);
      Compiler compiler0 = new Compiler();
      node0.checkTreeEquals(node1);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      Node.newString("4X:b=");
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot find continue target.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(105);
      Logger logger0 = Tracer.logger;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ControlFlowAnalysis.mayThrowException(node0);
      Node node1 = new Node(12, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(105, "/LDKm6pljO<OY40yr7i");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = new Node(115);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = Node.newString("");
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      ControlFlowAnalysis controlFlowAnalysis2 = new ControlFlowAnalysis(compiler0, true, false);
      controlFlowAnalysis2.process(node0, node1);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(115);
      ControlFlowAnalysis.mayThrowException(node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 0, 0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node1 = compiler0.parseSyntheticCode("B", "G");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      Node.newString("G");
      controlFlowAnalysis0.process(node1, node1);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node2.isArrayLit());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node2, node2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(128, 128, 128);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(4, 0, 54);
      Node node2 = new Node(37, node1);
      ControlFlowAnalysis.mayThrowException(node1);
      ControlFlowAnalysis.mayThrowException(node2);
      ControlFlowAnalysis.mayThrowException(node2);
      compiler0.getRoot();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit((NodeTraversal) null, node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = new Node(109);
      Node node1 = new Node(37, node0, node0, node0, node0);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(52);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.isBreakStructure(node1, true);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis.mayThrowException(node1);
      Node node2 = new Node(1002, node0, node1, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      ControlFlowAnalysis.isContinueStructure(node0);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      assertFalse(compiler1.equals((Object)compiler0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = new Node(105);
      Logger logger0 = Tracer.logger;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ControlFlowAnalysis.mayThrowException(node0);
      Node node1 = new Node(12, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(50, node0, 47, 1);
      ControlFlowAnalysis.isBreakStructure(node0, false);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = new Node(128);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseSyntheticCode("(new String(\"", "");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.visit(nodeTraversal0, node1, node1);
      Node node2 = ControlFlowAnalysis.getExceptionHandler(node1);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(105);
      Logger logger0 = Tracer.logger;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ControlFlowAnalysis.mayThrowException(node0);
      Node node1 = new Node(12, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      controlFlowAnalysis0.process(node0, node1);
      assertFalse(node0.isNull());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = new Node(4, 2, 125);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node0, node0);
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(128, 128, 128);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(4, 0, 54);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      Node node2 = Node.newString("");
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis1.process(node1, node1);
      controlFlowAnalysis1.process(node2, node1);
      ControlFlowAnalysis.computeFollowNode(node1);
      Node node3 = ControlFlowAnalysis.computeFollowNode(node1, controlFlowAnalysis1);
      assertNull(node3);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A2,huDnp%");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("A2,huDnp%");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(4, node0, node0, node0);
      controlFlowAnalysis0.process(node0, node1);
      assertTrue(node0.isScript());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = new Node(110);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.mayThrowException(node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, "ssm47");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = new Node(110);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, "7U;H.k<xCQW*v1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = new Node(52);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.isBreakStructure(node1, true);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis.mayThrowException(node1);
      Node node2 = new Node(1002, node0, node1, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node0, node2);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(114);
      ControlFlowAnalysis.isContinueStructure(node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis.isContinueStructure(node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(12);
      Compiler compiler0 = new Compiler();
      Node node2 = new Node(42, node0);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis.isBreakTarget(node2, "4X:b=");
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(2, node0, node0, node0);
      Node node2 = new Node(669, node1, 43, 39);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      Node.newString(8, "com.google.common.collect.ImmutableList$ReverseImmutableList", 45, (-343));
      Node node3 = Node.newNumber(Double.NEGATIVE_INFINITY);
      controlFlowAnalysis0.process(node3, node1);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getCatchHandlerForBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = new Node(52);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.isBreakStructure(node1, true);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = new Node(52);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.isBreakStructure(node1, true);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis.mayThrowException(node1);
      Node node2 = new Node(1002, node0, node1, node0);
      Node node3 = new Node(52, 35, 54);
      assertFalse(node3.isArrayLit());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(105, 105, 105);
      ControlFlowAnalysis.mayThrowException(node0);
      Node node1 = ControlFlowAnalysis.getExceptionHandler(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(113);
      node0.checkTreeEquals(node0);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      boolean boolean1 = ControlFlowAnalysis.isBreakTarget(node0, (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(12);
      Compiler compiler0 = new Compiler();
      String string0 = " new Str_ng]\"";
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, " new Str_ng]\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(49, node0, node0, 8, 49);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node1);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = new Node(105);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      Node node2 = Node.newString(49, "", 51, (-1168));
      controlFlowAnalysis0.process(node1, node2);
      assertFalse(node0.equals((Object)node2));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = new Node(110);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node(35, node0);
      ControlFlowAnalysis.isContinueStructure(node1);
      ControlFlowAnalysis.mayThrowException(node1);
      ControlFlowAnalysis.mayThrowException(node1);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString("", 128, 128);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseSyntheticCode("GqI7>ZV20T2{hYtu", "");
      Node node2 = new Node(36, node1);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.mayThrowException(node2);
      Node node3 = Node.newString("GqI7>ZV20T2{hYtu");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node3, node1);
      assertFalse(node1.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("A2,huDnp%");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node1 = new Node(4, node0, node0, node0);
      controlFlowAnalysis0.process(node1, node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.mayThrowException((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(126);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|C=,hkDnp{");
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("|C=,hkDnp{");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = new Node(119, node0, node0, node0);
      controlFlowAnalysis0.process(node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node.newNumber(Double.POSITIVE_INFINITY, 0, 0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("B", "G");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      Node.newString("G");
      controlFlowAnalysis0.process(node0, node0);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u");
      Node node0 = new Node(128);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseSyntheticCode("(new String(\"", "u");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = new Node(128);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseSyntheticCode("(new String(\"", "");
      Node node2 = new Node(36, node1);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node2);
      assertTrue(boolean1 == boolean0);
      
      ControlFlowAnalysis.mayThrowException(node0);
      boolean boolean2 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node.newNumber(Double.POSITIVE_INFINITY, 0, 0);
      Logger logger0 = Tracer.logger;
      Node node0 = new Node(1);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseSyntheticCode("(new String(\"", "");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node.newString("com.google.common.collect.ForwardingSetMultimap");
      controlFlowAnalysis0.process(node0, node1);
      assertFalse(node0.isGetElem());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(121);
      Node node1 = Node.newString((-40), "Not reachable", (-402), 126);
      node0.clonePropsFrom(node1);
      Node node2 = new Node(1, node0, node1);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      ControlFlowAnalysis.computeFollowNode(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      boolean boolean0 = ControlFlowAnalysis.isBreakStructure(node2, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node(109);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("");
      Node node2 = new Node(41, node0, node1, node0);
      Node node3 = ControlFlowAnalysis.computeFollowNode(node1);
      assertFalse(node3.isInc());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 0, 0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node2 = node1.srcrefTree(node0);
      Node node3 = Node.newString("");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      node2.addChildrenToBack(node3);
      controlFlowAnalysis0.process(node1, node2);
      ControlFlowAnalysis.computeFollowNode(node3);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(49, node0, node0, 8, 49);
      ControlFlowAnalysis.isContinueStructure(node1);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node1, node1);
      assertFalse(node1.isVoid());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(50, node0, 47, 1);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = new Node(50, node0, 47, 1);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node1);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(131, node0, 3, 49);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      ControlFlowAnalysis.isBreakStructure(node2, true);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      Node.newString("");
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(130);
      Node node1 = new Node(130, node0, 28, 8);
      Logger logger0 = Logger.getGlobal();
      Logger logger1 = logger0.getParent();
      logger1.config("");
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, (Node) null, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("P");
      node0.cloneTree();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      assertFalse(node0.isComma());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(130);
      Node node1 = Node.newString((-40), "Not reachable", (-402), 126);
      node0.clonePropsFrom(node1);
      Node node2 = new Node(130, node0, 36, 8);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      ControlFlowAnalysis.computeFollowNode(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      controlFlowAnalysis0.process(node0, node0);
      assertFalse(node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(35);
      Node node1 = new Node(2, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node1, node0);
      assertFalse(node0.isNE());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(130);
      Node node1 = new Node(130, node0, 28, 8);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = new Node(35, 35, 35);
      Node node1 = new Node(2, node0, node0, node0);
      Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = new Node(128);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseSyntheticCode("(new String(\"", "");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node.newString("");
      controlFlowAnalysis0.process(node1, node0);
      assertFalse(node1.isInc());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(126);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(130);
      Node node1 = new Node(130, node0, 28, 8);
      ControlFlowAnalysis.isBreakStructure(node0, true);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      Node node2 = Node.newString("");
      controlFlowAnalysis0.process(node1, node2);
      assertFalse(node2.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = new Node(115);
      ControlFlowAnalysis.mayThrowException(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = new Node(128);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseSyntheticCode("(new String(\"", "");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 0, 0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      logger0.config("");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(130);
      Node node1 = new Node(130, 31, 54);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      node1.getAncestor(2791);
      Node node3 = new Node(37, node1, node2, 36, 47);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node5 = node4.srcrefTree(node0);
      ControlFlowAnalysis.isBreakTarget(node5, "com.google.javascript.jscomp.ControlFlowAnalysis$1");
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isContinueStructure((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = Node.newString(12, "wz", 12, 42);
      node1.toStringTree();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = new Node(8, node2, node1, node2, node2);
      ControlFlowAnalysis.isBreakStructure(node1, true);
      ControlFlowAnalysis.computeFollowNode(node1);
      ControlFlowAnalysis.mayThrowException(node2);
      Node node4 = null;
      // Undeclared exception!
      try { 
        node3.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = new Node(117);
      Node node1 = new Node(102, node0, (-1438), 39);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      Compiler compiler0 = new Compiler();
      boolean boolean1 = ControlFlowAnalysis.isBreakTarget(node0, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(0, node0, node0, node0, node0, 32, 43);
      node0.useSourceInfoFromForTree(node1);
      Node node2 = peepholeSubstituteAlternateSyntax0.skipFinallyNodes(node0);
      node2.setCharno(31);
      ControlFlowAnalysis.getCatchHandlerForBlock(node2);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node1);
      assertEquals(2, Node.POST_FLAG);
      
      ControlFlowAnalysis.isBreakTarget(node2, "");
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node1, "Cannot find continue target.");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      boolean boolean1 = ControlFlowAnalysis.mayThrowException(node2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = new Node(52);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.isBreakStructure(node1, true);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node2 = Node.newString("(new String(\"");
      controlFlowAnalysis0.process(node2, node1);
      assertFalse(node1.isCase());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(524288, 524288, 524288);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      controlFlowAnalysis0.process(node0, node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = new Node(129, 129, 129);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(35, 35, 35);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertTrue(boolean0);
      
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 0, 0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      logger0.finer("");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      controlFlowAnalysis0.process(node0, node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = new Node(35);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      controlFlowAnalysis0.process(node0, node0);
      assertFalse(node0.isSwitch());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(31, 31, 31);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFallThrough((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node(440, 440, (-725));
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = new Node(0, node0, node0, 1536, 4671);
      node0.srcrefTree(node1);
      String string0 = "Not reachable";
      ControlFlowAnalysis.isBreakTarget(node1, "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph$1");
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = new Node(39, 125, 1);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = new Node(88, node1, node0, 36, 39);
      Node node3 = null;
      try {
        node3 = new Node(32, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getCatchHandlerForBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      Node node0 = compiler0.externAndJsRoot;
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getCatchHandlerForBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = new Node((-1204), 0, 0);
      Node node1 = new Node(31, node0, node0, node0, node0, 54, (-2825));
      node0.useSourceInfoFromForTree(node1);
      peepholeSubstituteAlternateSyntax0.skipFinallyNodes(node0);
      node0.setCharno(52);
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node2.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(114, 36, 36);
      ControlFlowAnalysis.isContinueStructure(node0);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      assertFalse(compiler1.equals((Object)compiler0));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = new Node(108);
      ControlFlowAnalysis.mayThrowException(node0);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = ControlFlowAnalysis.isBreakStructure(node0, true);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(35);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 0, 0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ControlFlowAnalysis.isContinueStructure(node0);
      ControlFlowAnalysis.isBreakStructure(node0, false);
      Node node1 = ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 0, 0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      logger0.finest(",d<}2j@%_MtVH15O=");
      logger0.entering("o8lFv6|#e", "", (Object[]) null);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      Node node1 = ControlFlowAnalysis.computeFollowNode(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(130);
      node0.removeProp(3781);
      Node node1 = new Node(3781, 1000, 1);
      ControlFlowAnalysis.isBreakTarget(node1, (String) null);
      ControlFlowAnalysis.isContinueStructure(node1);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = new Node(132);
      Node node1 = ControlFlowAnalysis.getExceptionHandler(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = new Node(31, 31, 31);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, "hi @YV+(,&P");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = new Node(132, 440, (-725));
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = new Node(2, node0, node0, Integer.MAX_VALUE, 48);
      node1.srcrefTree(node2);
      ControlFlowAnalysis.isBreakTarget(node1, "Not reachable");
      ControlFlowAnalysis.getExceptionHandler(node1);
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(35);
      boolean boolean0 = ControlFlowAnalysis.isBreakStructure(node0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget((Node) null, "com.google.javascript.jscomp.DefaultPassConfig$26");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externAndJsRoot;
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget((Node) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 0, 0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      Node node1 = ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode((Node) null, controlFlowAnalysis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(115, node0, node0, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = new Node(39, 39, 39);
      Node node1 = ControlFlowAnalysis.computeFollowNode(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.addSuppression("Cannot find continue target.");
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      PassConfig passConfig0 = cleanupPasses0.getBasePassConfig();
      compiler0.setPassConfig(passConfig0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler1, true, true);
      ControlFlowGraph<Node> controlFlowGraph0 = controlFlowAnalysis0.getCfg();
      assertNull(controlFlowGraph0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      ControlFlowGraph<Node> controlFlowGraph0 = controlFlowAnalysis0.getCfg();
      assertNull(controlFlowGraph0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakStructure((Node) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(125);
      Node node1 = new Node(125, node0, (-398), 12);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ControlFlowAnalysis.mayThrowException(node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(130);
      Node node1 = new Node(130, node0, 28, 8);
      Node node2 = new Node(0, node1);
      Node node3 = reorderConstantExpression0.optimizeSubtree(node2);
      node3.copyInformationFromForTree(node2);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = new Node(35);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) null);
      TypedScopeCreator typedScopeCreator0 = null;
      try {
        typedScopeCreator0 = new TypedScopeCreator(compiler0, jqueryCodingConvention0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }
}

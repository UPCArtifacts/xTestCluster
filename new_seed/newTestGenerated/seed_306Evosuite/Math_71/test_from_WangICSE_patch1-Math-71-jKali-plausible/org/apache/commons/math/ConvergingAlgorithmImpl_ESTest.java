/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 04 15:05:25 GMT 2023
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.integration.RombergIntegrator;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvergingAlgorithmImpl_ESTest extends ConvergingAlgorithmImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.setMaximalIterationCount(681);
      assertEquals(681, secantSolver0.getMaximalIterationCount());
      
      secantSolver0.resetMaximalIterationCount();
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.setAbsoluteAccuracy(2038.0);
      assertEquals(2038.0, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      
      riddersSolver0.resetAbsoluteAccuracy();
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      rombergIntegrator0.setAbsoluteAccuracy(1547.7849171896);
      assertEquals(1547.7849171896, rombergIntegrator0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(1994, Double.NaN);
      assertEquals(1994, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(Double.NaN, brentSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      rombergIntegrator0.setRelativeAccuracy(2944.9751865565);
      assertEquals(2944.9751865565, rombergIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.setMaximalIterationCount(2260);
      assertEquals(2260, riddersSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      
      riddersSolver0.setAbsoluteAccuracy(0.0);
      assertEquals(0.0, riddersSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.resetAbsoluteAccuracy();
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(0.0, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(2260, (-243.0));
      double double0 = brentSolver0.getRelativeAccuracy();
      assertEquals((-243.0), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2260, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      rombergIntegrator0.setRelativeAccuracy((-2916.4096));
      double double0 = rombergIntegrator0.getRelativeAccuracy();
      assertEquals((-2916.4096), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      assertEquals(32, rombergIntegrator0.getMaximalIterationCount());
      
      rombergIntegrator0.setMaximalIterationCount(0);
      int int0 = rombergIntegrator0.getMaximalIterationCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.solveAll(doubleArray0, 1.0);
      int int0 = laguerreSolver0.getIterationCount();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(7, (-2787.047575391958));
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals((-2787.047575391958), double0, 0.01);
      assertEquals(7, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      double double0 = rombergIntegrator0.getRelativeAccuracy();
      assertEquals(32, rombergIntegrator0.getMaximalIterationCount());
      assertEquals(0, rombergIntegrator0.getIterationCount());
      assertEquals(1.0E-6, double0, 0.01);
      assertEquals(1.0E-15, rombergIntegrator0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(302, 906.54856);
      assertEquals(906.54856, brentSolver0.getAbsoluteAccuracy(), 0.01);
      
      brentSolver0.setAbsoluteAccuracy(0);
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      rombergIntegrator0.setMaximalIterationCount((-2011));
      int int0 = rombergIntegrator0.getMaximalIterationCount();
      assertEquals((-2011), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      int int0 = brentOptimizer0.getIterationCount();
      assertEquals(0.0, brentOptimizer0.getRelativeAccuracy(), 0.01);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0, int0);
      assertEquals(1.0E-10, brentOptimizer0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      assertEquals(1.0E-6, rombergIntegrator0.getRelativeAccuracy(), 0.01);
      
      rombergIntegrator0.resetRelativeAccuracy();
      assertEquals(0.0, rombergIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double double0 = laguerreSolver0.getAbsoluteAccuracy();
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(0.0, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, double0, 0.01);
      assertEquals(0, laguerreSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      int int0 = brentOptimizer0.getMaximalIterationCount();
      assertEquals(0.0, brentOptimizer0.getRelativeAccuracy(), 0.01);
      assertEquals(100, int0);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(1.0E-10, brentOptimizer0.getAbsoluteAccuracy(), 0.01);
  }
}

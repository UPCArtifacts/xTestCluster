/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 04 18:16:23 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AmbiguateProperties;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CompilerPass;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.OptimizeCalls;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.RenameProperties;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.ReplaceCssNames;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.protobuf.ByteString;
import java.io.File;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.setProgress(1.0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      boolean boolean0 = compiler_CodeBuilder0.endsWith("402MF2_O%vk^oW\"C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("TypeError");
      compiler0.startPass((String) null);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      OptimizeCalls optimizeCalls0 = new OptimizeCalls(compiler0);
      compiler0.process(optimizeCalls0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.prepareAst((Node) null);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(806);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      List<CompilerInput> list0 = compiler0.getInputsInOrder();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      compiler0.getExternsInOrder();
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.addToDebugLog((String) null);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;
      compiler0.addChangeHandler(codeChangeHandler_RecentChange0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      compiler0.stripCode(compilerOptions0.stripNamePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripNameSuffixes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "R(`bRM5\"", (String) null);
      compiler0.setCssRenamingMap((CssRenamingMap) null);
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(778);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      compiler0.rebuildInputsFromModules();
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(778);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      compiler0.processDefines();
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ByteString.Output byteString_Output0 = ByteString.newOutput();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteString_Output0, false);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.init((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compilerOptions0.checkTypes);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(97);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      VarCheck varCheck0 = new VarCheck(compiler0);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(778);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      compiler0.computeCFG();
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("com.google.javascript.jscomp.Compiler$6", 13, 1);
      String string0 = compiler0.toSource(node0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals("\"com.google.javascript.jscomp.Compiler$6\"", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "bY?v=", "bY?v=");
      String string0 = compiler0.toSource(node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals("", string0);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "R(`bRM5\"", (String) null);
      compiler0.toSource();
      assertEquals(3, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      DefaultPassConfig.GlobalTypeResolver defaultPassConfig_GlobalTypeResolver0 = defaultPassConfig0.new GlobalTypeResolver(compiler0);
      Callable<DefaultPassConfig.GlobalTypeResolver> callable0 = (Callable<DefaultPassConfig.GlobalTypeResolver>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(defaultPassConfig_GlobalTypeResolver0).when(callable0).call();
      Compiler.runCallableWithLargeStack(callable0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("&mT^c");
      InputId inputId0 = syntheticAst0.getInputId();
      Callable<InputId> callable0 = (Callable<InputId>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(inputId0).when(callable0).call();
      InputId inputId1 = Compiler.runCallable(callable0, false, true);
      assertSame(inputId1, inputId0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("vIDMqJ_:>,^", "vIDMqJ_:>,^", "com.google.javascript.jscomp.SideEffectsAnalysis$RawMotionEnvironment");
      compiler0.parse(sourceFile0);
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(0);
      Stack<JSModule> stack0 = new Stack<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) stack0, compilerOptions0);
      compiler0.parseSyntheticCode("wDVV YxV-_#@", "Duplicate extern input: {0}");
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("QE+sP'J&dD`9-@0y");
      compiler0.parse((SourceFile) jSSourceFile0);
      compiler0.newTracer("// Input %num%");
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("vT_", "QE+sP'J&dD`9-@0y", "vT_");
      compiler0.parse(sourceFile0);
      boolean boolean0 = compiler0.isTypeCheckingEnabled();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromFile("\"}i+nCc3j)");
      compiler0.parse(sourceFile0);
      boolean boolean0 = compiler0.hasHaltingErrors();
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      assertFalse(node0.hasChildren());
      
      compiler0.hasHaltingErrors();
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      boolean boolean0 = compiler0.hasErrors();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("TypeError", "com.google.javascript.jscomp.Compiler$6", "");
      compiler0.parse(sourceFile0);
      compiler0.hasErrors();
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("(|V]");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.getWarnings();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "R(`bRM5\"", (String) null);
      compiler0.getWarningCount();
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      compiler0.getTypeValidator();
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.getErrorManager();
      compiler0.getTypeRegistry();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceFileByName((String) null);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      Node node0 = compiler0.getRoot();
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("vIDMqJ_:>,^", "%num%", "com.google.javascript.jscomp.SideEffectsAnalysis$RawMotionEnvironment");
      compiler0.parse(sourceFile0);
      compiler0.getResult();
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      assertFalse(node0.hasOneChild());
      
      compiler0.getParserConfig();
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getOptions();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getModuleGraph();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "R(`M5\"", (String) null);
      JSError[] jSErrorArray0 = compiler0.getMessages();
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(3, jSErrorArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.getMessages();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "R(`bRM5\"", (String) null);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      Stack<JSModule> stack1 = new Stack<JSModule>();
      compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) stack1, compilerOptions0);
      InputId inputId0 = node0.getInputId();
      compiler0.getInput(inputId0);
      assertEquals(4, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      Stack<JSModule> stack1 = new Stack<JSModule>();
      compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) stack1, compilerOptions0);
      compiler0.getErrors();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Logger logger0 = Logger.getLogger("R(`bRMN5\"");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.getErrors();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      Stack<JSModule> stack1 = new Stack<JSModule>();
      compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) stack1, compilerOptions0);
      compiler0.getErrorManager();
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.getDiagnosticGroups();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>(403);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      JSModuleGraph jSModuleGraph0 = compiler0.getDegenerateModuleGraph();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertNotNull(jSModuleGraph0);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getDefaultErrorReporter();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "R(`bRM5\"", (String) null);
      compiler0.getCodingConvention();
      assertEquals(3, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.createPassConfigInternal();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Compiler.createFillFileName((String) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      File file0 = MockFile.createTempFile("[singleton]", "0]eR|J?)5wDDzO");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0, (Charset) null);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
      assertTrue(jSSourceFile0.isExtern());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("TypeError", "TypeError", "");
      Node node0 = compiler0.parse(sourceFile0);
      SourceFile sourceFile1 = SourceFile.fromCode("com.google.javascript.rhino.JSDocInfo$TypePosition", "vT_", "base");
      Node node1 = compiler0.parse(sourceFile1);
      boolean boolean0 = compiler0.areNodesEqualForInlining(node1, node0);
      assertFalse(boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      Stack<JSModule> stack1 = new Stack<JSModule>();
      compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) stack1, compilerOptions0);
      compiler0.acceptConstKeyword();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        compiler0.stripCode(compilerOptions0.aliasableStrings, compilerOptions0.stripTypePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.aliasableStrings);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Tracer tracer0 = Tracer.shortName((Object) null, "Placeholder name not in lowerCamelCase: ");
      // Undeclared exception!
      try { 
        compiler0.stopTracer(tracer0, "Placeholder name not in lowerCamelCase: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.startPass("_9!DvZtYE=&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.setState((Compiler.IntermediateState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        Compiler.runCallableWithLargeStack((Callable<DefaultPassConfig.GlobalTypeResolver>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("vT_", "vT_", "msg.ctor.not.found");
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        compiler0.replaceScript(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("com.google.javascript.jscomp.JsMessageDefinition", (String) null);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      // Undeclared exception!
      try { 
        compiler0.replaceScript(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No input to replace: com.google.javascript.jscomp.JsMessageDefinition
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("]");
      // Undeclared exception!
      try { 
        compiler0.removeTryCatchFinally();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      // Undeclared exception!
      try { 
        compiler0.removeExternInput((InputId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("com.google.javascript.jscomp.SideEffectsAnalysis$RawMotionEnvironment");
      // Undeclared exception!
      try { 
        compiler0.recordFunctionInformation();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.recordFunctionInformation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "R(`bRMQ5\"", (String) null);
      // Undeclared exception!
      try { 
        compiler0.processDefines();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.processAMDAndCommonJSModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.process((CompilerPass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameProperties renameProperties0 = new RenameProperties(compiler0, false, false);
      // Undeclared exception!
      try { 
        compiler0.process(renameProperties0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst("Not an extern input: %s");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      // Undeclared exception!
      try { 
        compiler0.prepareAst(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseTestCode((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

//   @Test(timeout = 4000)
//   public void test071()  throws Throwable  {
//       ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
//       Compiler compiler0 = new Compiler();
//       Compiler compiler1 = new Compiler();
//       // Undeclared exception!
//       try { 
//         compiler1.parseTestCode("p");
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // duplicate key: modifies
//          //
//          verifyException("com.google.common.base.Preconditions", e);
//       }
//   }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("wJ'`&cogL7QA1", "sP'J&dD`9-@0y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseInputs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("TypeError", "com.google.javascript.jscomp.Compiler$6", "");
      compiler0.parse(sourceFile0);
      // Undeclared exception!
      try { 
        compiler0.parseInputs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parse((SourceFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("QE+sP'J&dD`9-@0y", "?-SX(:`~Kz", "?-SX(:`~Kz");
      // Undeclared exception!
      try { 
        compiler0.parse(sourceFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("XJ", "Y:YjM`MS", (String) null);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parse(sourceFile0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

//   @Test(timeout = 4000)
//   public void test078()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       Compiler compiler1 = new Compiler();
//       SourceFile sourceFile0 = SourceFile.fromCode("vTm_", "vTm_", "/*\n");
//       // Undeclared exception!
//       try { 
//         compiler0.parse(sourceFile0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // duplicate key: modifies
//          //
//          verifyException("com.google.common.base.Preconditions", e);
//       }
//   }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("TypeError", "W", "NE");
      compiler0.parse(sourceFile0);
      // Undeclared exception!
      try { 
        compiler0.optimize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromFile("onfig$74");
      compiler0.parse(sourceFile0);
      // Undeclared exception!
      try { 
        compiler0.normalize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.newTracer("\u0004:vNxTmS%$Ww< F{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.newExternInput("X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.isInliningForbidden();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.initInputsByIdMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.hasHaltingErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Logger logger0 = Logger.getLogger("com.google.javascript.jscomp.RenameLabels");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.getTypeRegistry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getSourceRegion("", 523);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getSourceFileByName("vT_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getParserConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      InputId inputId0 = new InputId("");
      // Undeclared exception!
      try { 
        compiler0.getInput(inputId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getCodingConvention();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        compiler0.compileModules((List<SourceFile>) null, (List<JSModule>) null, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

//   @Test(timeout = 4000)
//   public void test093()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(806);
//       JSSourceFile.fromFile("QE+sP'J&dD`9-@0y");
//       Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       Compiler compiler1 = new Compiler();
//       assertEquals(0.0, compiler1.getProgress(), 0.01);
//       
//       // Undeclared exception!
//       try { 
//         compiler1.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // org.evosuite.runtime.mock.java.lang.MockThrowable: duplicate key: modifies
//          //
//          verifyException("com.google.javascript.jscomp.Compiler", e);
//       }
//   }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      // Undeclared exception!
      try { 
        compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.check();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.buildKnownSymbolTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.areNodesEqualForInlining((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      SourceFile sourceFile0 = SourceFile.fromFile("v+-^:.b=x1j&!Rn8V6%");
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        compiler0.addNewSourceAst(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.acceptEcmaScript5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Compiler compiler0 = null;
      try {
        compiler0 = new Compiler((ErrorManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // the error manager cannot be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getSourceLine("vIDMqJ_:>,^", 841);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceLine("%:qS\"M[3", (-1279));
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make(compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) arrayList0, (List<JSModule>) stack0, compilerOptions0);
      compiler0.report(jSError0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      MockFile mockFile0 = new MockFile("^k-W=xrXW#\"!,5+", "^k-W=xrXW#\"!,5+");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      stack0.add((SourceFile) jSSourceFile0);
      // Undeclared exception!
      try { 
        compiler0.init((List<SourceFile>) stack0, (List<SourceFile>) stack0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.initOptions((CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(778);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      compiler0.initOptions(compilerOptions0);
      assertFalse(compilerOptions0.gatherCssNames);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.isIdeMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      // Undeclared exception!
      try { 
        compiler0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.acceptConstKeyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.hasErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.normalize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getErrorCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.setErrorManager(loggerErrorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.setProgress(0.0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.setProgress(1006.3667259772491);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      compiler0.setProgress((-124.1));
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "R(`bRM5\"", (String) null);
      HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      // Undeclared exception!
      try { 
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getAstDotGraph();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("com.google.javascript.jscomp.SideEffectsAnalysis$RawMotionEnvironment");
      // Undeclared exception!
      try { 
        compiler0.ensureLibraryInjected("com.google.javascript.jscomp.SideEffectsAnalysis$RawMotionEnvironment");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceRegion("lA9>ofVe|fe_Ls2vx", (-943));
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "bY?v=", (String) null);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      arrayList0.add((SourceFile) null);
      // Undeclared exception!
      try { 
        compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JsAst", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "R(`M5\"", (String) null);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      assertFalse(compilerOptions0.checkTypes);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceRegion((String) null, 826);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.throwInternalError(" [synthetic:", (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         //  [synthetic:
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make("No input to replace: %s", 751, 28, checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
      compiler0.report(jSError0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String[] stringArray0 = new String[0];
      JSError jSError0 = JSError.make(compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      // Undeclared exception!
      try { 
        compiler0.report(jSError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("TypeError", "com.google.javascript.jscomp.Compiler$6", "");
      compiler0.parse(sourceFile0);
      boolean boolean0 = compiler0.acceptEcmaScript5();
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.reportCodeChange();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("TypeError", "com.google.javascript.jscomp.Compiler$6", "X");
      compiler0.parse(sourceFile0);
      boolean boolean0 = compiler0.isInliningForbidden();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("JRhzkn>V");
      boolean boolean0 = compiler_CodeBuilder0.endsWith("t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("IL");
      boolean boolean0 = compiler_CodeBuilder1.endsWith("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      boolean boolean0 = compiler_CodeBuilder0.endsWith("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("TypeError");
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, (String) null, "''XRB$coCXj*=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("TypeError", "TypeError", "");
      compiler0.parse(sourceFile0);
      // Undeclared exception!
      try { 
        compiler0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getTypeValidator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getReverseAbstractInterpreter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      SymbolTable symbolTable0 = compiler0.buildKnownSymbolTable();
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("S2");
      // Undeclared exception!
      try { 
        compiler0.buildKnownSymbolTable();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(806);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      ReplaceCssNames replaceCssNames0 = new ReplaceCssNames(compiler0, (Map<String, Integer>) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSModuleGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      
      SourceFile sourceFile0 = SourceFile.fromFile("j\"W(~(w'e");
      JsAst jsAst0 = new JsAst(sourceFile0);
      compiler0.addNewSourceAst(jsAst0);
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "bY?v=", "bY?v=");
      // Undeclared exception!
      try { 
        compiler0.getSynthesizedExternsInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("msg.ctor.not.found", "msg.ctor.not.found", "msg.ctor.not.found");
      Node node0 = compiler0.parse(sourceFile0);
      compiler0.areNodesEqualForInlining(node0, node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.TIMING_ONLY;
      compilerOptions0.tracer = compilerOptions_TracerMode0;
      // Undeclared exception!
      try { 
        compiler0.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) stack0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("");
      CompilerOptions compilerOptions0 = compiler0.options;
      // Undeclared exception!
      try { 
        compiler0.stripCode(compilerOptions0.stripNamePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      compiler0.setPassConfig(defaultPassConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        Compiler.runCallable((Callable<AmbiguateProperties>) null, true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Callable<InputId> callable0 = (Callable<InputId>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      InputId inputId0 = Compiler.runCallable(callable0, false, true);
      assertNull(inputId0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      compiler0.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) stack0, compilerOptions0);
      compiler0.parse();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      ArrayList<JSModule> arrayList1 = new ArrayList<JSModule>();
      // Undeclared exception!
      try { 
        compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) arrayList1, compilerOptions0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      // Undeclared exception!
      try { 
        compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) linkedList0, compilerOptions0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(806);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("QE+sP'J&dD`9-@0y");
      arrayList0.add((SourceFile) jSSourceFile0);
      arrayList0.add((SourceFile) jSSourceFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ByteString.Output byteString_Output0 = ByteString.newOutput();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteString_Output0, true);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        compiler0.initOptions((CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.initCompilerOptionsIfTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.reset();
      assertEquals("", compiler_CodeBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getColumnIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getLineIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string0 = compiler_CodeBuilder0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getTopScope();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.removeTryCatchFinally();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.getExternsForTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.setHasRegExpGlobalReferences(false);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;
      compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[3];
      JSModule[] jSModuleArray0 = new JSModule[0];
      // Undeclared exception!
      try { 
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getInputsForTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getRoot();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.isTypeCheckingEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.compile((SourceFile) null, (SourceFile) null, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getTypedScopeCreator();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.loadLibraryCode("<}d(PB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource((Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build without root node being specified
         //
         verifyException("com.google.javascript.jscomp.CodePrinter$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.compile((JSSourceFile[]) null, (JSSourceFile[]) null, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getGlobalVarReferences();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.getExternsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      // Undeclared exception!
      try { 
        compiler0.setPassConfig(defaultPassConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // this.passes has already been assigned
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Logger logger0 = Logger.getLogger("com.google.javascript.jscomp.RenameLabels");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.getFunctionalInformationMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getVariableMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getWarningCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Callable<DefaultPassConfig.GlobalTypeResolver> callable0 = (Callable<DefaultPassConfig.GlobalTypeResolver>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      DefaultPassConfig.GlobalTypeResolver defaultPassConfig_GlobalTypeResolver0 = Compiler.runCallableWithLargeStack(callable0);
      assertNull(defaultPassConfig_GlobalTypeResolver0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getWarnings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Compiler.getReleaseVersion();
      assertEquals("Unversioned directory", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.getPropertyMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      double double0 = compiler0.getProgress();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("TypeError", (String) null);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        compiler0.addIncrementalSourceAst(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Compiler.getReleaseDate();
      assertEquals("2023/02/04 10:13", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      boolean boolean0 = compiler0.precheck();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getInputsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.disableThreads();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromFile("\"}i+nCc3j)");
      compiler0.parse(sourceFile0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertNotNull(reverseAbstractInterpreter0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      compiler0.setState(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      boolean boolean0 = compiler0.hasRegExpGlobalReferences();
      assertTrue(boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.getCssRenamingMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Compiler.setLoggingLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.resetUniqueNameId();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSourceArray((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      
      compiler0.recordFunctionInformation();
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSourceArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Callable<InputId> callable0 = (Callable<InputId>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((InputId) null).when(callable0).call();
      InputId inputId0 = Compiler.runCallable(callable0, false, false);
      assertNull(inputId0);
  }
}

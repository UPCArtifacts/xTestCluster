/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 04 15:17:51 GMT 2023
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.CombinedDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesDataset;
import org.jfree.data.general.SubSeriesDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractDataset_ESTest extends AbstractDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(histogramDataset0, true);
      jDBCPieDataset0.addChangeListener(intervalXYDelegate0);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      jDBCPieDataset0.addChangeListener(intervalXYDelegate0);
      jDBCPieDataset0.sortByValues(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Short short0 = new Short((short)3325);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(3972, 0, short0);
      SeriesDataset[] seriesDatasetArray0 = new SeriesDataset[0];
      CombinedDataset combinedDataset0 = new CombinedDataset(seriesDatasetArray0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(waferMapDataset0, combinedDataset0);
      combinedDataset0.notifyListeners(datasetChangeEvent0);
      assertEquals(0, combinedDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.fireDatasetChanged();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0, integer0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      waferMapDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(combinedDataset0);
      combinedDataset0.add((SeriesDataset) combinedDataset0, 0);
      combinedDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        combinedDataset0.validateObject();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(combinedDataset0, (int[]) null);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(subSeriesDataset0);
      combinedDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        combinedDataset0.validateObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.SubSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(combinedDataset0);
      combinedDataset0.add((SeriesDataset) combinedDataset0, 2);
      combinedDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        combinedDataset0.validateObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(combinedDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      combinedDataset0.add((SeriesDataset) defaultTableXYDataset0, (-2));
      combinedDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        combinedDataset0.validateObject();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(combinedDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      combinedDataset0.add((SeriesDataset) taskSeriesCollection0, (-2));
      combinedDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        combinedDataset0.validateObject();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(combinedDataset0);
      combinedDataset0.add((SeriesDataset) combinedDataset0, (-35));
      combinedDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        combinedDataset0.validateObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1468, 1468);
      // Undeclared exception!
      try { 
        waferMapDataset0.setGroup((DatasetGroup) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'group' argument.
         //
         verifyException("org.jfree.data.general.AbstractDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      combinedDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(0, combinedDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(histogramDataset0, true);
      jDBCPieDataset0.addChangeListener(intervalXYDelegate0);
      jDBCPieDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      jDBCPieDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      DatasetGroup datasetGroup0 = combinedDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(histogramDataset0, true);
      boolean boolean0 = histogramDataset0.hasListener(intervalXYDelegate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      Object object0 = combinedDataset0.clone();
      assertNotSame(object0, combinedDataset0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.validateObject();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }
}

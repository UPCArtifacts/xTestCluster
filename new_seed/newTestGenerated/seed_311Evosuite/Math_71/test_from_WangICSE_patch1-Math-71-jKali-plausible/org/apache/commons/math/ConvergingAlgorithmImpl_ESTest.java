/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 06 05:17:55 GMT 2023
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.integration.SimpsonIntegrator;
import org.apache.commons.math.analysis.integration.TrapezoidIntegrator;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvergingAlgorithmImpl_ESTest extends ConvergingAlgorithmImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.setAbsoluteAccuracy(1827.589061898);
      assertEquals(1827.589061898, trapezoidIntegrator0.getAbsoluteAccuracy(), 0.01);
      
      trapezoidIntegrator0.resetAbsoluteAccuracy();
      assertEquals(1.0E-15, trapezoidIntegrator0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(15, Double.NaN);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(Double.NaN, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(15, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      simpsonIntegrator0.setRelativeAccuracy((-171.937874769));
      assertEquals((-171.937874769), simpsonIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.setMaximalIterationCount((-2564));
      assertEquals((-2564), riddersSolver0.getMaximalIterationCount());
      
      riddersSolver0.resetMaximalIterationCount();
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      
      laguerreSolver0.setAbsoluteAccuracy(0.0);
      assertEquals(0.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      assertEquals(1.0E-6, simpsonIntegrator0.getRelativeAccuracy(), 0.01);
      
      simpsonIntegrator0.resetRelativeAccuracy();
      assertEquals(0.0, simpsonIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.setRelativeAccuracy(2779.05498267139);
      double double0 = riddersSolver0.getRelativeAccuracy();
      assertEquals(2779.05498267139, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.setRelativeAccuracy((-1.0));
      double double0 = newtonSolver0.getRelativeAccuracy();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver((-581), (-581));
      int int0 = brentSolver0.getMaximalIterationCount();
      assertEquals((-581), int0);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals((-581.0), brentSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      assertEquals(0, newtonSolver0.getIterationCount());
      
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = (-1.0);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      newtonSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-4.9E-324), 3.141592653589793);
      int int0 = newtonSolver0.getIterationCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      
      laguerreSolver0.setAbsoluteAccuracy(0.0);
      double double0 = laguerreSolver0.getAbsoluteAccuracy();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      double double0 = newtonSolver0.getRelativeAccuracy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-6, newtonSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0, newtonSolver0.getIterationCount());
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.setAbsoluteAccuracy((-1050.0));
      double double0 = riddersSolver0.getAbsoluteAccuracy();
      assertEquals((-1050.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      
      riddersSolver0.setMaximalIterationCount(0);
      int int0 = riddersSolver0.getMaximalIterationCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      int int0 = newtonSolver0.getIterationCount();
      assertEquals(1.0E-6, newtonSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0, int0);
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
      assertEquals(0.0, newtonSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      double double0 = riddersSolver0.getAbsoluteAccuracy();
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      assertEquals(0.0, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, double0, 0.01);
      assertEquals(0, riddersSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      int int0 = riddersSolver0.getMaximalIterationCount();
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(0.0, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 04 11:13:04 GMT 2023
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.AffineTransform;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(1.0E-10, 1.0E-10);
      affineTransform0.rotate((-1992.0), 1.0E-10, 1.0E-10);
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      assertNotNull(transform0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(0.38305372511304725, 82.6443241442);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, 1.0E-10);
      boolean boolean0 = line0.isParallelTo(line1);
      assertEquals(82.6443241442, line0.getOriginOffset(), 0.01);
      assertFalse(boolean0);
      assertEquals(82.64432414416169, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0E-10;
      Vector2D vector2D1 = new Vector2D(doubleArray0);
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.contains(vector2D1);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = Vector1D.NaN;
      Vector2D vector2D1 = line0.getPointAt(vector1D0, 0.0);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1.0E-10);
      Line line1 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.sameOrientationAs(line1);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, 843.295337809876);
      double double0 = line0.getOffset(line1);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.0E-10, 1659.1248565273536);
      Vector2D vector2D1 = new Vector2D(1659.1248565273536, vector2D0, 0.5000000000042687, vector2D0, 0.5000000000042687, vector2D0);
      Line line0 = new Line(vector2D1, vector2D0);
      Vector2D vector2D2 = vector2D1.subtract((-472.0), (Vector<Euclidean2D>) vector2D0);
      Line line1 = new Line(vector2D0, vector2D2);
      Vector2D vector2D3 = line0.intersection(line1);
      assertEquals((-1.5331770620431152E-26), line1.getOriginOffset(), 0.01);
      assertEquals(1.9693465103141808E-26, line0.getOriginOffset(), 0.01);
      assertNull(vector2D3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = line0.intersection(line1);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
      assertNull(vector2D1);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 1803.2502461745344);
      assertEquals(Double.POSITIVE_INFINITY, line0.getOriginOffset(), 0.01);
      
      line0.reset(vector2D0, 0.0);
      line0.revertSelf();
      line0.revertSelf();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(0.0, vector2D0, 0.0, vector2D0, 0.0, vector2D0);
      Line line0 = new Line(vector2D1, vector2D0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(line0);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Plane plane0 = new Plane(vector3D0);
      Vector2D vector2D0 = plane0.toSubSpace(vector3D0);
      Line line0 = new Line(vector2D0, 6.208824153251282);
      line0.revertSelf();
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      line0.toSpace(vector1D0);
      assertEquals(-0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D((-1899.5), vector2D0);
      Line line0 = new Line(vector2D1, 1803.2502461745344);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D2 = line0.toSpace(vector1D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D2.getX(), 0.01);
      assertEquals(Double.NaN, vector2D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      Vector2D vector2D1 = line0.toSpace(vector1D0);
      assertFalse(vector2D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 1.571370631510868);
      Vector2D vector2D1 = new Vector2D(1.571370631510868, 3.141592653589793);
      Line line1 = new Line(vector2D1, 3.141592653589793);
      Vector2D vector2D2 = line1.intersection(line0);
      assertNotNull(vector2D2);
      assertEquals(Double.POSITIVE_INFINITY, vector2D2.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D2.getX(), 0.01);
      assertEquals((-3.141592653589793), line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-475.17637203592756), (-475.17637203592756));
      Line line0 = new Line(vector2D0, (-475.17637203592756));
      Line line1 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = line0.intersection(line1);
      assertTrue(vector2D1.equals((Object)vector2D0));
      assertNotNull(vector2D1);
      assertEquals(671.9639447263613, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1.0E-10);
      Line line1 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = line0.intersection(line1);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertNotNull(vector2D1);
      assertEquals(0.0, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-2978.881668346734), 0.3333333333333333);
      Line line0 = new Line(vector2D0, (-65.028916329));
      line0.revertSelf();
      line0.getReverse();
      assertEquals(2413.7484289122867, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 2257.813);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector2D vector2D1 = line0.getPointAt(vector1D0, 0.0);
      assertEquals(-0.0, line0.getOriginOffset(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(642.738442446, 642.738442446);
      Line line0 = new Line(vector2D0, 642.738442446);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector2D vector2D1 = line0.getPointAt(vector1D0, (-1356.0409));
      assertEquals((-537.2882099122216), vector2D1.getX(), 0.01);
      assertEquals((-156.09749848323213), vector2D1.getY(), 0.01);
      assertEquals(559.5042891197548, vector2D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      Vector2D vector2D1 = line0.getPointAt(vector1D0, 0.0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOriginOffset();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-2978.881668346734), 0.3333333333333333);
      Line line0 = new Line(vector2D0, (-65.028916329));
      line0.revertSelf();
      double double0 = line0.getOriginOffset();
      assertEquals(2413.7484289122867, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(0.3333333333333333, 0.3333333333333333);
      Line line0 = new Line(vector2D0, (-65.029));
      line0.revertSelf();
      double double0 = line0.getOriginOffset();
      assertEquals((-0.07466004000030729), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(843.295337809876, 843.295337809876);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, 843.295337809876);
      double double0 = line0.getOffset(line1);
      assertEquals(1479.9256996115892, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 642.738442446);
      Vector2D vector2D1 = new Vector2D(642.738442446, 642.738442446);
      Line line1 = new Line(vector2D1, 642.738442446);
      double double0 = line0.getOffset(line1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals((-796.5366108802451), line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = new Vector2D(40.19140625, (-1080.0));
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D1);
      assertEquals(1080.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(3089.329892318524, 3089.329892318524);
      Vector2D vector2D1 = new Vector2D((-1878.0732138251221), vector2D0, (-3212.4), vector2D0, (-3212.4), vector2D0, (-3212.4), vector2D0);
      Line line0 = new Line(vector2D1, (-3719.94389));
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D0);
      assertEquals((-4.445983242167054E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getAngle();
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-2978.881668346734), 0.3333333333333333);
      Vector2D vector2D1 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D1, (-2978.881668346734));
      double double0 = line0.distance(vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Plane plane0 = new Plane(vector3D0);
      Vector2D vector2D0 = plane0.toSubSpace(vector3D0);
      Line line0 = new Line(vector2D0, 6.208824153251282);
      Line line1 = line0.copySelf();
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.copySelf();
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 1.57137);
      // Undeclared exception!
      try { 
        line0.translateToPoint((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.sameOrientationAs((Hyperplane<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 2257.813);
      // Undeclared exception!
      try { 
        line0.reset((Vector2D) null, vector2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.isParallelTo((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.getPointAt((Vector1D) null, (-905.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.getOffset((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 1.57137);
      // Undeclared exception!
      try { 
        line0.distance((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.contains((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector2D) null, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector2D) null, 0.6724122440830567);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.reset(vector2D0, vector2D0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-2978.881668346734), 0.3333333333333333);
      Line line0 = new Line(vector2D0, (-65.028916329));
      line0.reset(vector2D0, vector2D0);
      assertEquals(0.3333333333333333, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 0.0);
      // Undeclared exception!
      try { 
        line0.reset((Vector2D) null, 1331.5666716);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.getOffset((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-0.9637069177342522), (-0.9637069177342522), (-0.9637069177342522), (-0.9637069177342522), (-0.9637069177342522), (-0.9637069177342522));
      try { 
        Line.getTransform(affineTransform0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non-invertible affine transform collapses some lines into single points
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform();
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      assertNotNull(transform0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.isParallelTo(line0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 2155.348555);
      Line line1 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.isParallelTo(line1);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.contains(vector2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.contains(vector2D0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.sameOrientationAs(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOffset(line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.0E-10, 1650.867971713261);
      Vector2D vector2D1 = vector2D0.negate();
      Line line0 = new Line(vector2D1, vector2D0);
      Vector2D vector2D2 = line0.intersection(line0);
      assertEquals(Double.NaN, vector2D2.getX(), 0.01);
      assertEquals(Double.NaN, vector2D2.getY(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertNotNull(vector2D2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-9.996840537694426), 1924.0435471263);
      Vector2D vector2D1 = new Vector2D((-9.996840537694426), (-9.996840537694426));
      Line line0 = new Line(vector2D1, vector2D0);
      Vector2D vector2D2 = line0.intersection(line0);
      assertNull(vector2D2);
      assertEquals(9.996840537694426, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = line0.intersection(line0);
      assertNotNull(vector2D1);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.getReverse();
      assertEquals(-0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.getReverse();
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.revertSelf();
      line0.getReverse();
      assertEquals(-0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.revertSelf();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.wholeHyperplane();
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 2155.348555);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      Vector2D vector2D1 = line0.getPointAt(vector1D0, Double.NaN);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector1D0.getX(), 0.01);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 2155.348555);
      line0.wholeSpace();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.setOriginOffset(1885.951);
      assertEquals(1885.951, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 2155.348555);
      double double0 = line0.getAngle();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
      assertEquals(0.2159946374017636, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.distance(vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        Line.getTransform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.translateToPoint(vector2D0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.setAngle((-0.9858567928240438));
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 99.4);
      Line line1 = line0.copySelf();
      assertEquals(Double.NEGATIVE_INFINITY, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      Vector2D vector2D1 = line0.toSpace(vector1D0);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getNorm(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 04 09:01:52 GMT 2023
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.CombinedDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.SubSeriesDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractDataset_ESTest extends AbstractDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultWindDataset0, 860.9294977531864);
      defaultPieDataset0.addChangeListener(xYBarDataset0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      defaultPieDataset0.addChangeListener(xYDatasetTableModel0);
      defaultPieDataset0.validateObject();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(10, 3164, integer0);
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      waferMapDataset0.setGroup(datasetGroup0);
      assertEquals("", datasetGroup0.getID());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1623, (-225));
      waferMapDataset0.fireDatasetChanged();
      assertEquals((-225), waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(327, (-2252));
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultXYDataset0, 0.0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYBarDataset0, defaultXYDataset0);
      waferMapDataset0.notifyListeners(datasetChangeEvent0);
      assertEquals(327, waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xIntervalSeriesCollection0);
      taskSeriesCollection0.addChangeListener(intervalXYDelegate0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CombinedDataset combinedDataset0 = new CombinedDataset();
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(combinedDataset0, 1);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(subSeriesDataset0);
      defaultKeyedValuesDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.validateObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(defaultXYZDataset0, 53);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(subSeriesDataset0);
      defaultPieDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        defaultPieDataset0.validateObject();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      // Undeclared exception!
      try { 
        waferMapDataset0.setGroup((DatasetGroup) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'group' argument.
         //
         verifyException("org.jfree.data.general.AbstractDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2551.544277278726);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(matrixSeriesCollection0, 2);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(subSeriesDataset0);
      defaultValueDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        defaultValueDataset0.fireDatasetChanged();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultWindDataset0, 859.8122875165);
      boolean boolean0 = defaultPieDataset0.hasListener(xYBarDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      combinedDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(0, combinedDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, 0);
      defaultPieDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      defaultWindDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      Object object0 = combinedDataset0.clone();
      assertNotSame(object0, combinedDataset0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 04 08:48:55 GMT 2023
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.integration.TrapezoidIntegrator;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvergingAlgorithmImpl_ESTest extends ConvergingAlgorithmImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.setMaximalIterationCount((-1));
      assertEquals((-1), trapezoidIntegrator0.getMaximalIterationCount());
      
      trapezoidIntegrator0.resetMaximalIterationCount();
      assertEquals(64, trapezoidIntegrator0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      mullerSolver0.setAbsoluteAccuracy(0.0);
      assertEquals(0.0, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      
      mullerSolver0.resetAbsoluteAccuracy();
      assertEquals(1.0E-6, mullerSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0, Double.NaN);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(Double.NaN, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0, brentSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      brentSolver0.setRelativeAccuracy(654.0);
      assertEquals(654.0, brentSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      assertEquals(1.0E-15, trapezoidIntegrator0.getAbsoluteAccuracy(), 0.01);
      
      trapezoidIntegrator0.setAbsoluteAccuracy(0.0);
      assertEquals(0.0, trapezoidIntegrator0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      assertEquals(1.0E-6, trapezoidIntegrator0.getRelativeAccuracy(), 0.01);
      
      trapezoidIntegrator0.resetRelativeAccuracy();
      assertEquals(0.0, trapezoidIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(1, 1);
      brentSolver0.resetAbsoluteAccuracy();
      assertEquals(1.0, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(1, brentSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(1, 1);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      
      brentSolver0.setRelativeAccuracy(1);
      double double0 = brentSolver0.getRelativeAccuracy();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0.0);
      brentSolver0.setRelativeAccuracy((-2030.11660201));
      double double0 = brentSolver0.getRelativeAccuracy();
      assertEquals((-2030.11660201), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      int int0 = brentSolver0.getMaximalIterationCount();
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(100, int0);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double[] doubleArray0 = new double[4];
      laguerreSolver0.solveAll(doubleArray0, 1.1102230246251565E-16);
      int int0 = laguerreSolver0.getIterationCount();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, double0, 0.01);
      assertEquals(0, brentSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0, (-2063.998088));
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, brentSolver0.getMaximalIterationCount());
      assertEquals((-2063.998088), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0.0);
      double double0 = brentSolver0.getRelativeAccuracy();
      assertEquals(0.0, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(100, brentSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      brentSolver0.setAbsoluteAccuracy(63.0);
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals(63.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.setMaximalIterationCount((-1));
      int int0 = trapezoidIntegrator0.getMaximalIterationCount();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      int int0 = laguerreSolver0.getIterationCount();
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(0.0, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0.0);
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, brentSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0, 0);
      int int0 = brentSolver0.getMaximalIterationCount();
      assertEquals(0, int0);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0, brentSolver0.getIterationCount());
  }
}

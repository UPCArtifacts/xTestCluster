import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass10 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        java.lang.Class<?> wildcardClass7 = euclideanIntegerPoint5.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        java.lang.Class<?> wildcardClass80 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList26 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26, euclideanIntegerPointArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray79 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint80 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList82 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82, euclideanIntegerPointArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = euclideanIntegerPoint72.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        int[] intArray91 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        java.lang.String str93 = euclideanIntegerPoint92.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint44, euclideanIntegerPoint64, euclideanIntegerPoint72, euclideanIntegerPoint92 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList95 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean96 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95, euclideanIntegerPointArray94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = euclideanIntegerPoint36.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint99 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint28);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint84);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint97);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint98);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint99);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        java.lang.Class<?> wildcardClass90 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        java.lang.Class<?> wildcardClass7 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass71 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.Class<?> wildcardClass69 = euclideanIntegerPointList66.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.Class<?> wildcardClass10 = euclideanIntegerPoint9.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        java.lang.Class<?> wildcardClass82 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        java.lang.Class<?> wildcardClass82 = euclideanIntegerPoint76.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList26 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26, euclideanIntegerPointArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray79 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint80 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList82 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82, euclideanIntegerPointArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = euclideanIntegerPoint72.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        int[] intArray91 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        java.lang.String str93 = euclideanIntegerPoint92.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint44, euclideanIntegerPoint64, euclideanIntegerPoint72, euclideanIntegerPoint92 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList95 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean96 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95, euclideanIntegerPointArray94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = euclideanIntegerPoint36.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint99 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint28);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint84);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint97);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint98);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint99);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        java.lang.String str18 = euclideanIntegerPoint5.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double20 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(0,10,-1,100)" + "'", str18, "(0,10,-1,100)");
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.Class<?> wildcardClass8 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        java.lang.Class<?> wildcardClass10 = euclideanIntegerPoint9.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        double double91 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint89);
        java.lang.String str92 = euclideanIntegerPoint68.toString();
        java.lang.Class<?> wildcardClass93 = euclideanIntegerPoint68.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.Class<?> wildcardClass8 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        java.lang.String str71 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass72 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(-1,10,10,97,10,100)" + "'", str71, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray12 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        java.lang.String str14 = euclideanIntegerPoint13.toString();
        int[] intArray15 = euclideanIntegerPoint13.getPoint();
        boolean boolean17 = euclideanIntegerPoint13.equals((java.lang.Object) 1.0d);
        int[] intArray18 = euclideanIntegerPoint13.getPoint();
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint59 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList61 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList61, euclideanIntegerPointArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint51.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList61);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint79 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList81 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList81, euclideanIntegerPointArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = euclideanIntegerPoint71.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList81);
        int[] intArray90 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint43, euclideanIntegerPoint63, euclideanIntegerPoint71, euclideanIntegerPoint91 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList94 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList94, euclideanIntegerPointArray93);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = euclideanIntegerPoint13.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint99 = euclideanIntegerPoint5.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList94);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(-1,10,10,97,10,100)" + "'", str14, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint83);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint96);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint97);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint98);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint99);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        java.lang.String str78 = euclideanIntegerPoint77.toString();
        int[] intArray79 = euclideanIntegerPoint77.getPoint();
        boolean boolean81 = euclideanIntegerPoint77.equals((java.lang.Object) 1.0d);
        int[] intArray82 = euclideanIntegerPoint77.getPoint();
        double double83 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint77);
        java.lang.String str84 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass85 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        int[] intArray75 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        int[] intArray77 = euclideanIntegerPoint76.getPoint();
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        double double87 = euclideanIntegerPoint76.distanceFrom(euclideanIntegerPoint86);
        int[] intArray88 = euclideanIntegerPoint76.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 11.445523142259598d + "'", double87 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 10, -1, 100]");
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        int[] intArray19 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint53 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList55 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55, euclideanIntegerPointArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = euclideanIntegerPoint45.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint37, euclideanIntegerPoint57, euclideanIntegerPoint65, euclideanIntegerPoint85 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList88 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88, euclideanIntegerPointArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        java.lang.Class<?> wildcardClass14 = euclideanIntegerPoint13.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = euclideanIntegerPoint10.distanceFrom(euclideanIntegerPoint11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        java.lang.Class<?> wildcardClass72 = euclideanIntegerPoint70.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double11 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        java.lang.Class<?> wildcardClass11 = intArray9.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        boolean boolean83 = euclideanIntegerPoint7.equals((java.lang.Object) 100.0f);
        int[] intArray84 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass85 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        int[] intArray90 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray14 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray16 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 10, -1, 100]");
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray11 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray18 = euclideanIntegerPoint17.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 10, -1, 100]");
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass11 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        int[] intArray29 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray35 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray37 = euclideanIntegerPoint36.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray40 = euclideanIntegerPoint39.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        boolean boolean42 = euclideanIntegerPoint30.equals((java.lang.Object) euclideanIntegerPoint41);
        double double43 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint30);
        java.lang.Class<?> wildcardClass44 = euclideanIntegerPoint30.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.Class<?> wildcardClass8 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        java.lang.String str13 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass14 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(-1,10,10,97,10,100)" + "'", str13, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double91 = euclideanIntegerPoint89.distanceFrom(euclideanIntegerPoint90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        java.lang.Class<?> wildcardClass18 = intArray17.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray12 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        java.lang.String str14 = euclideanIntegerPoint13.toString();
        int[] intArray15 = euclideanIntegerPoint13.getPoint();
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint47 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList49 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49, euclideanIntegerPointArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint39.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint67 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList69 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69, euclideanIntegerPointArray68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = euclideanIntegerPoint59.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        java.lang.String str80 = euclideanIntegerPoint79.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31, euclideanIntegerPoint51, euclideanIntegerPoint59, euclideanIntegerPoint79 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList82 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82, euclideanIntegerPointArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = euclideanIntegerPoint13.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        boolean boolean86 = euclideanIntegerPoint5.equals((java.lang.Object) euclideanIntegerPoint85);
        java.lang.Class<?> wildcardClass87 = euclideanIntegerPoint5.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(-1,10,10,97,10,100)" + "'", str14, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint71);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(-1,10,10,97,10,100)" + "'", str80, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint84);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray7 = euclideanIntegerPoint5.getPoint();
        java.lang.Class<?> wildcardClass8 = intArray7.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        java.lang.Class<?> wildcardClass22 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray79 = euclideanIntegerPoint78.getPoint();
        java.lang.Class<?> wildcardClass80 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        int[] intArray48 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        int[] intArray56 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint57 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList59 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59, euclideanIntegerPointArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = euclideanIntegerPoint49.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59);
        int[] intArray68 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray68);
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint77 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList79 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList79, euclideanIntegerPointArray78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint69.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList79);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41, euclideanIntegerPoint61, euclideanIntegerPoint69, euclideanIntegerPoint89 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList92 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92, euclideanIntegerPointArray91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = euclideanIntegerPoint25.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = euclideanIntegerPoint5.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double98 = euclideanIntegerPoint96.distanceFrom(euclideanIntegerPoint97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint94);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint95);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint96);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        java.lang.String str18 = euclideanIntegerPoint5.toString();
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        int[] intArray49 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint50 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList52 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList52, euclideanIntegerPointArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = euclideanIntegerPoint42.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList52);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        int[] intArray69 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint70 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList72 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72, euclideanIntegerPointArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = euclideanIntegerPoint62.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72);
        int[] intArray81 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        java.lang.String str83 = euclideanIntegerPoint82.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint34, euclideanIntegerPoint54, euclideanIntegerPoint62, euclideanIntegerPoint82 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList85 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85, euclideanIntegerPointArray84);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = euclideanIntegerPoint26.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85);
        double double88 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint26);
        java.lang.Class<?> wildcardClass89 = euclideanIntegerPoint5.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(0,10,-1,100)" + "'", str18, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint74);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 11.445523142259598d + "'", double88 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        java.lang.String str18 = euclideanIntegerPoint5.toString();
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        int[] intArray49 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint50 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList52 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList52, euclideanIntegerPointArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = euclideanIntegerPoint42.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList52);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        int[] intArray69 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint70 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList72 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72, euclideanIntegerPointArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = euclideanIntegerPoint62.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72);
        int[] intArray81 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        java.lang.String str83 = euclideanIntegerPoint82.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint34, euclideanIntegerPoint54, euclideanIntegerPoint62, euclideanIntegerPoint82 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList85 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85, euclideanIntegerPointArray84);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = euclideanIntegerPoint26.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85);
        double double88 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint26);
        java.lang.Class<?> wildcardClass89 = euclideanIntegerPoint26.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(0,10,-1,100)" + "'", str18, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint74);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 11.445523142259598d + "'", double88 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        int[] intArray71 = euclideanIntegerPoint7.getPoint();
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint87 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList89 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89, euclideanIntegerPointArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint79.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        boolean boolean93 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint91);
        java.lang.String str94 = euclideanIntegerPoint91.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        int[] intArray71 = euclideanIntegerPoint7.getPoint();
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint87 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList89 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89, euclideanIntegerPointArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint79.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        boolean boolean93 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint91);
        java.lang.Class<?> wildcardClass94 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        int[] intArray19 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint53 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList55 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55, euclideanIntegerPointArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = euclideanIntegerPoint45.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint37, euclideanIntegerPoint57, euclideanIntegerPoint65, euclideanIntegerPoint85 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList88 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88, euclideanIntegerPointArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = euclideanIntegerPoint7.centroidOf(euclideanIntegerPointCollection94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = euclideanIntegerPoint10.centroidOf(euclideanIntegerPointCollection32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        double double91 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint89);
        java.lang.Class<?> wildcardClass92 = euclideanIntegerPoint68.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint10.toString();
        java.lang.String str33 = euclideanIntegerPoint10.toString();
        int[] intArray38 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray40 = euclideanIntegerPoint39.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = euclideanIntegerPoint10.distanceFrom(euclideanIntegerPoint41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(-1,10,10,97,10,100)" + "'", str33, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, -1, 100]");
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        int[] intArray70 = euclideanIntegerPoint7.getPoint();
        int[] intArray77 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray77);
        java.lang.String str79 = euclideanIntegerPoint78.toString();
        int[] intArray80 = euclideanIntegerPoint78.getPoint();
        boolean boolean82 = euclideanIntegerPoint78.equals((java.lang.Object) 1.0d);
        int[] intArray83 = euclideanIntegerPoint78.getPoint();
        java.lang.String str84 = euclideanIntegerPoint78.toString();
        boolean boolean85 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint78);
        java.lang.Class<?> wildcardClass86 = euclideanIntegerPoint78.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        java.lang.String str90 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass91 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        int[] intArray29 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint46 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList48 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48, euclideanIntegerPointArray47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = euclideanIntegerPoint38.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        java.lang.Class<?> wildcardClass53 = euclideanIntegerPoint52.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint50);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        java.lang.Class<?> wildcardClass8 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        int[] intArray29 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray35 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray37 = euclideanIntegerPoint36.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray40 = euclideanIntegerPoint39.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        boolean boolean42 = euclideanIntegerPoint30.equals((java.lang.Object) euclideanIntegerPoint41);
        double double43 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint30);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray52 = euclideanIntegerPoint51.getPoint();
        java.lang.Class<?> wildcardClass53 = euclideanIntegerPoint51.getClass();
        boolean boolean54 = euclideanIntegerPoint19.equals((java.lang.Object) euclideanIntegerPoint51);
        java.lang.String str55 = euclideanIntegerPoint51.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(-1,10,10,97,10,100)" + "'", str55, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        int[] intArray71 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.Class<?> wildcardClass73 = euclideanIntegerPoint72.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        java.lang.Class<?> wildcardClass79 = euclideanIntegerPointList75.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint39 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList41 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList41, euclideanIntegerPointArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = euclideanIntegerPoint31.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList41);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint59 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList61 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList61, euclideanIntegerPointArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint51.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList61);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        java.lang.String str72 = euclideanIntegerPoint71.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint23, euclideanIntegerPoint43, euclideanIntegerPoint51, euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint15.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray77 = euclideanIntegerPoint15.getPoint();
        java.lang.String str78 = euclideanIntegerPoint15.toString();
        java.lang.String str79 = euclideanIntegerPoint15.toString();
        boolean boolean80 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint15);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        int[] intArray89 = euclideanIntegerPoint88.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray89);
        boolean boolean91 = euclideanIntegerPoint15.equals((java.lang.Object) euclideanIntegerPoint90);
        java.lang.Class<?> wildcardClass92 = euclideanIntegerPoint90.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint43);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        boolean boolean83 = euclideanIntegerPoint68.equals((java.lang.Object) "hi!");
        java.lang.Class<?> wildcardClass84 = euclideanIntegerPoint68.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        int[] intArray90 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.Class<?> wildcardClass92 = euclideanIntegerPoint91.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        int[] intArray18 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray20 = euclideanIntegerPoint19.getPoint();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        double double30 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint29);
        int[] intArray31 = euclideanIntegerPoint19.getPoint();
        java.lang.String str32 = euclideanIntegerPoint19.toString();
        int[] intArray33 = euclideanIntegerPoint19.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            double double34 = euclideanIntegerPoint13.distanceFrom(euclideanIntegerPoint19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 11.445523142259598d + "'", double30 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(0,10,-1,100)" + "'", str32, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 10, -1, 100]");
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        java.lang.Class<?> wildcardClass91 = euclideanIntegerPoint90.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double98 = euclideanIntegerPoint96.distanceFrom(euclideanIntegerPoint97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        java.lang.Class<?> wildcardClass82 = euclideanIntegerPoint68.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        int[] intArray71 = euclideanIntegerPoint7.getPoint();
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint87 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList89 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89, euclideanIntegerPointArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint79.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        boolean boolean93 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double95 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint39 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList41 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList41, euclideanIntegerPointArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = euclideanIntegerPoint31.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList41);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint59 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList61 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList61, euclideanIntegerPointArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint51.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList61);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        java.lang.String str72 = euclideanIntegerPoint71.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint23, euclideanIntegerPoint43, euclideanIntegerPoint51, euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint15.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray77 = euclideanIntegerPoint15.getPoint();
        java.lang.String str78 = euclideanIntegerPoint15.toString();
        java.lang.String str79 = euclideanIntegerPoint15.toString();
        boolean boolean80 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint15);
        int[] intArray85 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        int[] intArray87 = euclideanIntegerPoint86.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        int[] intArray90 = euclideanIntegerPoint89.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint43);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 10, -1, 100]");
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        java.lang.Class<?> wildcardClass95 = euclideanIntegerPoint94.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.Class<?> wildcardClass32 = euclideanIntegerPointList28.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        boolean boolean19 = euclideanIntegerPoint15.equals((java.lang.Object) 1.0d);
        int[] intArray20 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        double double22 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint21);
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint54 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList56 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56, euclideanIntegerPointArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = euclideanIntegerPoint46.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint66.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray85 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        java.lang.String str87 = euclideanIntegerPoint86.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint38, euclideanIntegerPoint58, euclideanIntegerPoint66, euclideanIntegerPoint86 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList89 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89, euclideanIntegerPointArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint91);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass94 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint58);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(-1,10,10,97,10,100)" + "'", str87, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray29 = euclideanIntegerPoint28.getPoint();
        double double30 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint28);
        java.lang.Class<?> wildcardClass31 = euclideanIntegerPoint16.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        java.lang.Class<?> wildcardClass81 = euclideanIntegerPoint79.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        java.lang.Class<?> wildcardClass11 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        java.lang.String str72 = euclideanIntegerPoint7.toString();
        int[] intArray73 = euclideanIntegerPoint7.getPoint();
        int[] intArray74 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass70 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        java.lang.Class<?> wildcardClass98 = euclideanIntegerPoint97.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint59 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList61 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList61, euclideanIntegerPointArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint51.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList61);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint79 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList81 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList81, euclideanIntegerPointArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = euclideanIntegerPoint71.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList81);
        int[] intArray90 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint43, euclideanIntegerPoint63, euclideanIntegerPoint71, euclideanIntegerPoint91 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList94 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList94, euclideanIntegerPointArray93);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList94);
        boolean boolean98 = euclideanIntegerPoint18.equals((java.lang.Object) euclideanIntegerPointList94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint99 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList94);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint83);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint96);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint99);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        int[] intArray19 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint53 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList55 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55, euclideanIntegerPointArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = euclideanIntegerPoint45.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint37, euclideanIntegerPoint57, euclideanIntegerPoint65, euclideanIntegerPoint85 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList88 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88, euclideanIntegerPointArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        java.lang.Class<?> wildcardClass93 = euclideanIntegerPoint92.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        java.lang.Class<?> wildcardClass82 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray16 = euclideanIntegerPoint15.getPoint();
        java.lang.String str17 = euclideanIntegerPoint15.toString();
        boolean boolean18 = euclideanIntegerPoint7.equals((java.lang.Object) str17);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        java.lang.Class<?> wildcardClass91 = euclideanIntegerPointList87.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass10 = intArray9.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        java.lang.String str72 = euclideanIntegerPoint7.toString();
        int[] intArray73 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        java.lang.Class<?> wildcardClass75 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.Class<?> wildcardClass11 = euclideanIntegerPoint10.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        boolean boolean19 = euclideanIntegerPoint15.equals((java.lang.Object) 1.0d);
        int[] intArray20 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        double double22 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint21);
        java.lang.Class<?> wildcardClass23 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint43 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList45 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45, euclideanIntegerPointArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList65 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65, euclideanIntegerPointArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = euclideanIntegerPoint55.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        java.lang.String str76 = euclideanIntegerPoint75.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint27, euclideanIntegerPoint47, euclideanIntegerPoint55, euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList78 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78, euclideanIntegerPointArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        int[] intArray81 = euclideanIntegerPoint19.getPoint();
        int[] intArray82 = euclideanIntegerPoint19.getPoint();
        int[] intArray89 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray89);
        java.lang.String str91 = euclideanIntegerPoint90.toString();
        int[] intArray92 = euclideanIntegerPoint90.getPoint();
        boolean boolean94 = euclideanIntegerPoint90.equals((java.lang.Object) 1.0d);
        int[] intArray95 = euclideanIntegerPoint90.getPoint();
        java.lang.String str96 = euclideanIntegerPoint90.toString();
        boolean boolean97 = euclideanIntegerPoint19.equals((java.lang.Object) euclideanIntegerPoint90);
        boolean boolean98 = euclideanIntegerPoint11.equals((java.lang.Object) euclideanIntegerPoint19);
        java.lang.Class<?> wildcardClass99 = euclideanIntegerPoint19.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(-1,10,10,97,10,100)" + "'", str76, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-1,10,10,97,10,100)" + "'", str91, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(-1,10,10,97,10,100)" + "'", str96, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        java.lang.String str11 = euclideanIntegerPoint10.toString();
        int[] intArray12 = euclideanIntegerPoint10.getPoint();
        java.lang.Class<?> wildcardClass13 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(-1,10,10,97,10,100)" + "'", str11, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        int[] intArray20 = euclideanIntegerPoint16.getPoint();
        java.lang.Class<?> wildcardClass21 = euclideanIntegerPoint16.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.Class<?> wildcardClass32 = euclideanIntegerPoint10.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint39 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList41 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList41, euclideanIntegerPointArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = euclideanIntegerPoint31.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList41);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint59 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList61 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList61, euclideanIntegerPointArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint51.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList61);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        java.lang.String str72 = euclideanIntegerPoint71.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint23, euclideanIntegerPoint43, euclideanIntegerPoint51, euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint15.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray77 = euclideanIntegerPoint15.getPoint();
        java.lang.String str78 = euclideanIntegerPoint15.toString();
        java.lang.String str79 = euclideanIntegerPoint15.toString();
        boolean boolean80 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint15);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        int[] intArray89 = euclideanIntegerPoint88.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray89);
        boolean boolean91 = euclideanIntegerPoint15.equals((java.lang.Object) euclideanIntegerPoint90);
        java.lang.Class<?> wildcardClass92 = euclideanIntegerPoint15.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint43);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint42 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList44 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44, euclideanIntegerPointArray43);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = euclideanIntegerPoint34.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint62 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList64 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64, euclideanIntegerPointArray63);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = euclideanIntegerPoint54.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        java.lang.String str75 = euclideanIntegerPoint74.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26, euclideanIntegerPoint46, euclideanIntegerPoint54, euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList77 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77, euclideanIntegerPointArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        java.lang.String str81 = euclideanIntegerPoint80.toString();
        int[] intArray82 = euclideanIntegerPoint80.getPoint();
        int[] intArray87 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        int[] intArray89 = euclideanIntegerPoint88.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray89);
        int[] intArray92 = euclideanIntegerPoint91.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray92);
        boolean boolean95 = euclideanIntegerPoint93.equals((java.lang.Object) 0L);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = euclideanIntegerPoint80.distanceFrom(euclideanIntegerPoint93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(-1,10,10,97,10,100)" + "'", str75, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(-1,10,10,97,10,100)" + "'", str81, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        java.lang.String str30 = euclideanIntegerPoint29.toString();
        int[] intArray31 = euclideanIntegerPoint29.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        int[] intArray47 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint48 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList50 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList50, euclideanIntegerPointArray49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = euclideanIntegerPoint40.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList50);
        boolean boolean54 = euclideanIntegerPoint20.equals((java.lang.Object) euclideanIntegerPoint53);
        java.lang.Class<?> wildcardClass55 = euclideanIntegerPoint20.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(-1,10,10,97,10,100)" + "'", str30, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint52);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray7 = euclideanIntegerPoint6.getPoint();
        java.lang.String str8 = euclideanIntegerPoint6.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        java.lang.String str15 = euclideanIntegerPoint14.toString();
        double double16 = euclideanIntegerPoint6.distanceFrom(euclideanIntegerPoint14);
        int[] intArray17 = euclideanIntegerPoint14.getPoint();
        java.lang.Class<?> wildcardClass18 = intArray17.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0,10,-1,100)" + "'", str15, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        java.lang.String str20 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass21 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        int[] intArray89 = euclideanIntegerPoint87.getPoint();
        boolean boolean91 = euclideanIntegerPoint87.equals((java.lang.Object) 1.0d);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint87);
        java.lang.String str93 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass94 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        java.lang.String str7 = euclideanIntegerPoint5.toString();
        java.lang.Class<?> wildcardClass8 = euclideanIntegerPoint5.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(0,10,-1,100)" + "'", str7, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        java.lang.String str10 = euclideanIntegerPoint9.toString();
        int[] intArray11 = euclideanIntegerPoint9.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint12 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        int[] intArray20 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint45 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList47 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47, euclideanIntegerPointArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = euclideanIntegerPoint37.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        int[] intArray56 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint65 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList67 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67, euclideanIntegerPointArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = euclideanIntegerPoint57.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67);
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        java.lang.String str78 = euclideanIntegerPoint77.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint29, euclideanIntegerPoint49, euclideanIntegerPoint57, euclideanIntegerPoint77 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList80 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList80, euclideanIntegerPointArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList80);
        java.lang.String str83 = euclideanIntegerPoint21.toString();
        int[] intArray90 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        int[] intArray93 = euclideanIntegerPoint91.getPoint();
        boolean boolean95 = euclideanIntegerPoint91.equals((java.lang.Object) 1.0d);
        int[] intArray96 = euclideanIntegerPoint91.getPoint();
        double double97 = euclideanIntegerPoint21.distanceFrom(euclideanIntegerPoint91);
        boolean boolean98 = euclideanIntegerPoint13.equals((java.lang.Object) euclideanIntegerPoint21);
        java.lang.String str99 = euclideanIntegerPoint13.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(-1,10,10,97,10,100)" + "'", str10, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint49);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint69);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "(-1,10,10,97,10,100)" + "'", str99, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        int[] intArray14 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray16 = euclideanIntegerPoint15.getPoint();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        int[] intArray18 = euclideanIntegerPoint15.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = euclideanIntegerPoint9.distanceFrom(euclideanIntegerPoint15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 10, -1, 100]");
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray78 = euclideanIntegerPoint16.getPoint();
        java.lang.String str79 = euclideanIntegerPoint16.toString();
        java.lang.String str80 = euclideanIntegerPoint16.toString();
        int[] intArray81 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        boolean boolean83 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint82);
        java.lang.Class<?> wildcardClass84 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(-1,10,10,97,10,100)" + "'", str80, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        java.lang.String str72 = euclideanIntegerPoint7.toString();
        int[] intArray73 = euclideanIntegerPoint7.getPoint();
        int[] intArray74 = euclideanIntegerPoint7.getPoint();
        int[] intArray79 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray81 = euclideanIntegerPoint80.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        boolean boolean83 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint82);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray7 = euclideanIntegerPoint5.getPoint();
        int[] intArray8 = euclideanIntegerPoint5.getPoint();
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        int[] intArray18 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList37 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37, euclideanIntegerPointArray36);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = euclideanIntegerPoint5.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        java.lang.Class<?> wildcardClass42 = euclideanIntegerPoint5.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint39);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint40);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray7 = euclideanIntegerPoint5.getPoint();
        java.lang.String str8 = euclideanIntegerPoint5.toString();
        java.lang.Class<?> wildcardClass9 = euclideanIntegerPoint5.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        java.lang.String str81 = euclideanIntegerPoint79.toString();
        java.lang.Class<?> wildcardClass82 = euclideanIntegerPoint79.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(-1,10,10,97,10,100)" + "'", str81, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        int[] intArray13 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass14 = intArray13.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray28 = euclideanIntegerPoint27.getPoint();
        boolean boolean30 = euclideanIntegerPoint27.equals((java.lang.Object) (short) 10);
        double double31 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint27);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint47 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList49 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49, euclideanIntegerPointArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint39.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49);
        java.lang.Class<?> wildcardClass53 = euclideanIntegerPoint27.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 11.445523142259598d + "'", double31 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        boolean boolean19 = euclideanIntegerPoint15.equals((java.lang.Object) 1.0d);
        int[] intArray20 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        double double22 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint21);
        java.lang.Class<?> wildcardClass23 = euclideanIntegerPoint21.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        java.lang.Class<?> wildcardClass11 = intArray9.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray7 = euclideanIntegerPoint5.getPoint();
        java.lang.Class<?> wildcardClass8 = euclideanIntegerPoint5.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        int[] intArray26 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray28 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        boolean boolean33 = euclideanIntegerPoint20.equals((java.lang.Object) euclideanIntegerPoint32);
        int[] intArray34 = euclideanIntegerPoint32.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        java.lang.String str44 = euclideanIntegerPoint43.toString();
        int[] intArray45 = euclideanIntegerPoint43.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint62 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList64 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64, euclideanIntegerPointArray63);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = euclideanIntegerPoint54.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = euclideanIntegerPoint46.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        int[] intArray69 = euclideanIntegerPoint68.getPoint();
        java.lang.String str70 = euclideanIntegerPoint68.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(-1,10,10,97,10,100)" + "'", str44, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint66);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint67);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97)" + "'", str70, "(-1,10,10,97)");
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray12 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        boolean boolean14 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint13);
        java.lang.Class<?> wildcardClass15 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        int[] intArray78 = euclideanIntegerPoint77.getPoint();
        java.lang.String str79 = euclideanIntegerPoint77.toString();
        int[] intArray80 = euclideanIntegerPoint77.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        int[] intArray90 = euclideanIntegerPoint89.getPoint();
        java.lang.String str91 = euclideanIntegerPoint89.toString();
        int[] intArray92 = euclideanIntegerPoint89.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray92);
        boolean boolean94 = euclideanIntegerPoint81.equals((java.lang.Object) intArray92);
        boolean boolean95 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint81);
        java.lang.Class<?> wildcardClass96 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-1,10,10,97,10,100)" + "'", str91, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.String str19 = euclideanIntegerPoint18.toString();
        int[] intArray20 = euclideanIntegerPoint18.getPoint();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        java.lang.Class<?> wildcardClass93 = euclideanIntegerPoint91.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        int[] intArray6 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.Class<?> wildcardClass9 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray7 = euclideanIntegerPoint5.getPoint();
        int[] intArray8 = euclideanIntegerPoint5.getPoint();
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        int[] intArray18 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList37 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37, euclideanIntegerPointArray36);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = euclideanIntegerPoint5.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = euclideanIntegerPoint5.centroidOf(euclideanIntegerPointCollection42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint39);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint40);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint41);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        java.lang.Class<?> wildcardClass96 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        int[] intArray26 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray28 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        boolean boolean33 = euclideanIntegerPoint20.equals((java.lang.Object) euclideanIntegerPoint32);
        int[] intArray34 = euclideanIntegerPoint32.getPoint();
        java.lang.Class<?> wildcardClass35 = euclideanIntegerPoint32.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint31.toString();
        int[] intArray33 = euclideanIntegerPoint31.getPoint();
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        java.lang.String str42 = euclideanIntegerPoint41.toString();
        int[] intArray43 = euclideanIntegerPoint41.getPoint();
        boolean boolean45 = euclideanIntegerPoint41.equals((java.lang.Object) 1.0d);
        int[] intArray46 = euclideanIntegerPoint41.getPoint();
        java.lang.String str47 = euclideanIntegerPoint41.toString();
        double double48 = euclideanIntegerPoint31.distanceFrom(euclideanIntegerPoint41);
        int[] intArray49 = euclideanIntegerPoint31.getPoint();
        java.lang.Class<?> wildcardClass50 = euclideanIntegerPoint31.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(-1,10,10,97,10,100)" + "'", str42, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(-1,10,10,97,10,100)" + "'", str47, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        int[] intArray96 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray12 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        boolean boolean14 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint13);
        int[] intArray19 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray21 = euclideanIntegerPoint20.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint22 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray21);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray21);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint55 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList57 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList57, euclideanIntegerPointArray56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = euclideanIntegerPoint47.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList57);
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList77 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77, euclideanIntegerPointArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint67.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint39, euclideanIntegerPoint59, euclideanIntegerPoint67, euclideanIntegerPoint87 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList90 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90, euclideanIntegerPointArray89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint31.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        int[] intArray93 = euclideanIntegerPoint31.getPoint();
        java.lang.String str94 = euclideanIntegerPoint31.toString();
        java.lang.String str95 = euclideanIntegerPoint31.toString();
        int[] intArray96 = euclideanIntegerPoint31.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        boolean boolean98 = euclideanIntegerPoint23.equals((java.lang.Object) euclideanIntegerPoint97);
        double double99 = euclideanIntegerPoint13.distanceFrom(euclideanIntegerPoint23);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint59);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(-1,10,10,97,10,100)" + "'", str95, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.0d + "'", double99 == 0.0d);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        java.lang.String str71 = euclideanIntegerPoint7.toString();
        java.lang.String str72 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass73 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(-1,10,10,97,10,100)" + "'", str71, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        java.lang.String str72 = euclideanIntegerPoint7.toString();
        int[] intArray73 = euclideanIntegerPoint7.getPoint();
        int[] intArray74 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass75 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray29 = euclideanIntegerPoint28.getPoint();
        double double30 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint28);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray46 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray48 = euclideanIntegerPoint47.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        java.lang.Class<?> wildcardClass52 = intArray48.getClass();
        boolean boolean53 = euclideanIntegerPoint41.equals((java.lang.Object) intArray48);
        double double54 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint41);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint16.centroidOf(euclideanIntegerPointCollection55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        boolean boolean19 = euclideanIntegerPoint15.equals((java.lang.Object) 1.0d);
        int[] intArray20 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        double double22 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint21);
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint54 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList56 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56, euclideanIntegerPointArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = euclideanIntegerPoint46.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint66.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray85 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        java.lang.String str87 = euclideanIntegerPoint86.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint38, euclideanIntegerPoint58, euclideanIntegerPoint66, euclideanIntegerPoint86 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList89 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89, euclideanIntegerPointArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint91);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint58);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(-1,10,10,97,10,100)" + "'", str87, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        java.lang.String str83 = euclideanIntegerPoint82.toString();
        int[] intArray90 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        int[] intArray93 = euclideanIntegerPoint91.getPoint();
        java.lang.String str94 = euclideanIntegerPoint91.toString();
        boolean boolean95 = euclideanIntegerPoint82.equals((java.lang.Object) euclideanIntegerPoint91);
        java.lang.Class<?> wildcardClass96 = euclideanIntegerPoint91.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        java.lang.String str78 = euclideanIntegerPoint16.toString();
        int[] intArray85 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        java.lang.String str87 = euclideanIntegerPoint86.toString();
        int[] intArray88 = euclideanIntegerPoint86.getPoint();
        boolean boolean90 = euclideanIntegerPoint86.equals((java.lang.Object) 1.0d);
        int[] intArray91 = euclideanIntegerPoint86.getPoint();
        double double92 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint86);
        java.lang.String str93 = euclideanIntegerPoint16.toString();
        double double94 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint16);
        java.lang.Class<?> wildcardClass95 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(-1,10,10,97,10,100)" + "'", str87, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray20 = euclideanIntegerPoint19.getPoint();
        java.lang.String str21 = euclideanIntegerPoint19.toString();
        int[] intArray22 = euclideanIntegerPoint19.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        boolean boolean24 = euclideanIntegerPoint11.equals((java.lang.Object) intArray22);
        java.lang.Class<?> wildcardClass25 = euclideanIntegerPoint11.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(-1,10,10,97,10,100)" + "'", str21, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.Class<?> wildcardClass19 = intArray17.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint42 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList44 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44, euclideanIntegerPointArray43);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = euclideanIntegerPoint34.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint62 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList64 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64, euclideanIntegerPointArray63);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = euclideanIntegerPoint54.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        java.lang.String str75 = euclideanIntegerPoint74.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26, euclideanIntegerPoint46, euclideanIntegerPoint54, euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList77 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77, euclideanIntegerPointArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        java.lang.Class<?> wildcardClass81 = euclideanIntegerPointList77.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(-1,10,10,97,10,100)" + "'", str75, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint31.toString();
        int[] intArray33 = euclideanIntegerPoint31.getPoint();
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        java.lang.String str42 = euclideanIntegerPoint41.toString();
        int[] intArray43 = euclideanIntegerPoint41.getPoint();
        boolean boolean45 = euclideanIntegerPoint41.equals((java.lang.Object) 1.0d);
        int[] intArray46 = euclideanIntegerPoint41.getPoint();
        java.lang.String str47 = euclideanIntegerPoint41.toString();
        double double48 = euclideanIntegerPoint31.distanceFrom(euclideanIntegerPoint41);
        int[] intArray49 = euclideanIntegerPoint31.getPoint();
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint31.centroidOf(euclideanIntegerPointCollection50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(-1,10,10,97,10,100)" + "'", str42, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(-1,10,10,97,10,100)" + "'", str47, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        double double27 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint26);
        int[] intArray28 = euclideanIntegerPoint16.getPoint();
        java.lang.String str29 = euclideanIntegerPoint16.toString();
        int[] intArray30 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 11.445523142259598d + "'", double27 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(0,10,-1,100)" + "'", str29, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 10, -1, 100]");
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        int[] intArray90 = euclideanIntegerPoint89.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.Class<?> wildcardClass92 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        int[] intArray96 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        int[] intArray98 = euclideanIntegerPoint97.getPoint();
        java.lang.Class<?> wildcardClass99 = euclideanIntegerPoint97.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        int[] intArray20 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray39 = euclideanIntegerPoint38.getPoint();
        java.lang.String str40 = euclideanIntegerPoint38.toString();
        int[] intArray41 = euclideanIntegerPoint38.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        boolean boolean43 = euclideanIntegerPoint30.equals((java.lang.Object) euclideanIntegerPoint42);
        int[] intArray48 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        int[] intArray50 = euclideanIntegerPoint49.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        boolean boolean55 = euclideanIntegerPoint42.equals((java.lang.Object) euclideanIntegerPoint54);
        int[] intArray56 = euclideanIntegerPoint54.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        java.lang.String str66 = euclideanIntegerPoint65.toString();
        int[] intArray67 = euclideanIntegerPoint65.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray67);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint76.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint68.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint57.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        java.lang.Class<?> wildcardClass92 = euclideanIntegerPoint21.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(-1,10,10,97,10,100)" + "'", str40, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(-1,10,10,97,10,100)" + "'", str66, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray78 = euclideanIntegerPoint16.getPoint();
        java.lang.String str79 = euclideanIntegerPoint16.toString();
        java.lang.String str80 = euclideanIntegerPoint16.toString();
        int[] intArray81 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        boolean boolean83 = euclideanIntegerPoint8.equals((java.lang.Object) intArray81);
        java.lang.Class<?> wildcardClass84 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(-1,10,10,97,10,100)" + "'", str80, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        int[] intArray82 = euclideanIntegerPoint76.getPoint();
        java.lang.Class<?> wildcardClass83 = euclideanIntegerPoint76.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint42 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList44 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44, euclideanIntegerPointArray43);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = euclideanIntegerPoint34.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint62 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList64 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64, euclideanIntegerPointArray63);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = euclideanIntegerPoint54.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        java.lang.String str75 = euclideanIntegerPoint74.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26, euclideanIntegerPoint46, euclideanIntegerPoint54, euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList77 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77, euclideanIntegerPointArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        java.lang.String str81 = euclideanIntegerPoint80.toString();
        int[] intArray82 = euclideanIntegerPoint80.getPoint();
        java.lang.Class<?> wildcardClass83 = euclideanIntegerPoint80.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(-1,10,10,97,10,100)" + "'", str75, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(-1,10,10,97,10,100)" + "'", str81, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList26 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26, euclideanIntegerPointArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26);
        int[] intArray34 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray36 = euclideanIntegerPoint35.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray39 = euclideanIntegerPoint38.getPoint();
        java.lang.String str40 = euclideanIntegerPoint38.toString();
        java.lang.String str41 = euclideanIntegerPoint38.toString();
        boolean boolean42 = euclideanIntegerPoint8.equals((java.lang.Object) str41);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint28);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(0,10,-1,100)" + "'", str40, "(0,10,-1,100)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(0,10,-1,100)" + "'", str41, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        java.lang.Class<?> wildcardClass20 = euclideanIntegerPoint16.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        double double91 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint89);
        int[] intArray92 = euclideanIntegerPoint68.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray92);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray16 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        boolean boolean21 = euclideanIntegerPoint9.equals((java.lang.Object) intArray16);
        java.lang.Class<?> wildcardClass22 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        java.lang.Class<?> wildcardClass10 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint43 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList45 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45, euclideanIntegerPointArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList65 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65, euclideanIntegerPointArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = euclideanIntegerPoint55.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        java.lang.String str76 = euclideanIntegerPoint75.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint27, euclideanIntegerPoint47, euclideanIntegerPoint55, euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList78 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78, euclideanIntegerPointArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint11.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        boolean boolean93 = euclideanIntegerPoint89.equals((java.lang.Object) 1.0d);
        java.lang.String str94 = euclideanIntegerPoint89.toString();
        double double95 = euclideanIntegerPoint81.distanceFrom(euclideanIntegerPoint89);
        java.lang.Class<?> wildcardClass96 = euclideanIntegerPoint81.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(-1,10,10,97,10,100)" + "'", str76, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        int[] intArray48 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        int[] intArray56 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint57 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList59 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59, euclideanIntegerPointArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = euclideanIntegerPoint49.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59);
        int[] intArray68 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray68);
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint77 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList79 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList79, euclideanIntegerPointArray78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint69.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList79);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41, euclideanIntegerPoint61, euclideanIntegerPoint69, euclideanIntegerPoint89 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList92 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92, euclideanIntegerPointArray91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = euclideanIntegerPoint25.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = euclideanIntegerPoint5.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92);
        int[] intArray97 = euclideanIntegerPoint5.getPoint();
        java.lang.String str98 = euclideanIntegerPoint5.toString();
        java.lang.Class<?> wildcardClass99 = euclideanIntegerPoint5.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint94);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint95);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint96);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "(0,10,-1,100)" + "'", str98, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint31.toString();
        int[] intArray33 = euclideanIntegerPoint31.getPoint();
        java.lang.Class<?> wildcardClass34 = intArray33.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        int[] intArray20 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray26 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray29 = euclideanIntegerPoint28.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            double double30 = euclideanIntegerPoint21.distanceFrom(euclideanIntegerPoint28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 10, -1, 100]");
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        boolean boolean83 = euclideanIntegerPoint7.equals((java.lang.Object) intArray80);
        java.lang.String str84 = euclideanIntegerPoint7.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        double double91 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint89);
        boolean boolean93 = euclideanIntegerPoint89.equals((java.lang.Object) (byte) 1);
        java.lang.Class<?> wildcardClass94 = euclideanIntegerPoint89.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        boolean boolean19 = euclideanIntegerPoint15.equals((java.lang.Object) 1.0d);
        int[] intArray20 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        double double22 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint21);
        java.lang.String str23 = euclideanIntegerPoint7.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(-1,10,10,97,10,100)" + "'", str23, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray10 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray12 = euclideanIntegerPoint11.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        double double14 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint13);
        java.lang.Class<?> wildcardClass15 = euclideanIntegerPoint13.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        int[] intArray90 = euclideanIntegerPoint89.getPoint();
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        java.lang.String str83 = euclideanIntegerPoint82.toString();
        int[] intArray90 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        int[] intArray93 = euclideanIntegerPoint91.getPoint();
        java.lang.String str94 = euclideanIntegerPoint91.toString();
        boolean boolean95 = euclideanIntegerPoint82.equals((java.lang.Object) euclideanIntegerPoint91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double97 = euclideanIntegerPoint82.distanceFrom(euclideanIntegerPoint96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint43 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList45 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45, euclideanIntegerPointArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList65 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65, euclideanIntegerPointArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = euclideanIntegerPoint55.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        java.lang.String str76 = euclideanIntegerPoint75.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint27, euclideanIntegerPoint47, euclideanIntegerPoint55, euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList78 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78, euclideanIntegerPointArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint11.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        boolean boolean93 = euclideanIntegerPoint89.equals((java.lang.Object) 1.0d);
        java.lang.String str94 = euclideanIntegerPoint89.toString();
        double double95 = euclideanIntegerPoint81.distanceFrom(euclideanIntegerPoint89);
        java.lang.Class<?> wildcardClass96 = euclideanIntegerPoint89.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(-1,10,10,97,10,100)" + "'", str76, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        int[] intArray89 = euclideanIntegerPoint87.getPoint();
        boolean boolean91 = euclideanIntegerPoint87.equals((java.lang.Object) 1.0d);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint87);
        java.lang.String str93 = euclideanIntegerPoint7.toString();
        int[] intArray94 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray94);
        java.lang.Class<?> wildcardClass96 = euclideanIntegerPoint95.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray7 = euclideanIntegerPoint6.getPoint();
        java.lang.String str8 = euclideanIntegerPoint6.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        java.lang.String str15 = euclideanIntegerPoint14.toString();
        double double16 = euclideanIntegerPoint6.distanceFrom(euclideanIntegerPoint14);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = euclideanIntegerPoint6.centroidOf(euclideanIntegerPointCollection17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0,10,-1,100)" + "'", str15, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray28 = euclideanIntegerPoint27.getPoint();
        boolean boolean30 = euclideanIntegerPoint27.equals((java.lang.Object) (short) 10);
        double double31 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint27);
        java.lang.Class<?> wildcardClass32 = euclideanIntegerPoint27.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 11.445523142259598d + "'", double31 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint10.toString();
        java.lang.String str33 = euclideanIntegerPoint10.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double35 = euclideanIntegerPoint10.distanceFrom(euclideanIntegerPoint34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(-1,10,10,97,10,100)" + "'", str33, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        java.lang.String str71 = euclideanIntegerPoint7.toString();
        int[] intArray72 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        int[] intArray80 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        java.lang.String str82 = euclideanIntegerPoint81.toString();
        int[] intArray83 = euclideanIntegerPoint81.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        int[] intArray89 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray89);
        int[] intArray91 = euclideanIntegerPoint90.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        int[] intArray94 = euclideanIntegerPoint93.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray94);
        boolean boolean96 = euclideanIntegerPoint84.equals((java.lang.Object) euclideanIntegerPoint95);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = euclideanIntegerPoint73.distanceFrom(euclideanIntegerPoint95);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(-1,10,10,97,10,100)" + "'", str71, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(-1,10,10,97,10,100)" + "'", str82, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        boolean boolean83 = euclideanIntegerPoint7.equals((java.lang.Object) intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        boolean boolean83 = euclideanIntegerPoint7.equals((java.lang.Object) 100.0f);
        int[] intArray84 = euclideanIntegerPoint7.getPoint();
        java.lang.String str85 = euclideanIntegerPoint7.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        java.lang.String str20 = euclideanIntegerPoint19.toString();
        int[] intArray21 = euclideanIntegerPoint19.getPoint();
        int[] intArray22 = euclideanIntegerPoint19.getPoint();
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        java.lang.String str39 = euclideanIntegerPoint38.toString();
        int[] intArray40 = euclideanIntegerPoint38.getPoint();
        boolean boolean42 = euclideanIntegerPoint38.equals((java.lang.Object) 1.0d);
        int[] intArray43 = euclideanIntegerPoint38.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        double double45 = euclideanIntegerPoint30.distanceFrom(euclideanIntegerPoint44);
        boolean boolean46 = euclideanIntegerPoint19.equals((java.lang.Object) euclideanIntegerPoint30);
        boolean boolean47 = euclideanIntegerPoint11.equals((java.lang.Object) euclideanIntegerPoint30);
        java.lang.Class<?> wildcardClass48 = euclideanIntegerPoint11.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        java.lang.Class<?> wildcardClass14 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        int[] intArray81 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        int[] intArray84 = euclideanIntegerPoint83.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        int[] intArray87 = euclideanIntegerPoint85.getPoint();
        java.lang.String str88 = euclideanIntegerPoint85.toString();
        java.lang.String str89 = euclideanIntegerPoint85.toString();
        double double90 = euclideanIntegerPoint74.distanceFrom(euclideanIntegerPoint85);
        java.lang.String str91 = euclideanIntegerPoint85.toString();
        java.lang.String str92 = euclideanIntegerPoint85.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(-1,10,10,97,10,100)" + "'", str89, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-1,10,10,97,10,100)" + "'", str91, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        java.lang.String str10 = euclideanIntegerPoint9.toString();
        int[] intArray11 = euclideanIntegerPoint9.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint12 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        java.lang.Class<?> wildcardClass14 = euclideanIntegerPoint13.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(-1,10,10,97,10,100)" + "'", str10, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray7 = euclideanIntegerPoint6.getPoint();
        java.lang.String str8 = euclideanIntegerPoint6.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        java.lang.String str15 = euclideanIntegerPoint14.toString();
        double double16 = euclideanIntegerPoint6.distanceFrom(euclideanIntegerPoint14);
        int[] intArray17 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.Class<?> wildcardClass19 = intArray17.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0,10,-1,100)" + "'", str15, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray79 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint88 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList90 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90, euclideanIntegerPointArray89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint80.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = euclideanIntegerPoint72.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        java.lang.Class<?> wildcardClass94 = euclideanIntegerPoint93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray7 = euclideanIntegerPoint6.getPoint();
        java.lang.String str8 = euclideanIntegerPoint6.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        java.lang.String str15 = euclideanIntegerPoint14.toString();
        double double16 = euclideanIntegerPoint6.distanceFrom(euclideanIntegerPoint14);
        int[] intArray17 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.String str19 = euclideanIntegerPoint18.toString();
        java.lang.Class<?> wildcardClass20 = euclideanIntegerPoint18.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0,10,-1,100)" + "'", str15, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0,10,-1,100)" + "'", str19, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        java.lang.Class<?> wildcardClass20 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint31.toString();
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        java.lang.String str41 = euclideanIntegerPoint40.toString();
        int[] intArray42 = euclideanIntegerPoint40.getPoint();
        boolean boolean44 = euclideanIntegerPoint40.equals((java.lang.Object) 1.0d);
        int[] intArray45 = euclideanIntegerPoint40.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        double double47 = euclideanIntegerPoint31.distanceFrom(euclideanIntegerPoint46);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        java.lang.String str56 = euclideanIntegerPoint55.toString();
        double double57 = euclideanIntegerPoint46.distanceFrom(euclideanIntegerPoint55);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = euclideanIntegerPoint46.centroidOf(euclideanIntegerPointCollection58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(-1,10,10,97,10,100)" + "'", str41, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(-1,10,10,97,10,100)" + "'", str56, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray24 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray26 = euclideanIntegerPoint25.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        java.lang.String str37 = euclideanIntegerPoint36.toString();
        double double38 = euclideanIntegerPoint28.distanceFrom(euclideanIntegerPoint36);
        boolean boolean39 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint36);
        int[] intArray44 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray46 = euclideanIntegerPoint45.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        java.lang.String str57 = euclideanIntegerPoint56.toString();
        double double58 = euclideanIntegerPoint48.distanceFrom(euclideanIntegerPoint56);
        int[] intArray59 = euclideanIntegerPoint56.getPoint();
        boolean boolean60 = euclideanIntegerPoint36.equals((java.lang.Object) intArray59);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(-1,10,10,97,10,100)" + "'", str37, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 11.445523142259598d + "'", double38 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(-1,10,10,97,10,100)" + "'", str57, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 11.445523142259598d + "'", double58 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        java.lang.String str20 = euclideanIntegerPoint16.toString();
        int[] intArray25 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray27 = euclideanIntegerPoint26.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray30 = euclideanIntegerPoint29.getPoint();
        java.lang.String str31 = euclideanIntegerPoint29.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double32 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0,10,-1,100)" + "'", str31, "(0,10,-1,100)");
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        java.lang.String str78 = euclideanIntegerPoint16.toString();
        int[] intArray85 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        java.lang.String str87 = euclideanIntegerPoint86.toString();
        int[] intArray88 = euclideanIntegerPoint86.getPoint();
        boolean boolean90 = euclideanIntegerPoint86.equals((java.lang.Object) 1.0d);
        int[] intArray91 = euclideanIntegerPoint86.getPoint();
        double double92 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint86);
        java.lang.String str93 = euclideanIntegerPoint16.toString();
        double double94 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str95 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass96 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(-1,10,10,97,10,100)" + "'", str87, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(-1,10,10,97,10,100)" + "'", str95, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint39 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList41 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList41, euclideanIntegerPointArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = euclideanIntegerPoint31.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList41);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint59 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList61 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList61, euclideanIntegerPointArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint51.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList61);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        java.lang.String str72 = euclideanIntegerPoint71.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint23, euclideanIntegerPoint43, euclideanIntegerPoint51, euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint15.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray77 = euclideanIntegerPoint15.getPoint();
        java.lang.String str78 = euclideanIntegerPoint15.toString();
        java.lang.String str79 = euclideanIntegerPoint15.toString();
        boolean boolean80 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint15);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        int[] intArray90 = euclideanIntegerPoint89.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        int[] intArray93 = euclideanIntegerPoint91.getPoint();
        double double94 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint91);
        java.lang.Class<?> wildcardClass95 = euclideanIntegerPoint91.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint43);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray7 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray7);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        int[] intArray87 = euclideanIntegerPoint85.getPoint();
        boolean boolean89 = euclideanIntegerPoint85.equals((java.lang.Object) 1.0d);
        double double90 = euclideanIntegerPoint77.distanceFrom(euclideanIntegerPoint85);
        java.lang.String str91 = euclideanIntegerPoint77.toString();
        boolean boolean92 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint77);
        int[] intArray93 = euclideanIntegerPoint8.getPoint();
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-1,10,10,97,10,100)" + "'", str91, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass72 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        java.lang.Class<?> wildcardClass74 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray24 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray26 = euclideanIntegerPoint25.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        java.lang.String str37 = euclideanIntegerPoint36.toString();
        double double38 = euclideanIntegerPoint28.distanceFrom(euclideanIntegerPoint36);
        boolean boolean39 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint36);
        int[] intArray44 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray46 = euclideanIntegerPoint45.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        java.lang.String str57 = euclideanIntegerPoint56.toString();
        double double58 = euclideanIntegerPoint48.distanceFrom(euclideanIntegerPoint56);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        int[] intArray68 = euclideanIntegerPoint67.getPoint();
        boolean boolean70 = euclideanIntegerPoint67.equals((java.lang.Object) (short) 10);
        double double71 = euclideanIntegerPoint48.distanceFrom(euclideanIntegerPoint67);
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint87 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList89 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89, euclideanIntegerPointArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint79.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint67.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89);
        double double93 = euclideanIntegerPoint36.distanceFrom(euclideanIntegerPoint67);
        java.lang.String str94 = euclideanIntegerPoint36.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(-1,10,10,97,10,100)" + "'", str37, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 11.445523142259598d + "'", double38 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(-1,10,10,97,10,100)" + "'", str57, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 11.445523142259598d + "'", double58 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 11.445523142259598d + "'", double71 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        int[] intArray89 = euclideanIntegerPoint87.getPoint();
        boolean boolean91 = euclideanIntegerPoint87.equals((java.lang.Object) 1.0d);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint87);
        java.lang.String str93 = euclideanIntegerPoint87.toString();
        int[] intArray94 = euclideanIntegerPoint87.getPoint();
        int[] intArray95 = euclideanIntegerPoint87.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray22 = euclideanIntegerPoint21.getPoint();
        java.lang.String str23 = euclideanIntegerPoint21.toString();
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint55 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList57 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList57, euclideanIntegerPointArray56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = euclideanIntegerPoint47.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList57);
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList77 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77, euclideanIntegerPointArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint67.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint39, euclideanIntegerPoint59, euclideanIntegerPoint67, euclideanIntegerPoint87 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList90 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90, euclideanIntegerPointArray89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint31.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        int[] intArray93 = euclideanIntegerPoint31.getPoint();
        java.lang.String str94 = euclideanIntegerPoint31.toString();
        int[] intArray95 = euclideanIntegerPoint31.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        int[] intArray97 = euclideanIntegerPoint96.getPoint();
        int[] intArray98 = euclideanIntegerPoint96.getPoint();
        boolean boolean99 = euclideanIntegerPoint21.equals((java.lang.Object) euclideanIntegerPoint96);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(-1,10,10,97,10,100)" + "'", str23, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint59);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray29 = euclideanIntegerPoint28.getPoint();
        double double30 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint28);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray46 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray48 = euclideanIntegerPoint47.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        java.lang.Class<?> wildcardClass52 = intArray48.getClass();
        boolean boolean53 = euclideanIntegerPoint41.equals((java.lang.Object) intArray48);
        double double54 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint41);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        int[] intArray69 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint70 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList72 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72, euclideanIntegerPointArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = euclideanIntegerPoint62.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72);
        int[] intArray75 = euclideanIntegerPoint62.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        boolean boolean77 = euclideanIntegerPoint41.equals((java.lang.Object) euclideanIntegerPoint76);
        java.lang.String str78 = euclideanIntegerPoint76.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        int[] intArray96 = euclideanIntegerPoint7.getPoint();
        int[] intArray97 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass98 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray79 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint88 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList90 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90, euclideanIntegerPointArray89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint80.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = euclideanIntegerPoint72.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        java.lang.String str94 = euclideanIntegerPoint72.toString();
        java.lang.String str95 = euclideanIntegerPoint72.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(-1,10,10,97,10,100)" + "'", str95, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray22 = euclideanIntegerPoint21.getPoint();
        int[] intArray23 = euclideanIntegerPoint21.getPoint();
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint55 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList57 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList57, euclideanIntegerPointArray56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = euclideanIntegerPoint47.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList57);
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList77 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77, euclideanIntegerPointArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint67.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint39, euclideanIntegerPoint59, euclideanIntegerPoint67, euclideanIntegerPoint87 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList90 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90, euclideanIntegerPointArray89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint31.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        int[] intArray93 = euclideanIntegerPoint31.getPoint();
        java.lang.String str94 = euclideanIntegerPoint31.toString();
        int[] intArray95 = euclideanIntegerPoint31.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        int[] intArray97 = euclideanIntegerPoint96.getPoint();
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        boolean boolean99 = euclideanIntegerPoint21.equals((java.lang.Object) wildcardClass98);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint59);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        int[] intArray12 = euclideanIntegerPoint11.getPoint();
        java.lang.Class<?> wildcardClass13 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.Class<?> wildcardClass69 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        int[] intArray95 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        java.lang.Class<?> wildcardClass97 = intArray95.getClass();
        boolean boolean98 = euclideanIntegerPoint90.equals((java.lang.Object) intArray95);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray22 = euclideanIntegerPoint21.getPoint();
        java.lang.Class<?> wildcardClass23 = euclideanIntegerPoint21.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint43 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList45 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45, euclideanIntegerPointArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList65 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65, euclideanIntegerPointArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = euclideanIntegerPoint55.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        java.lang.String str76 = euclideanIntegerPoint75.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint27, euclideanIntegerPoint47, euclideanIntegerPoint55, euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList78 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78, euclideanIntegerPointArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint11.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        boolean boolean93 = euclideanIntegerPoint89.equals((java.lang.Object) 1.0d);
        java.lang.String str94 = euclideanIntegerPoint89.toString();
        double double95 = euclideanIntegerPoint81.distanceFrom(euclideanIntegerPoint89);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = euclideanIntegerPoint89.centroidOf(euclideanIntegerPointCollection96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(-1,10,10,97,10,100)" + "'", str76, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        int[] intArray89 = euclideanIntegerPoint87.getPoint();
        boolean boolean91 = euclideanIntegerPoint87.equals((java.lang.Object) 1.0d);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint87);
        java.lang.String str93 = euclideanIntegerPoint87.toString();
        int[] intArray94 = euclideanIntegerPoint87.getPoint();
        java.lang.Class<?> wildcardClass95 = euclideanIntegerPoint87.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        java.lang.String str71 = euclideanIntegerPoint7.toString();
        java.lang.String str72 = euclideanIntegerPoint7.toString();
        int[] intArray73 = euclideanIntegerPoint7.getPoint();
        int[] intArray78 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        double double90 = euclideanIntegerPoint79.distanceFrom(euclideanIntegerPoint89);
        int[] intArray91 = euclideanIntegerPoint79.getPoint();
        java.lang.String str92 = euclideanIntegerPoint79.toString();
        int[] intArray93 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        java.lang.String str95 = euclideanIntegerPoint94.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double96 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint94);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(-1,10,10,97,10,100)" + "'", str71, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 11.445523142259598d + "'", double90 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(0,10,-1,100)" + "'", str92, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(0,10,-1,100)" + "'", str95, "(0,10,-1,100)");
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        java.lang.Class<?> wildcardClass12 = euclideanIntegerPoint11.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray78 = euclideanIntegerPoint16.getPoint();
        boolean boolean79 = euclideanIntegerPoint7.equals((java.lang.Object) intArray78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        java.lang.Class<?> wildcardClass81 = euclideanIntegerPoint80.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.Class<?> wildcardClass21 = intArray17.getClass();
        boolean boolean22 = euclideanIntegerPoint10.equals((java.lang.Object) intArray17);
        java.lang.String str23 = euclideanIntegerPoint10.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(-1,10,10,97,10,100)" + "'", str23, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        java.lang.String str78 = euclideanIntegerPoint77.toString();
        int[] intArray79 = euclideanIntegerPoint77.getPoint();
        boolean boolean81 = euclideanIntegerPoint77.equals((java.lang.Object) 1.0d);
        int[] intArray82 = euclideanIntegerPoint77.getPoint();
        double double83 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint77);
        java.lang.String str84 = euclideanIntegerPoint77.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        int[] intArray29 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray35 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray37 = euclideanIntegerPoint36.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray40 = euclideanIntegerPoint39.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        boolean boolean42 = euclideanIntegerPoint30.equals((java.lang.Object) euclideanIntegerPoint41);
        double double43 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint30);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray52 = euclideanIntegerPoint51.getPoint();
        java.lang.Class<?> wildcardClass53 = euclideanIntegerPoint51.getClass();
        boolean boolean54 = euclideanIntegerPoint19.equals((java.lang.Object) euclideanIntegerPoint51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double56 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray22 = euclideanIntegerPoint21.getPoint();
        int[] intArray23 = euclideanIntegerPoint21.getPoint();
        int[] intArray24 = euclideanIntegerPoint21.getPoint();
        java.lang.Class<?> wildcardClass25 = euclideanIntegerPoint21.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray7 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray7);
        java.lang.String str9 = euclideanIntegerPoint8.toString();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        java.lang.String str79 = euclideanIntegerPoint17.toString();
        boolean boolean81 = euclideanIntegerPoint17.equals((java.lang.Object) (-1));
        java.lang.String str82 = euclideanIntegerPoint17.toString();
        int[] intArray83 = euclideanIntegerPoint17.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        boolean boolean85 = euclideanIntegerPoint8.equals((java.lang.Object) intArray83);
        java.lang.Class<?> wildcardClass86 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(0,10,-1,100)" + "'", str9, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(-1,10,10,97,10,100)" + "'", str82, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        java.lang.String str10 = euclideanIntegerPoint9.toString();
        int[] intArray11 = euclideanIntegerPoint9.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint12 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        java.lang.String str14 = euclideanIntegerPoint13.toString();
        int[] intArray21 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint22 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray21);
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint46 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList48 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48, euclideanIntegerPointArray47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = euclideanIntegerPoint38.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        int[] intArray57 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint66 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList68 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68, euclideanIntegerPointArray67);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = euclideanIntegerPoint58.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        int[] intArray77 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray77);
        java.lang.String str79 = euclideanIntegerPoint78.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint30, euclideanIntegerPoint50, euclideanIntegerPoint58, euclideanIntegerPoint78 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList81 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList81, euclideanIntegerPointArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = euclideanIntegerPoint22.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList81);
        int[] intArray84 = euclideanIntegerPoint22.getPoint();
        java.lang.String str85 = euclideanIntegerPoint22.toString();
        double double86 = euclideanIntegerPoint13.distanceFrom(euclideanIntegerPoint22);
        int[] intArray91 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        java.lang.String str95 = euclideanIntegerPoint94.toString();
        java.lang.String str96 = euclideanIntegerPoint94.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double97 = euclideanIntegerPoint13.distanceFrom(euclideanIntegerPoint94);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(-1,10,10,97,10,100)" + "'", str10, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(-1,10,10,97,10,100)" + "'", str14, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint50);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint70);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(0,10,-1,100)" + "'", str95, "(0,10,-1,100)");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(0,10,-1,100)" + "'", str96, "(0,10,-1,100)");
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        java.lang.Class<?> wildcardClass91 = euclideanIntegerPoint89.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        int[] intArray70 = euclideanIntegerPoint7.getPoint();
        int[] intArray71 = euclideanIntegerPoint7.getPoint();
        int[] intArray76 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        int[] intArray78 = euclideanIntegerPoint77.getPoint();
        int[] intArray79 = euclideanIntegerPoint77.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint80);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 10, -1, 100]");
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        int[] intArray70 = euclideanIntegerPoint7.getPoint();
        int[] intArray77 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray77);
        java.lang.String str79 = euclideanIntegerPoint78.toString();
        int[] intArray80 = euclideanIntegerPoint78.getPoint();
        boolean boolean82 = euclideanIntegerPoint78.equals((java.lang.Object) 1.0d);
        int[] intArray83 = euclideanIntegerPoint78.getPoint();
        java.lang.String str84 = euclideanIntegerPoint78.toString();
        boolean boolean85 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint78);
        java.lang.String str86 = euclideanIntegerPoint78.toString();
        int[] intArray87 = euclideanIntegerPoint78.getPoint();
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint78.centroidOf(euclideanIntegerPointCollection88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray7 = euclideanIntegerPoint5.getPoint();
        java.lang.String str8 = euclideanIntegerPoint5.toString();
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        java.lang.String str78 = euclideanIntegerPoint16.toString();
        boolean boolean80 = euclideanIntegerPoint16.equals((java.lang.Object) (-1));
        boolean boolean81 = euclideanIntegerPoint5.equals((java.lang.Object) euclideanIntegerPoint16);
        java.lang.Class<?> wildcardClass82 = euclideanIntegerPoint16.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        int[] intArray29 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint46 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList48 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48, euclideanIntegerPointArray47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = euclideanIntegerPoint38.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        int[] intArray53 = euclideanIntegerPoint16.getPoint();
        java.lang.Class<?> wildcardClass54 = intArray53.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint50);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray26 = euclideanIntegerPoint25.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        double double30 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint29);
        java.lang.String str31 = euclideanIntegerPoint29.toString();
        boolean boolean32 = euclideanIntegerPoint10.equals((java.lang.Object) str31);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(0,10,-1,100)" + "'", str17, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 11.445523142259598d + "'", double30 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(-1,10,10,97,10,100)" + "'", str31, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        java.lang.String str10 = euclideanIntegerPoint9.toString();
        int[] intArray11 = euclideanIntegerPoint9.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint12 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        java.lang.String str14 = euclideanIntegerPoint13.toString();
        int[] intArray21 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint22 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray21);
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint30 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList32 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList32, euclideanIntegerPointArray31);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = euclideanIntegerPoint22.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList32);
        java.lang.String str35 = euclideanIntegerPoint34.toString();
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        java.lang.String str44 = euclideanIntegerPoint43.toString();
        int[] intArray45 = euclideanIntegerPoint43.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint62 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList64 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64, euclideanIntegerPointArray63);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = euclideanIntegerPoint54.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = euclideanIntegerPoint46.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        java.lang.String str68 = euclideanIntegerPoint67.toString();
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        int[] intArray81 = euclideanIntegerPoint76.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        double double83 = euclideanIntegerPoint67.distanceFrom(euclideanIntegerPoint82);
        double double84 = euclideanIntegerPoint34.distanceFrom(euclideanIntegerPoint82);
        java.lang.String str85 = euclideanIntegerPoint82.toString();
        boolean boolean86 = euclideanIntegerPoint13.equals((java.lang.Object) str85);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(-1,10,10,97,10,100)" + "'", str10, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(-1,10,10,97,10,100)" + "'", str14, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(-1,10,10,97,10,100)" + "'", str35, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(-1,10,10,97,10,100)" + "'", str44, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint66);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(-1,10,10,97,10,100)" + "'", str68, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        java.lang.String str71 = euclideanIntegerPoint7.toString();
        int[] intArray76 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        int[] intArray78 = euclideanIntegerPoint77.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        java.lang.String str89 = euclideanIntegerPoint88.toString();
        double double90 = euclideanIntegerPoint80.distanceFrom(euclideanIntegerPoint88);
        java.lang.String str91 = euclideanIntegerPoint88.toString();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint88);
        java.lang.Class<?> wildcardClass93 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(-1,10,10,97,10,100)" + "'", str71, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(-1,10,10,97,10,100)" + "'", str89, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 11.445523142259598d + "'", double90 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-1,10,10,97,10,100)" + "'", str91, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray11 = euclideanIntegerPoint7.getPoint();
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        java.lang.String str13 = euclideanIntegerPoint7.toString();
        java.lang.String str14 = euclideanIntegerPoint7.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(-1,10,10,97,10,100)" + "'", str13, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(-1,10,10,97,10,100)" + "'", str14, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint99 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        int[] intArray96 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        int[] intArray98 = euclideanIntegerPoint97.getPoint();
        java.lang.String str99 = euclideanIntegerPoint97.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "(-1,10,10,97,10,100)" + "'", str99, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray7 = euclideanIntegerPoint5.getPoint();
        int[] intArray8 = euclideanIntegerPoint5.getPoint();
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        int[] intArray18 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList37 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37, euclideanIntegerPointArray36);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = euclideanIntegerPoint5.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        java.lang.Class<?> wildcardClass42 = euclideanIntegerPointList37.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint39);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint40);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        int[] intArray18 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        java.lang.Class<?> wildcardClass20 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        java.lang.String str20 = euclideanIntegerPoint7.toString();
        int[] intArray21 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint22 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray21);
        int[] intArray27 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray29 = euclideanIntegerPoint28.getPoint();
        int[] intArray30 = euclideanIntegerPoint28.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            double double31 = euclideanIntegerPoint22.distanceFrom(euclideanIntegerPoint28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 10, -1, 100]");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray14 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray25 = euclideanIntegerPoint24.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        double double29 = euclideanIntegerPoint15.distanceFrom(euclideanIntegerPoint28);
        java.lang.String str30 = euclideanIntegerPoint15.toString();
        boolean boolean31 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint15);
        java.lang.Class<?> wildcardClass32 = euclideanIntegerPoint15.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(0,10,-1,100)" + "'", str9, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(0,10,-1,100)" + "'", str16, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 11.445523142259598d + "'", double29 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(0,10,-1,100)" + "'", str30, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.Class<?> wildcardClass9 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        java.lang.String str20 = euclideanIntegerPoint16.toString();
        int[] intArray25 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray27 = euclideanIntegerPoint26.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint45 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList47 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47, euclideanIntegerPointArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = euclideanIntegerPoint37.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        int[] intArray56 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        int[] intArray58 = euclideanIntegerPoint57.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        int[] intArray60 = euclideanIntegerPoint59.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            double double61 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint49);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint50);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 10, -1, 100]");
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        boolean boolean83 = euclideanIntegerPoint7.equals((java.lang.Object) intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        int[] intArray85 = euclideanIntegerPoint84.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray7 = euclideanIntegerPoint6.getPoint();
        java.lang.String str8 = euclideanIntegerPoint6.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        java.lang.String str15 = euclideanIntegerPoint14.toString();
        double double16 = euclideanIntegerPoint6.distanceFrom(euclideanIntegerPoint14);
        int[] intArray17 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.Class<?> wildcardClass19 = euclideanIntegerPoint18.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0,10,-1,100)" + "'", str15, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        java.lang.String str27 = euclideanIntegerPoint26.toString();
        int[] intArray28 = euclideanIntegerPoint26.getPoint();
        boolean boolean30 = euclideanIntegerPoint26.equals((java.lang.Object) 1.0d);
        int[] intArray31 = euclideanIntegerPoint26.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        double double33 = euclideanIntegerPoint18.distanceFrom(euclideanIntegerPoint32);
        boolean boolean34 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint18);
        java.lang.String str35 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass36 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(-1,10,10,97,10,100)" + "'", str27, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(-1,10,10,97,10,100)" + "'", str35, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        java.lang.String str72 = euclideanIntegerPoint70.toString();
        int[] intArray77 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray77);
        int[] intArray79 = euclideanIntegerPoint78.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        double double91 = euclideanIntegerPoint81.distanceFrom(euclideanIntegerPoint89);
        double double92 = euclideanIntegerPoint70.distanceFrom(euclideanIntegerPoint89);
        int[] intArray93 = euclideanIntegerPoint70.getPoint();
        java.lang.String str94 = euclideanIntegerPoint70.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 11.445523142259598d + "'", double91 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint42 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList44 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44, euclideanIntegerPointArray43);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = euclideanIntegerPoint34.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint62 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList64 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64, euclideanIntegerPointArray63);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = euclideanIntegerPoint54.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        java.lang.String str75 = euclideanIntegerPoint74.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26, euclideanIntegerPoint46, euclideanIntegerPoint54, euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList77 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77, euclideanIntegerPointArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        java.lang.Class<?> wildcardClass81 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(-1,10,10,97,10,100)" + "'", str75, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray7 = euclideanIntegerPoint6.getPoint();
        java.lang.String str8 = euclideanIntegerPoint6.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        java.lang.String str15 = euclideanIntegerPoint14.toString();
        double double16 = euclideanIntegerPoint6.distanceFrom(euclideanIntegerPoint14);
        int[] intArray17 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.Class<?> wildcardClass21 = intArray17.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0,10,-1,100)" + "'", str15, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray86 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        boolean boolean88 = euclideanIntegerPoint79.equals((java.lang.Object) intArray86);
        java.lang.Class<?> wildcardClass89 = euclideanIntegerPoint79.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        java.lang.Class<?> wildcardClass10 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint10.toString();
        java.lang.Object obj33 = null;
        boolean boolean34 = euclideanIntegerPoint10.equals(obj33);
        java.lang.String str35 = euclideanIntegerPoint10.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(-1,10,10,97,10,100)" + "'", str35, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        java.lang.String str83 = euclideanIntegerPoint82.toString();
        java.lang.String str84 = euclideanIntegerPoint82.toString();
        int[] intArray85 = euclideanIntegerPoint82.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        int[] intArray76 = euclideanIntegerPoint75.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        int[] intArray92 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint93 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList95 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean96 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95, euclideanIntegerPointArray94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = euclideanIntegerPoint85.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = euclideanIntegerPoint77.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95);
        int[] intArray99 = euclideanIntegerPoint77.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint97);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint98);
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray7 = euclideanIntegerPoint6.getPoint();
        boolean boolean9 = euclideanIntegerPoint6.equals((java.lang.Object) 10.0d);
        java.lang.Class<?> wildcardClass10 = euclideanIntegerPoint6.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray12 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        java.lang.String str14 = euclideanIntegerPoint13.toString();
        int[] intArray15 = euclideanIntegerPoint13.getPoint();
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint47 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList49 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49, euclideanIntegerPointArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint39.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint67 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList69 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69, euclideanIntegerPointArray68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = euclideanIntegerPoint59.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        java.lang.String str80 = euclideanIntegerPoint79.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31, euclideanIntegerPoint51, euclideanIntegerPoint59, euclideanIntegerPoint79 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList82 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82, euclideanIntegerPointArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = euclideanIntegerPoint13.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        boolean boolean86 = euclideanIntegerPoint5.equals((java.lang.Object) euclideanIntegerPoint85);
        int[] intArray87 = euclideanIntegerPoint85.getPoint();
        int[] intArray88 = euclideanIntegerPoint85.getPoint();
        int[] intArray89 = euclideanIntegerPoint85.getPoint();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(-1,10,10,97,10,100)" + "'", str14, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint71);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(-1,10,10,97,10,100)" + "'", str80, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint84);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        int[] intArray29 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray35 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray37 = euclideanIntegerPoint36.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray40 = euclideanIntegerPoint39.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        boolean boolean42 = euclideanIntegerPoint30.equals((java.lang.Object) euclideanIntegerPoint41);
        double double43 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint30);
        int[] intArray44 = euclideanIntegerPoint19.getPoint();
        java.lang.String str45 = euclideanIntegerPoint19.toString();
        java.lang.Class<?> wildcardClass46 = euclideanIntegerPoint19.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(-1,10,10,97,10,100)" + "'", str45, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.Class<?> wildcardClass74 = euclideanIntegerPoint73.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint43 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList45 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45, euclideanIntegerPointArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList65 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65, euclideanIntegerPointArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = euclideanIntegerPoint55.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        java.lang.String str76 = euclideanIntegerPoint75.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint27, euclideanIntegerPoint47, euclideanIntegerPoint55, euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList78 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78, euclideanIntegerPointArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint11.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        boolean boolean93 = euclideanIntegerPoint89.equals((java.lang.Object) 1.0d);
        java.lang.String str94 = euclideanIntegerPoint89.toString();
        double double95 = euclideanIntegerPoint81.distanceFrom(euclideanIntegerPoint89);
        int[] intArray96 = euclideanIntegerPoint81.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint99 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(-1,10,10,97,10,100)" + "'", str76, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.String str19 = euclideanIntegerPoint18.toString();
        int[] intArray20 = euclideanIntegerPoint18.getPoint();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        java.lang.Class<?> wildcardClass92 = euclideanIntegerPoint10.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        int[] intArray49 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint50 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList52 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList52, euclideanIntegerPointArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = euclideanIntegerPoint42.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList52);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        int[] intArray69 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint70 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList72 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72, euclideanIntegerPointArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = euclideanIntegerPoint62.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72);
        int[] intArray81 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        java.lang.String str83 = euclideanIntegerPoint82.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint34, euclideanIntegerPoint54, euclideanIntegerPoint62, euclideanIntegerPoint82 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList85 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85, euclideanIntegerPointArray84);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = euclideanIntegerPoint26.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85);
        int[] intArray88 = euclideanIntegerPoint26.getPoint();
        java.lang.String str89 = euclideanIntegerPoint26.toString();
        java.lang.String str90 = euclideanIntegerPoint26.toString();
        boolean boolean91 = euclideanIntegerPoint18.equals((java.lang.Object) euclideanIntegerPoint26);
        double double92 = euclideanIntegerPoint10.distanceFrom(euclideanIntegerPoint26);
        java.lang.Class<?> wildcardClass93 = euclideanIntegerPoint10.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint74);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(-1,10,10,97,10,100)" + "'", str89, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray29 = euclideanIntegerPoint28.getPoint();
        double double30 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint28);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray46 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray48 = euclideanIntegerPoint47.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        java.lang.Class<?> wildcardClass52 = intArray48.getClass();
        boolean boolean53 = euclideanIntegerPoint41.equals((java.lang.Object) intArray48);
        double double54 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint41);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        int[] intArray69 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint70 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList72 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72, euclideanIntegerPointArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = euclideanIntegerPoint62.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72);
        int[] intArray75 = euclideanIntegerPoint62.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        boolean boolean77 = euclideanIntegerPoint41.equals((java.lang.Object) euclideanIntegerPoint76);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        int[] intArray86 = euclideanIntegerPoint85.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        boolean boolean89 = euclideanIntegerPoint76.equals((java.lang.Object) euclideanIntegerPoint87);
        int[] intArray90 = euclideanIntegerPoint76.getPoint();
        int[] intArray91 = euclideanIntegerPoint76.getPoint();
        java.lang.Class<?> wildcardClass92 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        int[] intArray90 = euclideanIntegerPoint89.getPoint();
        java.lang.String str91 = euclideanIntegerPoint89.toString();
        int[] intArray92 = euclideanIntegerPoint89.getPoint();
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-1,10,10,97,10,100)" + "'", str91, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        int[] intArray48 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        int[] intArray56 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint57 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList59 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59, euclideanIntegerPointArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = euclideanIntegerPoint49.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59);
        int[] intArray68 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray68);
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint77 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList79 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList79, euclideanIntegerPointArray78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint69.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList79);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41, euclideanIntegerPoint61, euclideanIntegerPoint69, euclideanIntegerPoint89 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList92 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92, euclideanIntegerPointArray91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = euclideanIntegerPoint25.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = euclideanIntegerPoint5.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92);
        int[] intArray97 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray97);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint99 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray97);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint94);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint95);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint96);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 10, -1, 100]");
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        int[] intArray96 = euclideanIntegerPoint7.getPoint();
        int[] intArray97 = euclideanIntegerPoint7.getPoint();
        int[] intArray98 = euclideanIntegerPoint7.getPoint();
        java.lang.String str99 = euclideanIntegerPoint7.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "(-1,10,10,97,10,100)" + "'", str99, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        int[] intArray26 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray28 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        boolean boolean33 = euclideanIntegerPoint20.equals((java.lang.Object) euclideanIntegerPoint32);
        java.lang.Class<?> wildcardClass34 = euclideanIntegerPoint20.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        int[] intArray76 = euclideanIntegerPoint75.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        int[] intArray92 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint93 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList95 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean96 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95, euclideanIntegerPointArray94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = euclideanIntegerPoint85.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = euclideanIntegerPoint77.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95);
        int[] intArray99 = euclideanIntegerPoint98.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint97);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint98);
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        int[] intArray10 = euclideanIntegerPoint8.getPoint();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 10, -1, 100]");
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint31.toString();
        int[] intArray33 = euclideanIntegerPoint31.getPoint();
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        java.lang.String str42 = euclideanIntegerPoint41.toString();
        int[] intArray43 = euclideanIntegerPoint41.getPoint();
        boolean boolean45 = euclideanIntegerPoint41.equals((java.lang.Object) 1.0d);
        int[] intArray46 = euclideanIntegerPoint41.getPoint();
        java.lang.String str47 = euclideanIntegerPoint41.toString();
        double double48 = euclideanIntegerPoint31.distanceFrom(euclideanIntegerPoint41);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        int[] intArray58 = euclideanIntegerPoint57.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        double double60 = euclideanIntegerPoint41.distanceFrom(euclideanIntegerPoint59);
        int[] intArray61 = euclideanIntegerPoint41.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(-1,10,10,97,10,100)" + "'", str42, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(-1,10,10,97,10,100)" + "'", str47, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList26 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26, euclideanIntegerPointArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray38 = euclideanIntegerPoint37.getPoint();
        java.lang.String str39 = euclideanIntegerPoint37.toString();
        int[] intArray40 = euclideanIntegerPoint37.getPoint();
        double double41 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint37);
        java.lang.String str42 = euclideanIntegerPoint37.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint28);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 11.445523142259598d + "'", double41 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(-1,10,10,97,10,100)" + "'", str42, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        java.lang.String str30 = euclideanIntegerPoint29.toString();
        int[] intArray31 = euclideanIntegerPoint29.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        int[] intArray47 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint48 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList50 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList50, euclideanIntegerPointArray49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = euclideanIntegerPoint40.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList50);
        boolean boolean54 = euclideanIntegerPoint20.equals((java.lang.Object) euclideanIntegerPoint53);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        java.lang.String str63 = euclideanIntegerPoint62.toString();
        int[] intArray64 = euclideanIntegerPoint62.getPoint();
        boolean boolean66 = euclideanIntegerPoint62.equals((java.lang.Object) 1.0d);
        java.lang.String str67 = euclideanIntegerPoint62.toString();
        double double68 = euclideanIntegerPoint53.distanceFrom(euclideanIntegerPoint62);
        java.lang.Class<?> wildcardClass69 = euclideanIntegerPoint62.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(-1,10,10,97,10,100)" + "'", str30, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint52);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(-1,10,10,97,10,100)" + "'", str63, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(-1,10,10,97,10,100)" + "'", str67, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        java.lang.String str20 = euclideanIntegerPoint19.toString();
        int[] intArray21 = euclideanIntegerPoint19.getPoint();
        int[] intArray22 = euclideanIntegerPoint19.getPoint();
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        java.lang.String str39 = euclideanIntegerPoint38.toString();
        int[] intArray40 = euclideanIntegerPoint38.getPoint();
        boolean boolean42 = euclideanIntegerPoint38.equals((java.lang.Object) 1.0d);
        int[] intArray43 = euclideanIntegerPoint38.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        double double45 = euclideanIntegerPoint30.distanceFrom(euclideanIntegerPoint44);
        boolean boolean46 = euclideanIntegerPoint19.equals((java.lang.Object) euclideanIntegerPoint30);
        boolean boolean47 = euclideanIntegerPoint11.equals((java.lang.Object) euclideanIntegerPoint30);
        java.lang.String str48 = euclideanIntegerPoint30.toString();
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        java.lang.String str57 = euclideanIntegerPoint56.toString();
        int[] intArray58 = euclideanIntegerPoint56.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList77 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77, euclideanIntegerPointArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint67.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint59.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        java.lang.String str81 = euclideanIntegerPoint59.toString();
        int[] intArray82 = euclideanIntegerPoint59.getPoint();
        double double83 = euclideanIntegerPoint30.distanceFrom(euclideanIntegerPoint59);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(-1,10,10,97,10,100)" + "'", str48, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(-1,10,10,97,10,100)" + "'", str57, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(-1,10,10,97,10,100)" + "'", str81, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        java.lang.String str18 = euclideanIntegerPoint5.toString();
        int[] intArray19 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        java.lang.Class<?> wildcardClass21 = euclideanIntegerPoint20.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(0,10,-1,100)" + "'", str18, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        int[] intArray12 = euclideanIntegerPoint11.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        java.lang.String str14 = euclideanIntegerPoint13.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(-1,10,10,97,10,100)" + "'", str14, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        java.lang.String str10 = euclideanIntegerPoint7.toString();
        java.lang.String str11 = euclideanIntegerPoint7.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(-1,10,10,97,10,100)" + "'", str10, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(-1,10,10,97,10,100)" + "'", str11, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        java.lang.String str83 = euclideanIntegerPoint82.toString();
        int[] intArray90 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        int[] intArray93 = euclideanIntegerPoint91.getPoint();
        java.lang.String str94 = euclideanIntegerPoint91.toString();
        boolean boolean95 = euclideanIntegerPoint82.equals((java.lang.Object) euclideanIntegerPoint91);
        int[] intArray96 = euclideanIntegerPoint82.getPoint();
        int[] intArray97 = euclideanIntegerPoint82.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str11 = euclideanIntegerPoint10.toString();
        int[] intArray12 = euclideanIntegerPoint10.getPoint();
        int[] intArray19 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint44 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList46 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList46, euclideanIntegerPointArray45);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = euclideanIntegerPoint36.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList46);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint64 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint56.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint28, euclideanIntegerPoint48, euclideanIntegerPoint56, euclideanIntegerPoint76 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList79 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList79, euclideanIntegerPointArray78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint20.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList79);
        int[] intArray82 = euclideanIntegerPoint20.getPoint();
        java.lang.String str83 = euclideanIntegerPoint20.toString();
        java.lang.String str84 = euclideanIntegerPoint20.toString();
        int[] intArray85 = euclideanIntegerPoint20.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        double double87 = euclideanIntegerPoint10.distanceFrom(euclideanIntegerPoint86);
        java.lang.String str88 = euclideanIntegerPoint86.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(-1,10,10,97,10,100)" + "'", str11, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint48);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        java.lang.String str72 = euclideanIntegerPoint7.toString();
        int[] intArray73 = euclideanIntegerPoint7.getPoint();
        int[] intArray74 = euclideanIntegerPoint7.getPoint();
        int[] intArray75 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass76 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        java.lang.String str10 = euclideanIntegerPoint9.toString();
        int[] intArray11 = euclideanIntegerPoint9.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint12 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        int[] intArray20 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint45 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList47 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47, euclideanIntegerPointArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = euclideanIntegerPoint37.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        int[] intArray56 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint65 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList67 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67, euclideanIntegerPointArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = euclideanIntegerPoint57.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67);
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        java.lang.String str78 = euclideanIntegerPoint77.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint29, euclideanIntegerPoint49, euclideanIntegerPoint57, euclideanIntegerPoint77 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList80 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList80, euclideanIntegerPointArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList80);
        java.lang.String str83 = euclideanIntegerPoint21.toString();
        int[] intArray90 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        int[] intArray93 = euclideanIntegerPoint91.getPoint();
        boolean boolean95 = euclideanIntegerPoint91.equals((java.lang.Object) 1.0d);
        int[] intArray96 = euclideanIntegerPoint91.getPoint();
        double double97 = euclideanIntegerPoint21.distanceFrom(euclideanIntegerPoint91);
        boolean boolean98 = euclideanIntegerPoint13.equals((java.lang.Object) euclideanIntegerPoint21);
        java.lang.Class<?> wildcardClass99 = euclideanIntegerPoint21.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(-1,10,10,97,10,100)" + "'", str10, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint49);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint69);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        double double29 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint27);
        java.lang.String str30 = euclideanIntegerPoint27.toString();
        java.lang.String str31 = euclideanIntegerPoint27.toString();
        int[] intArray36 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray38 = euclideanIntegerPoint37.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray47 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint56 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList58 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58, euclideanIntegerPointArray57);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = euclideanIntegerPoint48.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = euclideanIntegerPoint40.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        int[] intArray64 = euclideanIntegerPoint10.getPoint();
        java.lang.Class<?> wildcardClass65 = euclideanIntegerPoint10.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 11.445523142259598d + "'", double29 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(-1,10,10,97,10,100)" + "'", str30, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(-1,10,10,97,10,100)" + "'", str31, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint60);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint61);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint62);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        int[] intArray78 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray84 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        int[] intArray86 = euclideanIntegerPoint85.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        double double88 = euclideanIntegerPoint79.distanceFrom(euclideanIntegerPoint87);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = euclideanIntegerPoint72.distanceFrom(euclideanIntegerPoint79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        int[] intArray75 = euclideanIntegerPoint74.getPoint();
        java.lang.Class<?> wildcardClass76 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double77 = euclideanIntegerPoint75.distanceFrom(euclideanIntegerPoint76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        java.lang.String str78 = euclideanIntegerPoint77.toString();
        int[] intArray79 = euclideanIntegerPoint77.getPoint();
        boolean boolean81 = euclideanIntegerPoint77.equals((java.lang.Object) 1.0d);
        int[] intArray82 = euclideanIntegerPoint77.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        boolean boolean84 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint83);
        int[] intArray85 = euclideanIntegerPoint7.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        int[] intArray29 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint46 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList48 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48, euclideanIntegerPointArray47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = euclideanIntegerPoint38.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        java.lang.Class<?> wildcardClass53 = euclideanIntegerPoint16.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint50);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint31.toString();
        java.lang.Class<?> wildcardClass33 = euclideanIntegerPoint31.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        java.lang.String str10 = euclideanIntegerPoint9.toString();
        int[] intArray11 = euclideanIntegerPoint9.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint12 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        java.lang.Class<?> wildcardClass16 = intArray11.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(-1,10,10,97,10,100)" + "'", str10, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        int[] intArray86 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        int[] intArray88 = euclideanIntegerPoint87.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        boolean boolean92 = euclideanIntegerPoint76.equals((java.lang.Object) intArray88);
        java.lang.Class<?> wildcardClass93 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray7 = euclideanIntegerPoint6.getPoint();
        java.lang.String str8 = euclideanIntegerPoint6.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        java.lang.String str15 = euclideanIntegerPoint14.toString();
        double double16 = euclideanIntegerPoint6.distanceFrom(euclideanIntegerPoint14);
        java.lang.Class<?> wildcardClass17 = euclideanIntegerPoint6.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0,10,-1,100)" + "'", str15, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        boolean boolean83 = euclideanIntegerPoint7.equals((java.lang.Object) intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        java.lang.Class<?> wildcardClass85 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint31.toString();
        java.lang.String str33 = euclideanIntegerPoint31.toString();
        boolean boolean35 = euclideanIntegerPoint31.equals((java.lang.Object) 100.0d);
        java.lang.String str36 = euclideanIntegerPoint31.toString();
        java.lang.Class<?> wildcardClass37 = euclideanIntegerPoint31.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(-1,10,10,97,10,100)" + "'", str33, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(-1,10,10,97,10,100)" + "'", str36, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        java.lang.String str20 = euclideanIntegerPoint19.toString();
        int[] intArray21 = euclideanIntegerPoint19.getPoint();
        int[] intArray22 = euclideanIntegerPoint19.getPoint();
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        java.lang.String str39 = euclideanIntegerPoint38.toString();
        int[] intArray40 = euclideanIntegerPoint38.getPoint();
        boolean boolean42 = euclideanIntegerPoint38.equals((java.lang.Object) 1.0d);
        int[] intArray43 = euclideanIntegerPoint38.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        double double45 = euclideanIntegerPoint30.distanceFrom(euclideanIntegerPoint44);
        boolean boolean46 = euclideanIntegerPoint19.equals((java.lang.Object) euclideanIntegerPoint30);
        boolean boolean47 = euclideanIntegerPoint11.equals((java.lang.Object) euclideanIntegerPoint30);
        boolean boolean49 = euclideanIntegerPoint30.equals((java.lang.Object) (short) 1);
        java.lang.String str50 = euclideanIntegerPoint30.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(-1,10,10,97,10,100)" + "'", str50, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        double double29 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint27);
        java.lang.String str30 = euclideanIntegerPoint27.toString();
        java.lang.String str31 = euclideanIntegerPoint27.toString();
        int[] intArray36 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray38 = euclideanIntegerPoint37.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray47 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint56 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList58 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58, euclideanIntegerPointArray57);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = euclideanIntegerPoint48.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = euclideanIntegerPoint40.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        int[] intArray64 = euclideanIntegerPoint10.getPoint();
        java.lang.String str65 = euclideanIntegerPoint10.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 11.445523142259598d + "'", double29 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(-1,10,10,97,10,100)" + "'", str30, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(-1,10,10,97,10,100)" + "'", str31, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint60);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint61);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint62);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(-1,10,10,97,10,100)" + "'", str65, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        int[] intArray71 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.Class<?> wildcardClass73 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        java.lang.String str82 = euclideanIntegerPoint68.toString();
        java.lang.Object obj83 = null;
        boolean boolean84 = euclideanIntegerPoint68.equals(obj83);
        int[] intArray89 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray89);
        int[] intArray91 = euclideanIntegerPoint90.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        java.lang.String str96 = euclideanIntegerPoint95.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double97 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint95);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(-1,10,10,97,10,100)" + "'", str82, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(0,10,-1,100)" + "'", str96, "(0,10,-1,100)");
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        int[] intArray29 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray35 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray37 = euclideanIntegerPoint36.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray40 = euclideanIntegerPoint39.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        boolean boolean42 = euclideanIntegerPoint30.equals((java.lang.Object) euclideanIntegerPoint41);
        double double43 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint30);
        int[] intArray44 = euclideanIntegerPoint19.getPoint();
        java.lang.Object obj45 = null;
        boolean boolean46 = euclideanIntegerPoint19.equals(obj45);
        java.lang.String str47 = euclideanIntegerPoint19.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(-1,10,10,97,10,100)" + "'", str47, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        java.lang.String str72 = euclideanIntegerPoint7.toString();
        int[] intArray73 = euclideanIntegerPoint7.getPoint();
        int[] intArray74 = euclideanIntegerPoint7.getPoint();
        int[] intArray75 = euclideanIntegerPoint7.getPoint();
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        int[] intArray90 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray92 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint91 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList93 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList93, euclideanIntegerPointArray92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = euclideanIntegerPoint83.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList93);
        int[] intArray96 = euclideanIntegerPoint83.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        int[] intArray98 = euclideanIntegerPoint97.getPoint();
        boolean boolean99 = euclideanIntegerPoint7.equals((java.lang.Object) intArray98);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray22 = euclideanIntegerPoint21.getPoint();
        java.lang.String str23 = euclideanIntegerPoint21.toString();
        java.lang.Class<?> wildcardClass24 = euclideanIntegerPoint21.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(-1,10,10,97,10,100)" + "'", str23, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        int[] intArray19 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint53 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList55 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55, euclideanIntegerPointArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = euclideanIntegerPoint45.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint37, euclideanIntegerPoint57, euclideanIntegerPoint65, euclideanIntegerPoint85 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList88 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88, euclideanIntegerPointArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        int[] intArray94 = euclideanIntegerPoint7.getPoint();
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        boolean boolean19 = euclideanIntegerPoint15.equals((java.lang.Object) 1.0d);
        int[] intArray20 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        double double22 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint21);
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint54 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList56 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56, euclideanIntegerPointArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = euclideanIntegerPoint46.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint66.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray85 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        java.lang.String str87 = euclideanIntegerPoint86.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint38, euclideanIntegerPoint58, euclideanIntegerPoint66, euclideanIntegerPoint86 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList89 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89, euclideanIntegerPointArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint91);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        java.lang.String str94 = euclideanIntegerPoint7.toString();
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        java.lang.Object obj96 = null;
        boolean boolean97 = euclideanIntegerPoint7.equals(obj96);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint58);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(-1,10,10,97,10,100)" + "'", str87, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        java.lang.String str11 = euclideanIntegerPoint7.toString();
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass13 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(-1,10,10,97,10,100)" + "'", str11, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        int[] intArray89 = euclideanIntegerPoint87.getPoint();
        boolean boolean91 = euclideanIntegerPoint87.equals((java.lang.Object) 1.0d);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint87);
        java.lang.Class<?> wildcardClass93 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        java.lang.String str10 = euclideanIntegerPoint8.toString();
        java.lang.Class<?> wildcardClass11 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(0,10,-1,100)" + "'", str10, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        int[] intArray6 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint33 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList35 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35, euclideanIntegerPointArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = euclideanIntegerPoint25.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        int[] intArray44 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray46 = euclideanIntegerPoint45.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        java.lang.String str57 = euclideanIntegerPoint56.toString();
        double double58 = euclideanIntegerPoint48.distanceFrom(euclideanIntegerPoint56);
        java.lang.String str59 = euclideanIntegerPoint56.toString();
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        int[] intArray69 = euclideanIntegerPoint68.getPoint();
        double double70 = euclideanIntegerPoint56.distanceFrom(euclideanIntegerPoint68);
        double double71 = euclideanIntegerPoint39.distanceFrom(euclideanIntegerPoint56);
        int[] intArray72 = euclideanIntegerPoint56.getPoint();
        int[] intArray77 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray77);
        int[] intArray79 = euclideanIntegerPoint78.getPoint();
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        double double89 = euclideanIntegerPoint78.distanceFrom(euclideanIntegerPoint88);
        int[] intArray90 = euclideanIntegerPoint88.getPoint();
        int[] intArray91 = euclideanIntegerPoint88.getPoint();
        java.lang.String str92 = euclideanIntegerPoint88.toString();
        int[] intArray93 = euclideanIntegerPoint88.getPoint();
        double double94 = euclideanIntegerPoint56.distanceFrom(euclideanIntegerPoint88);
        java.lang.String str95 = euclideanIntegerPoint88.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint37);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint38);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(-1,10,10,97,10,100)" + "'", str57, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 11.445523142259598d + "'", double58 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(-1,10,10,97,10,100)" + "'", str59, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 11.445523142259598d + "'", double89 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(-1,10,10,97,10,100)" + "'", str95, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        java.lang.Class<?> wildcardClass97 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray25 = euclideanIntegerPoint24.getPoint();
        java.lang.String str26 = euclideanIntegerPoint24.toString();
        int[] intArray27 = euclideanIntegerPoint24.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        boolean boolean29 = euclideanIntegerPoint16.equals((java.lang.Object) euclideanIntegerPoint28);
        int[] intArray34 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray36 = euclideanIntegerPoint35.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        boolean boolean41 = euclideanIntegerPoint28.equals((java.lang.Object) euclideanIntegerPoint40);
        boolean boolean42 = euclideanIntegerPoint7.equals((java.lang.Object) boolean41);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(-1,10,10,97,10,100)" + "'", str26, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        double double91 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint89);
        int[] intArray92 = euclideanIntegerPoint68.getPoint();
        java.lang.Class<?> wildcardClass93 = euclideanIntegerPoint68.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        int[] intArray48 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        int[] intArray56 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint57 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList59 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59, euclideanIntegerPointArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = euclideanIntegerPoint49.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59);
        int[] intArray68 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray68);
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint77 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList79 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList79, euclideanIntegerPointArray78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint69.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList79);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41, euclideanIntegerPoint61, euclideanIntegerPoint69, euclideanIntegerPoint89 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList92 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92, euclideanIntegerPointArray91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = euclideanIntegerPoint25.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = euclideanIntegerPoint5.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList92);
        java.lang.String str97 = euclideanIntegerPoint5.toString();
        java.lang.Object obj98 = null;
        boolean boolean99 = euclideanIntegerPoint5.equals(obj98);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint94);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint95);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(0,10,-1,100)" + "'", str97, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        int[] intArray96 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        int[] intArray98 = euclideanIntegerPoint97.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint99 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray98);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        java.lang.String str20 = euclideanIntegerPoint19.toString();
        int[] intArray21 = euclideanIntegerPoint19.getPoint();
        int[] intArray22 = euclideanIntegerPoint19.getPoint();
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        java.lang.String str39 = euclideanIntegerPoint38.toString();
        int[] intArray40 = euclideanIntegerPoint38.getPoint();
        boolean boolean42 = euclideanIntegerPoint38.equals((java.lang.Object) 1.0d);
        int[] intArray43 = euclideanIntegerPoint38.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        double double45 = euclideanIntegerPoint30.distanceFrom(euclideanIntegerPoint44);
        boolean boolean46 = euclideanIntegerPoint19.equals((java.lang.Object) euclideanIntegerPoint30);
        boolean boolean47 = euclideanIntegerPoint11.equals((java.lang.Object) euclideanIntegerPoint30);
        java.lang.String str48 = euclideanIntegerPoint11.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(-1,10,10,97,10,100)" + "'", str48, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray7 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray7);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        int[] intArray87 = euclideanIntegerPoint85.getPoint();
        boolean boolean89 = euclideanIntegerPoint85.equals((java.lang.Object) 1.0d);
        double double90 = euclideanIntegerPoint77.distanceFrom(euclideanIntegerPoint85);
        java.lang.String str91 = euclideanIntegerPoint77.toString();
        boolean boolean92 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint77);
        int[] intArray93 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray93);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-1,10,10,97,10,100)" + "'", str91, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 10, -1, 100]");
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint10.toString();
        java.lang.String str33 = euclideanIntegerPoint10.toString();
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        java.lang.String str42 = euclideanIntegerPoint41.toString();
        int[] intArray43 = euclideanIntegerPoint41.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        java.lang.String str66 = euclideanIntegerPoint65.toString();
        int[] intArray67 = euclideanIntegerPoint65.getPoint();
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        java.lang.String str76 = euclideanIntegerPoint75.toString();
        int[] intArray77 = euclideanIntegerPoint75.getPoint();
        boolean boolean79 = euclideanIntegerPoint75.equals((java.lang.Object) 1.0d);
        int[] intArray80 = euclideanIntegerPoint75.getPoint();
        java.lang.String str81 = euclideanIntegerPoint75.toString();
        double double82 = euclideanIntegerPoint65.distanceFrom(euclideanIntegerPoint75);
        int[] intArray83 = euclideanIntegerPoint65.getPoint();
        double double84 = euclideanIntegerPoint10.distanceFrom(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(-1,10,10,97,10,100)" + "'", str33, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(-1,10,10,97,10,100)" + "'", str42, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(-1,10,10,97,10,100)" + "'", str66, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(-1,10,10,97,10,100)" + "'", str76, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(-1,10,10,97,10,100)" + "'", str81, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        int[] intArray89 = euclideanIntegerPoint87.getPoint();
        boolean boolean91 = euclideanIntegerPoint87.equals((java.lang.Object) 1.0d);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint87);
        java.lang.String str93 = euclideanIntegerPoint87.toString();
        int[] intArray94 = euclideanIntegerPoint87.getPoint();
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        int[] intArray18 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        int[] intArray90 = euclideanIntegerPoint28.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        int[] intArray92 = euclideanIntegerPoint91.getPoint();
        java.lang.String str93 = euclideanIntegerPoint91.toString();
        java.lang.String str94 = euclideanIntegerPoint91.toString();
        double double95 = euclideanIntegerPoint20.distanceFrom(euclideanIntegerPoint91);
        java.lang.String str96 = euclideanIntegerPoint91.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(-1,10,10,97,10,100)" + "'", str96, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        java.lang.String str81 = euclideanIntegerPoint79.toString();
        int[] intArray82 = euclideanIntegerPoint79.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(-1,10,10,97,10,100)" + "'", str81, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint42 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList44 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44, euclideanIntegerPointArray43);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = euclideanIntegerPoint34.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint62 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList64 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64, euclideanIntegerPointArray63);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = euclideanIntegerPoint54.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        java.lang.String str75 = euclideanIntegerPoint74.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26, euclideanIntegerPoint46, euclideanIntegerPoint54, euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList77 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77, euclideanIntegerPointArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        java.lang.String str81 = euclideanIntegerPoint80.toString();
        int[] intArray82 = euclideanIntegerPoint80.getPoint();
        java.lang.String str83 = euclideanIntegerPoint80.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(-1,10,10,97,10,100)" + "'", str75, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(-1,10,10,97,10,100)" + "'", str81, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        int[] intArray6 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint33 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList35 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35, euclideanIntegerPointArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = euclideanIntegerPoint25.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        int[] intArray40 = euclideanIntegerPoint8.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint37);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint38);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 32, 10, 1, 0, 52]");
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray28 = euclideanIntegerPoint27.getPoint();
        boolean boolean30 = euclideanIntegerPoint27.equals((java.lang.Object) (short) 10);
        double double31 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint27);
        java.lang.Class<?> wildcardClass32 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 11.445523142259598d + "'", double31 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        int[] intArray20 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray39 = euclideanIntegerPoint38.getPoint();
        java.lang.String str40 = euclideanIntegerPoint38.toString();
        int[] intArray41 = euclideanIntegerPoint38.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        boolean boolean43 = euclideanIntegerPoint30.equals((java.lang.Object) euclideanIntegerPoint42);
        int[] intArray48 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        int[] intArray50 = euclideanIntegerPoint49.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        boolean boolean55 = euclideanIntegerPoint42.equals((java.lang.Object) euclideanIntegerPoint54);
        int[] intArray56 = euclideanIntegerPoint54.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        java.lang.String str66 = euclideanIntegerPoint65.toString();
        int[] intArray67 = euclideanIntegerPoint65.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray67);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint76.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint68.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint57.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        int[] intArray92 = euclideanIntegerPoint91.getPoint();
        java.lang.Class<?> wildcardClass93 = euclideanIntegerPoint91.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(-1,10,10,97,10,100)" + "'", str40, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(-1,10,10,97,10,100)" + "'", str66, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        int[] intArray74 = euclideanIntegerPoint72.getPoint();
        java.lang.Class<?> wildcardClass75 = euclideanIntegerPoint72.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray12 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        java.lang.String str14 = euclideanIntegerPoint13.toString();
        int[] intArray15 = euclideanIntegerPoint13.getPoint();
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint47 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList49 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49, euclideanIntegerPointArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint39.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint67 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList69 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69, euclideanIntegerPointArray68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = euclideanIntegerPoint59.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        java.lang.String str80 = euclideanIntegerPoint79.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31, euclideanIntegerPoint51, euclideanIntegerPoint59, euclideanIntegerPoint79 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList82 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82, euclideanIntegerPointArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = euclideanIntegerPoint13.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        boolean boolean86 = euclideanIntegerPoint5.equals((java.lang.Object) euclideanIntegerPoint85);
        java.lang.String str87 = euclideanIntegerPoint85.toString();
        int[] intArray88 = euclideanIntegerPoint85.getPoint();
        java.lang.Class<?> wildcardClass89 = euclideanIntegerPoint85.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(-1,10,10,97,10,100)" + "'", str14, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint71);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(-1,10,10,97,10,100)" + "'", str80, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint84);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(-1,10,10,97,10,100)" + "'", str87, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray16 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray18 = euclideanIntegerPoint17.getPoint();
        int[] intArray19 = euclideanIntegerPoint17.getPoint();
        java.lang.String str20 = euclideanIntegerPoint17.toString();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        java.lang.String str90 = euclideanIntegerPoint28.toString();
        boolean boolean92 = euclideanIntegerPoint28.equals((java.lang.Object) (-1));
        boolean boolean93 = euclideanIntegerPoint17.equals((java.lang.Object) euclideanIntegerPoint28);
        int[] intArray94 = euclideanIntegerPoint28.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray94);
        double double97 = euclideanIntegerPoint11.distanceFrom(euclideanIntegerPoint96);
        int[] intArray98 = euclideanIntegerPoint96.getPoint();
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(0,10,-1,100)" + "'", str20, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        java.lang.String str20 = euclideanIntegerPoint19.toString();
        int[] intArray21 = euclideanIntegerPoint19.getPoint();
        int[] intArray22 = euclideanIntegerPoint19.getPoint();
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        java.lang.String str39 = euclideanIntegerPoint38.toString();
        int[] intArray40 = euclideanIntegerPoint38.getPoint();
        boolean boolean42 = euclideanIntegerPoint38.equals((java.lang.Object) 1.0d);
        int[] intArray43 = euclideanIntegerPoint38.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        double double45 = euclideanIntegerPoint30.distanceFrom(euclideanIntegerPoint44);
        boolean boolean46 = euclideanIntegerPoint19.equals((java.lang.Object) euclideanIntegerPoint30);
        boolean boolean47 = euclideanIntegerPoint11.equals((java.lang.Object) euclideanIntegerPoint30);
        boolean boolean49 = euclideanIntegerPoint30.equals((java.lang.Object) (byte) 100);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray16 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray18 = euclideanIntegerPoint17.getPoint();
        int[] intArray19 = euclideanIntegerPoint17.getPoint();
        java.lang.String str20 = euclideanIntegerPoint17.toString();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        java.lang.String str90 = euclideanIntegerPoint28.toString();
        boolean boolean92 = euclideanIntegerPoint28.equals((java.lang.Object) (-1));
        boolean boolean93 = euclideanIntegerPoint17.equals((java.lang.Object) euclideanIntegerPoint28);
        int[] intArray94 = euclideanIntegerPoint28.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray94);
        double double97 = euclideanIntegerPoint11.distanceFrom(euclideanIntegerPoint96);
        int[] intArray98 = euclideanIntegerPoint96.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint99 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray98);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(0,10,-1,100)" + "'", str20, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.Class<?> wildcardClass73 = euclideanIntegerPoint72.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray29 = euclideanIntegerPoint28.getPoint();
        double double30 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint28);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray46 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray48 = euclideanIntegerPoint47.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        java.lang.Class<?> wildcardClass52 = intArray48.getClass();
        boolean boolean53 = euclideanIntegerPoint41.equals((java.lang.Object) intArray48);
        double double54 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint41);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        int[] intArray69 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint70 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList72 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72, euclideanIntegerPointArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = euclideanIntegerPoint62.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72);
        int[] intArray75 = euclideanIntegerPoint62.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        boolean boolean77 = euclideanIntegerPoint41.equals((java.lang.Object) euclideanIntegerPoint76);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        int[] intArray86 = euclideanIntegerPoint85.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        boolean boolean89 = euclideanIntegerPoint76.equals((java.lang.Object) euclideanIntegerPoint87);
        java.lang.Class<?> wildcardClass90 = euclideanIntegerPoint87.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        java.lang.String str11 = euclideanIntegerPoint10.toString();
        java.lang.String str12 = euclideanIntegerPoint10.toString();
        int[] intArray17 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray19 = euclideanIntegerPoint18.getPoint();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        double double29 = euclideanIntegerPoint18.distanceFrom(euclideanIntegerPoint28);
        int[] intArray30 = euclideanIntegerPoint18.getPoint();
        int[] intArray35 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        java.lang.String str37 = euclideanIntegerPoint36.toString();
        double double38 = euclideanIntegerPoint18.distanceFrom(euclideanIntegerPoint36);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = euclideanIntegerPoint10.distanceFrom(euclideanIntegerPoint18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(-1,10,10,97,10,100)" + "'", str11, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(-1,10,10,97,10,100)" + "'", str12, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 11.445523142259598d + "'", double29 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(0,10,-1,100)" + "'", str37, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList26 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26, euclideanIntegerPointArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint8.centroidOf(euclideanIntegerPointCollection30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint28);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint29);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray29 = euclideanIntegerPoint28.getPoint();
        double double30 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint28);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray46 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray48 = euclideanIntegerPoint47.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        java.lang.Class<?> wildcardClass52 = intArray48.getClass();
        boolean boolean53 = euclideanIntegerPoint41.equals((java.lang.Object) intArray48);
        double double54 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint41);
        int[] intArray61 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        int[] intArray68 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray68);
        int[] intArray70 = euclideanIntegerPoint69.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        int[] intArray79 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint88 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList90 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90, euclideanIntegerPointArray89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint80.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = euclideanIntegerPoint72.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint93);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint94);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint95);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray23 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray25 = euclideanIntegerPoint24.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        java.lang.String str36 = euclideanIntegerPoint35.toString();
        double double37 = euclideanIntegerPoint27.distanceFrom(euclideanIntegerPoint35);
        java.lang.String str38 = euclideanIntegerPoint35.toString();
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        java.lang.String str47 = euclideanIntegerPoint46.toString();
        int[] intArray48 = euclideanIntegerPoint46.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        int[] intArray56 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint65 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList67 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67, euclideanIntegerPointArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = euclideanIntegerPoint57.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = euclideanIntegerPoint49.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67);
        java.lang.Class<?> wildcardClass73 = euclideanIntegerPoint16.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(-1,10,10,97,10,100)" + "'", str36, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 11.445523142259598d + "'", double37 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(-1,10,10,97,10,100)" + "'", str38, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(-1,10,10,97,10,100)" + "'", str47, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint69);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint70);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint71);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        int[] intArray20 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray37 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray39 = euclideanIntegerPoint38.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        int[] intArray48 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        java.lang.String str50 = euclideanIntegerPoint49.toString();
        double double51 = euclideanIntegerPoint41.distanceFrom(euclideanIntegerPoint49);
        java.lang.String str52 = euclideanIntegerPoint49.toString();
        java.lang.String str53 = euclideanIntegerPoint49.toString();
        int[] intArray58 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        int[] intArray60 = euclideanIntegerPoint59.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        int[] intArray69 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray77 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint78 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList80 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList80, euclideanIntegerPointArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = euclideanIntegerPoint70.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = euclideanIntegerPoint62.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = euclideanIntegerPoint49.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList80);
        java.lang.Class<?> wildcardClass87 = euclideanIntegerPoint21.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(-1,10,10,97,10,100)" + "'", str50, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 11.445523142259598d + "'", double51 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(-1,10,10,97,10,100)" + "'", str52, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(-1,10,10,97,10,100)" + "'", str53, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint82);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint83);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint84);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint85);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray28 = euclideanIntegerPoint27.getPoint();
        boolean boolean30 = euclideanIntegerPoint27.equals((java.lang.Object) (short) 10);
        double double31 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint27);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint47 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList49 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49, euclideanIntegerPointArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint39.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        int[] intArray68 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray68);
        int[] intArray70 = euclideanIntegerPoint69.getPoint();
        java.lang.String str71 = euclideanIntegerPoint69.toString();
        int[] intArray72 = euclideanIntegerPoint69.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        boolean boolean74 = euclideanIntegerPoint61.equals((java.lang.Object) euclideanIntegerPoint73);
        int[] intArray79 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray81 = euclideanIntegerPoint80.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        boolean boolean86 = euclideanIntegerPoint73.equals((java.lang.Object) euclideanIntegerPoint85);
        int[] intArray87 = euclideanIntegerPoint85.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        boolean boolean89 = euclideanIntegerPoint27.equals((java.lang.Object) intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        java.lang.Class<?> wildcardClass92 = euclideanIntegerPoint91.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 11.445523142259598d + "'", double31 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint52);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(-1,10,10,97,10,100)" + "'", str71, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        java.lang.String str27 = euclideanIntegerPoint26.toString();
        int[] intArray28 = euclideanIntegerPoint26.getPoint();
        boolean boolean30 = euclideanIntegerPoint26.equals((java.lang.Object) 1.0d);
        int[] intArray31 = euclideanIntegerPoint26.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        double double33 = euclideanIntegerPoint18.distanceFrom(euclideanIntegerPoint32);
        boolean boolean34 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint18);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        int[] intArray50 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray52 = euclideanIntegerPoint51.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        java.lang.Class<?> wildcardClass56 = intArray52.getClass();
        boolean boolean57 = euclideanIntegerPoint45.equals((java.lang.Object) intArray52);
        boolean boolean58 = euclideanIntegerPoint7.equals((java.lang.Object) boolean57);
        java.lang.String str59 = euclideanIntegerPoint7.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(-1,10,10,97,10,100)" + "'", str27, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(-1,10,10,97,10,100)" + "'", str59, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        boolean boolean83 = euclideanIntegerPoint7.equals((java.lang.Object) intArray80);
        java.lang.Object obj84 = null;
        boolean boolean85 = euclideanIntegerPoint7.equals(obj84);
        int[] intArray86 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass87 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        java.lang.String str6 = euclideanIntegerPoint5.toString();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        double double19 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint18);
        java.lang.String str20 = euclideanIntegerPoint5.toString();
        int[] intArray25 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray27 = euclideanIntegerPoint26.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        java.lang.String str38 = euclideanIntegerPoint37.toString();
        double double39 = euclideanIntegerPoint29.distanceFrom(euclideanIntegerPoint37);
        java.lang.String str40 = euclideanIntegerPoint37.toString();
        int[] intArray47 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        java.lang.String str49 = euclideanIntegerPoint48.toString();
        int[] intArray50 = euclideanIntegerPoint48.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint67 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList69 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69, euclideanIntegerPointArray68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = euclideanIntegerPoint59.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = euclideanIntegerPoint51.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = euclideanIntegerPoint37.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = euclideanIntegerPoint5.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint74.centroidOf(euclideanIntegerPointCollection75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(0,10,-1,100)" + "'", str6, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 11.445523142259598d + "'", double19 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(0,10,-1,100)" + "'", str20, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(-1,10,10,97,10,100)" + "'", str38, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 11.445523142259598d + "'", double39 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(-1,10,10,97,10,100)" + "'", str40, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(-1,10,10,97,10,100)" + "'", str49, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint71);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint72);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint73);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint74);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        int[] intArray20 = euclideanIntegerPoint16.getPoint();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray29 = euclideanIntegerPoint28.getPoint();
        java.lang.String str30 = euclideanIntegerPoint28.toString();
        int[] intArray31 = euclideanIntegerPoint28.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        java.lang.String str41 = euclideanIntegerPoint40.toString();
        int[] intArray42 = euclideanIntegerPoint40.getPoint();
        int[] intArray43 = euclideanIntegerPoint40.getPoint();
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        java.lang.String str60 = euclideanIntegerPoint59.toString();
        int[] intArray61 = euclideanIntegerPoint59.getPoint();
        boolean boolean63 = euclideanIntegerPoint59.equals((java.lang.Object) 1.0d);
        int[] intArray64 = euclideanIntegerPoint59.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        double double66 = euclideanIntegerPoint51.distanceFrom(euclideanIntegerPoint65);
        boolean boolean67 = euclideanIntegerPoint40.equals((java.lang.Object) euclideanIntegerPoint51);
        boolean boolean68 = euclideanIntegerPoint32.equals((java.lang.Object) euclideanIntegerPoint51);
        double double69 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint32);
        java.lang.String str70 = euclideanIntegerPoint16.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(-1,10,10,97,10,100)" + "'", str30, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(-1,10,10,97,10,100)" + "'", str41, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(-1,10,10,97,10,100)" + "'", str60, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint12 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        java.lang.Class<?> wildcardClass14 = euclideanIntegerPoint13.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        int[] intArray22 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        java.lang.String str24 = euclideanIntegerPoint23.toString();
        double double25 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint23);
        java.lang.Class<?> wildcardClass26 = euclideanIntegerPoint5.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(0,10,-1,100)" + "'", str24, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        double double25 = euclideanIntegerPoint14.distanceFrom(euclideanIntegerPoint24);
        int[] intArray26 = euclideanIntegerPoint24.getPoint();
        int[] intArray27 = euclideanIntegerPoint24.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        boolean boolean29 = euclideanIntegerPoint8.equals((java.lang.Object) intArray27);
        java.lang.Object obj30 = null;
        boolean boolean31 = euclideanIntegerPoint8.equals(obj30);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 11.445523142259598d + "'", double25 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray10 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray12 = euclideanIntegerPoint11.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        double double14 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint13);
        int[] intArray21 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint22 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray21);
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint46 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList48 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48, euclideanIntegerPointArray47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = euclideanIntegerPoint38.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        int[] intArray57 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint66 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList68 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68, euclideanIntegerPointArray67);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = euclideanIntegerPoint58.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        int[] intArray77 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray77);
        java.lang.String str79 = euclideanIntegerPoint78.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint30, euclideanIntegerPoint50, euclideanIntegerPoint58, euclideanIntegerPoint78 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList81 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList81, euclideanIntegerPointArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = euclideanIntegerPoint22.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList81);
        int[] intArray84 = euclideanIntegerPoint22.getPoint();
        java.lang.String str85 = euclideanIntegerPoint22.toString();
        int[] intArray86 = euclideanIntegerPoint22.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        double double88 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint87);
        java.lang.String str89 = euclideanIntegerPoint5.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint50);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint70);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 11.445523142259598d + "'", double88 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(0,10,-1,100)" + "'", str89, "(0,10,-1,100)");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        int[] intArray19 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint53 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList55 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55, euclideanIntegerPointArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = euclideanIntegerPoint45.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint37, euclideanIntegerPoint57, euclideanIntegerPoint65, euclideanIntegerPoint85 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList88 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88, euclideanIntegerPointArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        int[] intArray94 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray94);
        java.lang.String str97 = euclideanIntegerPoint96.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(-1,10,10,97,10,100)" + "'", str97, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        java.lang.String str10 = euclideanIntegerPoint8.toString();
        int[] intArray11 = euclideanIntegerPoint8.getPoint();
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        java.lang.String str20 = euclideanIntegerPoint19.toString();
        int[] intArray21 = euclideanIntegerPoint19.getPoint();
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint53 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList55 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55, euclideanIntegerPointArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = euclideanIntegerPoint45.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint37, euclideanIntegerPoint57, euclideanIntegerPoint65, euclideanIntegerPoint85 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList88 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88, euclideanIntegerPointArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(0,10,-1,100)" + "'", str10, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray79 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint88 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList90 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90, euclideanIntegerPointArray89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint80.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = euclideanIntegerPoint72.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        java.lang.String str94 = euclideanIntegerPoint72.toString();
        int[] intArray95 = euclideanIntegerPoint72.getPoint();
        java.lang.Class<?> wildcardClass96 = euclideanIntegerPoint72.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        int[] intArray22 = euclideanIntegerPoint8.getPoint();
        java.lang.Class<?> wildcardClass23 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        boolean boolean19 = euclideanIntegerPoint15.equals((java.lang.Object) 1.0d);
        int[] intArray20 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        double double22 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint21);
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint54 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList56 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56, euclideanIntegerPointArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = euclideanIntegerPoint46.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint66.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray85 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        java.lang.String str87 = euclideanIntegerPoint86.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint38, euclideanIntegerPoint58, euclideanIntegerPoint66, euclideanIntegerPoint86 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList89 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89, euclideanIntegerPointArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint91);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        java.lang.String str94 = euclideanIntegerPoint7.toString();
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        java.lang.String str96 = euclideanIntegerPoint7.toString();
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = euclideanIntegerPoint7.centroidOf(euclideanIntegerPointCollection97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint58);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(-1,10,10,97,10,100)" + "'", str87, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(-1,10,10,97,10,100)" + "'", str96, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        int[] intArray6 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint33 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList35 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35, euclideanIntegerPointArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = euclideanIntegerPoint25.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        java.lang.Class<?> wildcardClass40 = euclideanIntegerPoint39.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint37);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint38);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        int[] intArray89 = euclideanIntegerPoint87.getPoint();
        boolean boolean91 = euclideanIntegerPoint87.equals((java.lang.Object) 1.0d);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint87);
        java.lang.String str93 = euclideanIntegerPoint87.toString();
        java.lang.String str94 = euclideanIntegerPoint87.toString();
        java.lang.String str95 = euclideanIntegerPoint87.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(-1,10,10,97,10,100)" + "'", str95, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray24 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray26 = euclideanIntegerPoint25.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        java.lang.String str37 = euclideanIntegerPoint36.toString();
        double double38 = euclideanIntegerPoint28.distanceFrom(euclideanIntegerPoint36);
        java.lang.String str39 = euclideanIntegerPoint36.toString();
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        java.lang.String str48 = euclideanIntegerPoint47.toString();
        int[] intArray49 = euclideanIntegerPoint47.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        int[] intArray57 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint66 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList68 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68, euclideanIntegerPointArray67);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = euclideanIntegerPoint58.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = euclideanIntegerPoint50.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = euclideanIntegerPoint36.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        java.lang.Class<?> wildcardClass74 = euclideanIntegerPoint19.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(-1,10,10,97,10,100)" + "'", str37, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 11.445523142259598d + "'", double38 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(-1,10,10,97,10,100)" + "'", str48, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint70);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint71);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint72);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        int[] intArray29 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint46 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList48 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48, euclideanIntegerPointArray47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = euclideanIntegerPoint38.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        int[] intArray53 = euclideanIntegerPoint16.getPoint();
        java.lang.String str54 = euclideanIntegerPoint16.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint50);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(-1,10,10,97,10,100)" + "'", str54, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        boolean boolean83 = euclideanIntegerPoint7.equals((java.lang.Object) intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        java.lang.Class<?> wildcardClass86 = euclideanIntegerPoint84.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        int[] intArray24 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray26 = euclideanIntegerPoint25.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        java.lang.String str37 = euclideanIntegerPoint36.toString();
        double double38 = euclideanIntegerPoint28.distanceFrom(euclideanIntegerPoint36);
        java.lang.String str39 = euclideanIntegerPoint36.toString();
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        java.lang.String str48 = euclideanIntegerPoint47.toString();
        int[] intArray49 = euclideanIntegerPoint47.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        int[] intArray57 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint66 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList68 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68, euclideanIntegerPointArray67);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = euclideanIntegerPoint58.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = euclideanIntegerPoint50.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = euclideanIntegerPoint36.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        int[] intArray73 = euclideanIntegerPoint36.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        boolean boolean75 = euclideanIntegerPoint16.equals((java.lang.Object) euclideanIntegerPoint74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double77 = euclideanIntegerPoint74.distanceFrom(euclideanIntegerPoint76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(-1,10,10,97,10,100)" + "'", str37, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 11.445523142259598d + "'", double38 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(-1,10,10,97,10,100)" + "'", str48, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint70);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint71);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray16 = euclideanIntegerPoint15.getPoint();
        java.lang.String str17 = euclideanIntegerPoint15.toString();
        int[] intArray18 = euclideanIntegerPoint15.getPoint();
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        int[] intArray49 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint50 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList52 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList52, euclideanIntegerPointArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = euclideanIntegerPoint42.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList52);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        int[] intArray69 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint70 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList72 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72, euclideanIntegerPointArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = euclideanIntegerPoint62.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72);
        int[] intArray81 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        java.lang.String str83 = euclideanIntegerPoint82.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint34, euclideanIntegerPoint54, euclideanIntegerPoint62, euclideanIntegerPoint82 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList85 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85, euclideanIntegerPointArray84);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = euclideanIntegerPoint26.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint15.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85);
        java.lang.Class<?> wildcardClass90 = euclideanIntegerPoint89.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint74);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint87);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str11 = euclideanIntegerPoint10.toString();
        java.lang.String str12 = euclideanIntegerPoint10.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(-1,10,10,97,10,100)" + "'", str11, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(-1,10,10,97,10,100)" + "'", str12, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray24 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray26 = euclideanIntegerPoint25.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        java.lang.String str37 = euclideanIntegerPoint36.toString();
        double double38 = euclideanIntegerPoint28.distanceFrom(euclideanIntegerPoint36);
        boolean boolean39 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint36);
        java.lang.Class<?> wildcardClass40 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(-1,10,10,97,10,100)" + "'", str37, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 11.445523142259598d + "'", double38 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        java.lang.String str71 = euclideanIntegerPoint7.toString();
        java.lang.String str72 = euclideanIntegerPoint7.toString();
        int[] intArray73 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(-1,10,10,97,10,100)" + "'", str71, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint10.toString();
        int[] intArray33 = euclideanIntegerPoint10.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray40 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        int[] intArray42 = euclideanIntegerPoint41.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray44 = euclideanIntegerPoint43.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            double double45 = euclideanIntegerPoint35.distanceFrom(euclideanIntegerPoint43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 10, -1, 100]");
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        java.lang.String str18 = euclideanIntegerPoint5.toString();
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        int[] intArray49 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint50 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList52 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList52, euclideanIntegerPointArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = euclideanIntegerPoint42.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList52);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        int[] intArray69 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint70 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList72 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72, euclideanIntegerPointArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = euclideanIntegerPoint62.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72);
        int[] intArray81 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        java.lang.String str83 = euclideanIntegerPoint82.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint34, euclideanIntegerPoint54, euclideanIntegerPoint62, euclideanIntegerPoint82 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList85 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85, euclideanIntegerPointArray84);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = euclideanIntegerPoint26.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85);
        double double88 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint26);
        java.lang.String str89 = euclideanIntegerPoint5.toString();
        java.lang.Class<?> wildcardClass90 = euclideanIntegerPoint5.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(0,10,-1,100)" + "'", str18, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint74);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 11.445523142259598d + "'", double88 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(0,10,-1,100)" + "'", str89, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        int[] intArray13 = euclideanIntegerPoint7.getPoint();
        int[] intArray14 = euclideanIntegerPoint7.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList26 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26, euclideanIntegerPointArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray38 = euclideanIntegerPoint37.getPoint();
        java.lang.String str39 = euclideanIntegerPoint37.toString();
        int[] intArray40 = euclideanIntegerPoint37.getPoint();
        double double41 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint37);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = euclideanIntegerPoint37.centroidOf(euclideanIntegerPointCollection42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint28);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 11.445523142259598d + "'", double41 == 11.445523142259598d);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        java.lang.Class<?> wildcardClass76 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray24 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray26 = euclideanIntegerPoint25.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        java.lang.String str37 = euclideanIntegerPoint36.toString();
        double double38 = euclideanIntegerPoint28.distanceFrom(euclideanIntegerPoint36);
        boolean boolean39 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint36);
        java.lang.Class<?> wildcardClass40 = euclideanIntegerPoint36.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(-1,10,10,97,10,100)" + "'", str37, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 11.445523142259598d + "'", double38 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray28 = euclideanIntegerPoint27.getPoint();
        boolean boolean30 = euclideanIntegerPoint27.equals((java.lang.Object) (short) 10);
        double double31 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint27);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint47 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList49 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49, euclideanIntegerPointArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint39.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49);
        int[] intArray53 = euclideanIntegerPoint27.getPoint();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 11.445523142259598d + "'", double31 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        java.lang.String str99 = euclideanIntegerPoint98.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "(-1,10,10,97,10,100)" + "'", str99, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        java.lang.Class<?> wildcardClass72 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        java.lang.String str26 = euclideanIntegerPoint25.toString();
        double double27 = euclideanIntegerPoint17.distanceFrom(euclideanIntegerPoint25);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray37 = euclideanIntegerPoint36.getPoint();
        boolean boolean39 = euclideanIntegerPoint36.equals((java.lang.Object) (short) 10);
        double double40 = euclideanIntegerPoint17.distanceFrom(euclideanIntegerPoint36);
        double double41 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint36);
        int[] intArray48 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        int[] intArray57 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        int[] intArray59 = euclideanIntegerPoint58.getPoint();
        java.lang.String str60 = euclideanIntegerPoint58.toString();
        int[] intArray61 = euclideanIntegerPoint58.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        boolean boolean63 = euclideanIntegerPoint50.equals((java.lang.Object) euclideanIntegerPoint62);
        int[] intArray68 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray68);
        int[] intArray70 = euclideanIntegerPoint69.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        boolean boolean75 = euclideanIntegerPoint62.equals((java.lang.Object) euclideanIntegerPoint74);
        double double76 = euclideanIntegerPoint36.distanceFrom(euclideanIntegerPoint62);
        int[] intArray81 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        int[] intArray83 = euclideanIntegerPoint82.getPoint();
        java.lang.String str84 = euclideanIntegerPoint82.toString();
        int[] intArray85 = euclideanIntegerPoint82.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            double double86 = euclideanIntegerPoint36.distanceFrom(euclideanIntegerPoint82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(-1,10,10,97,10,100)" + "'", str26, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 11.445523142259598d + "'", double27 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 11.445523142259598d + "'", double40 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(-1,10,10,97,10,100)" + "'", str60, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(0,10,-1,100)" + "'", str84, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 10, -1, 100]");
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        java.lang.String str10 = euclideanIntegerPoint9.toString();
        int[] intArray11 = euclideanIntegerPoint9.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint12 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        int[] intArray14 = euclideanIntegerPoint13.getPoint();
        int[] intArray21 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint22 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray21);
        int[] intArray23 = euclideanIntegerPoint22.getPoint();
        java.lang.String str24 = euclideanIntegerPoint22.toString();
        int[] intArray25 = euclideanIntegerPoint22.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        int[] intArray49 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        int[] intArray57 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint58 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList60 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList60, euclideanIntegerPointArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = euclideanIntegerPoint50.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList60);
        int[] intArray69 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray77 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint78 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList80 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList80, euclideanIntegerPointArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = euclideanIntegerPoint70.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList80);
        int[] intArray89 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray89);
        java.lang.String str91 = euclideanIntegerPoint90.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray92 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint42, euclideanIntegerPoint62, euclideanIntegerPoint70, euclideanIntegerPoint90 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList93 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList93, euclideanIntegerPointArray92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = euclideanIntegerPoint34.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList93);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = euclideanIntegerPoint26.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList93);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = euclideanIntegerPoint13.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList93);
        java.lang.Class<?> wildcardClass98 = euclideanIntegerPoint13.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(-1,10,10,97,10,100)" + "'", str10, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(-1,10,10,97,10,100)" + "'", str24, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint62);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint82);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-1,10,10,97,10,100)" + "'", str91, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint95);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint96);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint16);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(0,32,10,1,0,52)" + "'", str17, "(0,32,10,1,0,52)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 102.00980345045274d + "'", double18 == 102.00980345045274d);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        double double91 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint89);
        java.lang.String str92 = euclideanIntegerPoint89.toString();
        int[] intArray93 = euclideanIntegerPoint89.getPoint();
        int[] intArray94 = euclideanIntegerPoint89.getPoint();
        int[] intArray95 = euclideanIntegerPoint89.getPoint();
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        java.lang.String str18 = euclideanIntegerPoint5.toString();
        int[] intArray19 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        java.lang.String str21 = euclideanIntegerPoint20.toString();
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint53 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList55 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55, euclideanIntegerPointArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = euclideanIntegerPoint45.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint37, euclideanIntegerPoint57, euclideanIntegerPoint65, euclideanIntegerPoint85 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList88 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88, euclideanIntegerPointArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        int[] intArray91 = euclideanIntegerPoint29.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        java.lang.Class<?> wildcardClass93 = intArray91.getClass();
        boolean boolean94 = euclideanIntegerPoint20.equals((java.lang.Object) intArray91);
        int[] intArray95 = euclideanIntegerPoint20.getPoint();
        java.lang.Class<?> wildcardClass96 = euclideanIntegerPoint20.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(0,10,-1,100)" + "'", str18, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(0,10,-1,100)" + "'", str21, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        java.lang.Class<?> wildcardClass18 = euclideanIntegerPoint5.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        java.lang.String str78 = euclideanIntegerPoint77.toString();
        int[] intArray79 = euclideanIntegerPoint77.getPoint();
        boolean boolean81 = euclideanIntegerPoint77.equals((java.lang.Object) 1.0d);
        int[] intArray82 = euclideanIntegerPoint77.getPoint();
        double double83 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint77);
        java.lang.String str84 = euclideanIntegerPoint7.toString();
        int[] intArray85 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double74 = euclideanIntegerPoint72.distanceFrom(euclideanIntegerPoint73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint43 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList45 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45, euclideanIntegerPointArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList65 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65, euclideanIntegerPointArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = euclideanIntegerPoint55.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        java.lang.String str76 = euclideanIntegerPoint75.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint27, euclideanIntegerPoint47, euclideanIntegerPoint55, euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList78 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78, euclideanIntegerPointArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint11.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        boolean boolean93 = euclideanIntegerPoint89.equals((java.lang.Object) 1.0d);
        java.lang.String str94 = euclideanIntegerPoint89.toString();
        double double95 = euclideanIntegerPoint81.distanceFrom(euclideanIntegerPoint89);
        int[] intArray96 = euclideanIntegerPoint81.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        java.lang.String str98 = euclideanIntegerPoint97.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(-1,10,10,97,10,100)" + "'", str76, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "(-1,10,10,97,10,100)" + "'", str98, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        java.lang.String str26 = euclideanIntegerPoint25.toString();
        double double27 = euclideanIntegerPoint17.distanceFrom(euclideanIntegerPoint25);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray37 = euclideanIntegerPoint36.getPoint();
        boolean boolean39 = euclideanIntegerPoint36.equals((java.lang.Object) (short) 10);
        double double40 = euclideanIntegerPoint17.distanceFrom(euclideanIntegerPoint36);
        double double41 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint36);
        java.lang.String str42 = euclideanIntegerPoint36.toString();
        int[] intArray47 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        int[] intArray49 = euclideanIntegerPoint48.getPoint();
        int[] intArray56 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        double double59 = euclideanIntegerPoint48.distanceFrom(euclideanIntegerPoint58);
        int[] intArray60 = euclideanIntegerPoint48.getPoint();
        int[] intArray65 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        java.lang.String str67 = euclideanIntegerPoint66.toString();
        double double68 = euclideanIntegerPoint48.distanceFrom(euclideanIntegerPoint66);
        boolean boolean69 = euclideanIntegerPoint36.equals((java.lang.Object) euclideanIntegerPoint66);
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        java.lang.String str78 = euclideanIntegerPoint77.toString();
        int[] intArray79 = euclideanIntegerPoint77.getPoint();
        boolean boolean81 = euclideanIntegerPoint77.equals((java.lang.Object) 1.0d);
        java.lang.Class<?> wildcardClass82 = euclideanIntegerPoint77.getClass();
        boolean boolean83 = euclideanIntegerPoint66.equals((java.lang.Object) euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(-1,10,10,97,10,100)" + "'", str26, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 11.445523142259598d + "'", double27 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 11.445523142259598d + "'", double40 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(-1,10,10,97,10,100)" + "'", str42, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 11.445523142259598d + "'", double59 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(0,10,-1,100)" + "'", str67, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        double double29 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint27);
        java.lang.String str30 = euclideanIntegerPoint27.toString();
        java.lang.String str31 = euclideanIntegerPoint27.toString();
        int[] intArray36 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray38 = euclideanIntegerPoint37.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray47 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint56 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList58 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58, euclideanIntegerPointArray57);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = euclideanIntegerPoint48.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = euclideanIntegerPoint40.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        java.lang.Class<?> wildcardClass64 = euclideanIntegerPoint10.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 11.445523142259598d + "'", double29 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(-1,10,10,97,10,100)" + "'", str30, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(-1,10,10,97,10,100)" + "'", str31, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint60);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint61);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint62);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        int[] intArray20 = euclideanIntegerPoint16.getPoint();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray29 = euclideanIntegerPoint28.getPoint();
        java.lang.String str30 = euclideanIntegerPoint28.toString();
        int[] intArray31 = euclideanIntegerPoint28.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        java.lang.String str41 = euclideanIntegerPoint40.toString();
        int[] intArray42 = euclideanIntegerPoint40.getPoint();
        int[] intArray43 = euclideanIntegerPoint40.getPoint();
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        java.lang.String str60 = euclideanIntegerPoint59.toString();
        int[] intArray61 = euclideanIntegerPoint59.getPoint();
        boolean boolean63 = euclideanIntegerPoint59.equals((java.lang.Object) 1.0d);
        int[] intArray64 = euclideanIntegerPoint59.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        double double66 = euclideanIntegerPoint51.distanceFrom(euclideanIntegerPoint65);
        boolean boolean67 = euclideanIntegerPoint40.equals((java.lang.Object) euclideanIntegerPoint51);
        boolean boolean68 = euclideanIntegerPoint32.equals((java.lang.Object) euclideanIntegerPoint51);
        double double69 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint32);
        java.lang.String str70 = euclideanIntegerPoint32.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(-1,10,10,97,10,100)" + "'", str30, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(-1,10,10,97,10,100)" + "'", str41, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(-1,10,10,97,10,100)" + "'", str60, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        boolean boolean83 = euclideanIntegerPoint68.equals((java.lang.Object) "hi!");
        int[] intArray84 = euclideanIntegerPoint68.getPoint();
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        java.lang.String str72 = euclideanIntegerPoint7.toString();
        int[] intArray73 = euclideanIntegerPoint7.getPoint();
        int[] intArray74 = euclideanIntegerPoint7.getPoint();
        int[] intArray75 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        java.lang.Class<?> wildcardClass95 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        int[] intArray96 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        java.lang.Class<?> wildcardClass98 = euclideanIntegerPoint97.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        int[] intArray6 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray10 = euclideanIntegerPoint9.getPoint();
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint42 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList44 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44, euclideanIntegerPointArray43);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = euclideanIntegerPoint34.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint62 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList64 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64, euclideanIntegerPointArray63);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = euclideanIntegerPoint54.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        java.lang.String str75 = euclideanIntegerPoint74.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26, euclideanIntegerPoint46, euclideanIntegerPoint54, euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList77 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77, euclideanIntegerPointArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        int[] intArray89 = euclideanIntegerPoint87.getPoint();
        boolean boolean91 = euclideanIntegerPoint87.equals((java.lang.Object) 1.0d);
        double double92 = euclideanIntegerPoint79.distanceFrom(euclideanIntegerPoint87);
        boolean boolean94 = euclideanIntegerPoint79.equals((java.lang.Object) "hi!");
        java.lang.String str95 = euclideanIntegerPoint79.toString();
        int[] intArray96 = euclideanIntegerPoint79.getPoint();
        boolean boolean97 = euclideanIntegerPoint9.equals((java.lang.Object) intArray96);
        java.lang.Class<?> wildcardClass98 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(-1,10,10,97,10,100)" + "'", str75, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(-1,10,10,97,10,100)" + "'", str95, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        java.lang.Class<?> wildcardClass83 = euclideanIntegerPoint82.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        java.lang.String str11 = euclideanIntegerPoint10.toString();
        java.lang.Class<?> wildcardClass12 = euclideanIntegerPoint10.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(0,10,-1,100)" + "'", str11, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray11 = euclideanIntegerPoint7.getPoint();
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        int[] intArray19 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        java.lang.String str21 = euclideanIntegerPoint20.toString();
        int[] intArray22 = euclideanIntegerPoint20.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint39 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList41 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList41, euclideanIntegerPointArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = euclideanIntegerPoint31.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList41);
        java.lang.String str45 = euclideanIntegerPoint23.toString();
        int[] intArray50 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        java.lang.String str52 = euclideanIntegerPoint51.toString();
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        int[] intArray61 = euclideanIntegerPoint60.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        double double65 = euclideanIntegerPoint51.distanceFrom(euclideanIntegerPoint64);
        boolean boolean66 = euclideanIntegerPoint23.equals((java.lang.Object) euclideanIntegerPoint51);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(-1,10,10,97,10,100)" + "'", str21, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint43);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(-1,10,10,97,10,100)" + "'", str45, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(0,10,-1,100)" + "'", str52, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 11.445523142259598d + "'", double65 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        java.lang.String str20 = euclideanIntegerPoint16.toString();
        int[] intArray25 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray27 = euclideanIntegerPoint26.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint45 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList47 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47, euclideanIntegerPointArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = euclideanIntegerPoint37.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        java.lang.Class<?> wildcardClass52 = euclideanIntegerPointList47.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint49);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint50);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray26 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray28 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        java.lang.String str39 = euclideanIntegerPoint38.toString();
        double double40 = euclideanIntegerPoint30.distanceFrom(euclideanIntegerPoint38);
        java.lang.String str41 = euclideanIntegerPoint38.toString();
        java.lang.String str42 = euclideanIntegerPoint38.toString();
        int[] intArray47 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        int[] intArray49 = euclideanIntegerPoint48.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint67 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList69 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69, euclideanIntegerPointArray68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = euclideanIntegerPoint59.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = euclideanIntegerPoint51.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = euclideanIntegerPoint38.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        double double75 = euclideanIntegerPoint10.distanceFrom(euclideanIntegerPoint74);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 11.445523142259598d + "'", double40 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(-1,10,10,97,10,100)" + "'", str41, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(-1,10,10,97,10,100)" + "'", str42, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint71);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint72);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint73);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.Class<?> wildcardClass20 = euclideanIntegerPoint19.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.Class<?> wildcardClass19 = euclideanIntegerPoint16.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        java.lang.String str81 = euclideanIntegerPoint79.toString();
        java.lang.String str82 = euclideanIntegerPoint79.toString();
        java.lang.Class<?> wildcardClass83 = euclideanIntegerPoint79.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(-1,10,10,97,10,100)" + "'", str81, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(-1,10,10,97,10,100)" + "'", str82, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray14 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray16 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        java.lang.String str27 = euclideanIntegerPoint26.toString();
        double double28 = euclideanIntegerPoint18.distanceFrom(euclideanIntegerPoint26);
        int[] intArray29 = euclideanIntegerPoint26.getPoint();
        int[] intArray30 = euclideanIntegerPoint26.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray47 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        int[] intArray49 = euclideanIntegerPoint48.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        java.lang.String str60 = euclideanIntegerPoint59.toString();
        double double61 = euclideanIntegerPoint51.distanceFrom(euclideanIntegerPoint59);
        java.lang.String str62 = euclideanIntegerPoint59.toString();
        java.lang.String str63 = euclideanIntegerPoint59.toString();
        int[] intArray68 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray68);
        int[] intArray70 = euclideanIntegerPoint69.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        int[] intArray79 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint88 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList90 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90, euclideanIntegerPointArray89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint80.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = euclideanIntegerPoint72.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = euclideanIntegerPoint59.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = euclideanIntegerPoint42.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = euclideanIntegerPoint31.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(-1,10,10,97,10,100)" + "'", str27, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 11.445523142259598d + "'", double28 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(-1,10,10,97,10,100)" + "'", str60, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 11.445523142259598d + "'", double61 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(-1,10,10,97,10,100)" + "'", str62, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(-1,10,10,97,10,100)" + "'", str63, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint93);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint94);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint95);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint96);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint97);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.Class<?> wildcardClass21 = intArray17.getClass();
        boolean boolean22 = euclideanIntegerPoint10.equals((java.lang.Object) intArray17);
        int[] intArray23 = euclideanIntegerPoint10.getPoint();
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray32 = euclideanIntegerPoint31.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        boolean boolean34 = euclideanIntegerPoint10.equals((java.lang.Object) intArray32);
        java.lang.Class<?> wildcardClass35 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray20 = euclideanIntegerPoint19.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        boolean boolean22 = euclideanIntegerPoint10.equals((java.lang.Object) euclideanIntegerPoint21);
        int[] intArray23 = euclideanIntegerPoint10.getPoint();
        int[] intArray30 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray37 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray39 = euclideanIntegerPoint38.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        int[] intArray48 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        int[] intArray56 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint57 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList59 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59, euclideanIntegerPointArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = euclideanIntegerPoint49.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = euclideanIntegerPoint41.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59);
        int[] intArray69 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray74 = euclideanIntegerPoint73.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        boolean boolean77 = euclideanIntegerPoint64.equals((java.lang.Object) intArray74);
        java.lang.Class<?> wildcardClass78 = euclideanIntegerPoint64.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint61);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint62);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        java.lang.String str12 = euclideanIntegerPoint11.toString();
        java.lang.Class<?> wildcardClass13 = euclideanIntegerPoint11.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(-1,10,10,97,10,100)" + "'", str12, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        boolean boolean19 = euclideanIntegerPoint15.equals((java.lang.Object) 1.0d);
        int[] intArray20 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        double double22 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint21);
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint54 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList56 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56, euclideanIntegerPointArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = euclideanIntegerPoint46.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint66.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray85 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        java.lang.String str87 = euclideanIntegerPoint86.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint38, euclideanIntegerPoint58, euclideanIntegerPoint66, euclideanIntegerPoint86 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList89 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89, euclideanIntegerPointArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint91);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        java.lang.String str94 = euclideanIntegerPoint7.toString();
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        java.lang.String str96 = euclideanIntegerPoint7.toString();
        java.lang.String str97 = euclideanIntegerPoint7.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint58);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(-1,10,10,97,10,100)" + "'", str87, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(-1,10,10,97,10,100)" + "'", str96, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(-1,10,10,97,10,100)" + "'", str97, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass9 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        int[] intArray3 = new int[] { (byte) -1, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint4 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray3);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1, 100]");
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        java.lang.String str72 = euclideanIntegerPoint70.toString();
        int[] intArray77 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray77);
        int[] intArray79 = euclideanIntegerPoint78.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        double double91 = euclideanIntegerPoint81.distanceFrom(euclideanIntegerPoint89);
        double double92 = euclideanIntegerPoint70.distanceFrom(euclideanIntegerPoint89);
        int[] intArray93 = euclideanIntegerPoint70.getPoint();
        java.lang.Class<?> wildcardClass94 = euclideanIntegerPoint70.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 11.445523142259598d + "'", double91 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList26 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26, euclideanIntegerPointArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList26);
        int[] intArray30 = euclideanIntegerPoint29.getPoint();
        java.lang.Class<?> wildcardClass31 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint28);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray20 = euclideanIntegerPoint19.getPoint();
        java.lang.String str21 = euclideanIntegerPoint19.toString();
        int[] intArray22 = euclideanIntegerPoint19.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        boolean boolean24 = euclideanIntegerPoint11.equals((java.lang.Object) intArray22);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        java.lang.String str53 = euclideanIntegerPoint52.toString();
        int[] intArray54 = euclideanIntegerPoint52.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        int[] intArray60 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        int[] intArray62 = euclideanIntegerPoint61.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray65 = euclideanIntegerPoint64.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        boolean boolean67 = euclideanIntegerPoint55.equals((java.lang.Object) euclideanIntegerPoint66);
        double double68 = euclideanIntegerPoint44.distanceFrom(euclideanIntegerPoint55);
        java.lang.String str69 = euclideanIntegerPoint55.toString();
        int[] intArray70 = euclideanIntegerPoint55.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        double double72 = euclideanIntegerPoint11.distanceFrom(euclideanIntegerPoint71);
        java.lang.Class<?> wildcardClass73 = euclideanIntegerPoint71.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(-1,10,10,97,10,100)" + "'", str21, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(-1,10,10,97,10,100)" + "'", str53, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        int[] intArray18 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray24 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray26 = euclideanIntegerPoint25.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        java.lang.String str37 = euclideanIntegerPoint36.toString();
        double double38 = euclideanIntegerPoint28.distanceFrom(euclideanIntegerPoint36);
        java.lang.String str39 = euclideanIntegerPoint36.toString();
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray49 = euclideanIntegerPoint48.getPoint();
        double double50 = euclideanIntegerPoint36.distanceFrom(euclideanIntegerPoint48);
        double double51 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint36);
        java.lang.String str52 = euclideanIntegerPoint19.toString();
        int[] intArray53 = euclideanIntegerPoint19.getPoint();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(-1,10,10,97,10,100)" + "'", str37, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 11.445523142259598d + "'", double38 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(-1,10,10,97,10,100)" + "'", str52, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray20 = euclideanIntegerPoint19.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        boolean boolean22 = euclideanIntegerPoint10.equals((java.lang.Object) euclideanIntegerPoint21);
        int[] intArray23 = euclideanIntegerPoint10.getPoint();
        java.lang.String str24 = euclideanIntegerPoint10.toString();
        java.lang.String str25 = euclideanIntegerPoint10.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(-1,10,10,97,10,100)" + "'", str24, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(-1,10,10,97,10,100)" + "'", str25, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        java.lang.String str11 = euclideanIntegerPoint7.toString();
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass13 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(-1,10,10,97,10,100)" + "'", str11, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint53 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList55 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55, euclideanIntegerPointArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = euclideanIntegerPoint45.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint37, euclideanIntegerPoint57, euclideanIntegerPoint65, euclideanIntegerPoint85 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList88 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88, euclideanIntegerPointArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        int[] intArray91 = euclideanIntegerPoint29.getPoint();
        java.lang.String str92 = euclideanIntegerPoint29.toString();
        int[] intArray93 = euclideanIntegerPoint29.getPoint();
        boolean boolean94 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint29);
        int[] intArray95 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray19 = euclideanIntegerPoint18.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        java.lang.String str21 = euclideanIntegerPoint20.toString();
        int[] intArray22 = euclideanIntegerPoint20.getPoint();
        java.lang.String str23 = euclideanIntegerPoint20.toString();
        java.lang.String str24 = euclideanIntegerPoint20.toString();
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        java.lang.String str33 = euclideanIntegerPoint32.toString();
        int[] intArray34 = euclideanIntegerPoint32.getPoint();
        boolean boolean36 = euclideanIntegerPoint32.equals((java.lang.Object) 1.0d);
        double double37 = euclideanIntegerPoint20.distanceFrom(euclideanIntegerPoint32);
        double double38 = euclideanIntegerPoint9.distanceFrom(euclideanIntegerPoint20);
        java.lang.String str39 = euclideanIntegerPoint9.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(-1,10,10,97,10,100)" + "'", str21, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(-1,10,10,97,10,100)" + "'", str23, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(-1,10,10,97,10,100)" + "'", str24, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(-1,10,10,97,10,100)" + "'", str33, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 11.445523142259598d + "'", double38 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(0,10,-1,100)" + "'", str39, "(0,10,-1,100)");
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        int[] intArray70 = euclideanIntegerPoint7.getPoint();
        int[] intArray71 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass72 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray86 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        boolean boolean88 = euclideanIntegerPoint79.equals((java.lang.Object) intArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        int[] intArray90 = euclideanIntegerPoint89.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 32, 10, 1, 0, 52]");
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        java.lang.Class<?> wildcardClass20 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        java.lang.String str10 = euclideanIntegerPoint9.toString();
        int[] intArray11 = euclideanIntegerPoint9.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint12 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        int[] intArray20 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray22 = euclideanIntegerPoint21.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray25 = euclideanIntegerPoint24.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        boolean boolean28 = euclideanIntegerPoint15.equals((java.lang.Object) euclideanIntegerPoint27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray46 = euclideanIntegerPoint45.getPoint();
        java.lang.String str47 = euclideanIntegerPoint45.toString();
        int[] intArray48 = euclideanIntegerPoint45.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        boolean boolean50 = euclideanIntegerPoint37.equals((java.lang.Object) euclideanIntegerPoint49);
        int[] intArray55 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        int[] intArray57 = euclideanIntegerPoint56.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        boolean boolean62 = euclideanIntegerPoint49.equals((java.lang.Object) euclideanIntegerPoint61);
        int[] intArray67 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray67);
        int[] intArray69 = euclideanIntegerPoint68.getPoint();
        int[] intArray76 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        double double79 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint78);
        boolean boolean80 = euclideanIntegerPoint49.equals((java.lang.Object) euclideanIntegerPoint68);
        boolean boolean81 = euclideanIntegerPoint15.equals((java.lang.Object) boolean80);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(-1,10,10,97,10,100)" + "'", str10, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(-1,10,10,97,10,100)" + "'", str47, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 11.445523142259598d + "'", double79 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        java.lang.String str18 = euclideanIntegerPoint5.toString();
        int[] intArray19 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray22 = euclideanIntegerPoint21.getPoint();
        java.lang.Class<?> wildcardClass23 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(0,10,-1,100)" + "'", str18, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        java.lang.String str18 = euclideanIntegerPoint5.toString();
        int[] intArray19 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        java.lang.String str21 = euclideanIntegerPoint20.toString();
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint53 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList55 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55, euclideanIntegerPointArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = euclideanIntegerPoint45.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint37, euclideanIntegerPoint57, euclideanIntegerPoint65, euclideanIntegerPoint85 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList88 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88, euclideanIntegerPointArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        int[] intArray91 = euclideanIntegerPoint29.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray91);
        java.lang.Class<?> wildcardClass93 = intArray91.getClass();
        boolean boolean94 = euclideanIntegerPoint20.equals((java.lang.Object) intArray91);
        int[] intArray95 = euclideanIntegerPoint20.getPoint();
        java.lang.String str96 = euclideanIntegerPoint20.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(0,10,-1,100)" + "'", str18, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(0,10,-1,100)" + "'", str21, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(0,10,-1,100)" + "'", str96, "(0,10,-1,100)");
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str12 = euclideanIntegerPoint11.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0,10,-1,100)" + "'", str12, "(0,10,-1,100)");
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        boolean boolean19 = euclideanIntegerPoint15.equals((java.lang.Object) 1.0d);
        int[] intArray20 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        double double22 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint21);
        int[] intArray23 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray25 = euclideanIntegerPoint24.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray78 = euclideanIntegerPoint16.getPoint();
        java.lang.String str79 = euclideanIntegerPoint16.toString();
        java.lang.String str80 = euclideanIntegerPoint16.toString();
        int[] intArray81 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        boolean boolean83 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint82);
        java.lang.Class<?> wildcardClass84 = euclideanIntegerPoint82.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(-1,10,10,97,10,100)" + "'", str80, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        java.lang.String str72 = euclideanIntegerPoint70.toString();
        int[] intArray77 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray77);
        int[] intArray79 = euclideanIntegerPoint78.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        double double91 = euclideanIntegerPoint81.distanceFrom(euclideanIntegerPoint89);
        double double92 = euclideanIntegerPoint70.distanceFrom(euclideanIntegerPoint89);
        int[] intArray93 = euclideanIntegerPoint70.getPoint();
        boolean boolean95 = euclideanIntegerPoint70.equals((java.lang.Object) "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 11.445523142259598d + "'", double91 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray86 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        boolean boolean88 = euclideanIntegerPoint79.equals((java.lang.Object) intArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(0,32,10,1,0,52)" + "'", str90, "(0,32,10,1,0,52)");
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray20 = euclideanIntegerPoint19.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        boolean boolean22 = euclideanIntegerPoint10.equals((java.lang.Object) euclideanIntegerPoint21);
        int[] intArray23 = euclideanIntegerPoint10.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray16 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        boolean boolean21 = euclideanIntegerPoint9.equals((java.lang.Object) intArray16);
        int[] intArray22 = euclideanIntegerPoint9.getPoint();
        java.lang.Class<?> wildcardClass23 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        java.lang.String str10 = euclideanIntegerPoint8.toString();
        java.lang.String str11 = euclideanIntegerPoint8.toString();
        java.lang.String str12 = euclideanIntegerPoint8.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(0,10,-1,100)" + "'", str10, "(0,10,-1,100)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(0,10,-1,100)" + "'", str11, "(0,10,-1,100)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0,10,-1,100)" + "'", str12, "(0,10,-1,100)");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint10.toString();
        int[] intArray33 = euclideanIntegerPoint10.getPoint();
        java.lang.Class<?> wildcardClass34 = euclideanIntegerPoint10.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray7 = euclideanIntegerPoint6.getPoint();
        java.lang.String str8 = euclideanIntegerPoint6.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        java.lang.String str15 = euclideanIntegerPoint14.toString();
        double double16 = euclideanIntegerPoint6.distanceFrom(euclideanIntegerPoint14);
        int[] intArray17 = euclideanIntegerPoint14.getPoint();
        int[] intArray18 = euclideanIntegerPoint14.getPoint();
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        java.lang.String str27 = euclideanIntegerPoint26.toString();
        int[] intArray28 = euclideanIntegerPoint26.getPoint();
        int[] intArray29 = euclideanIntegerPoint26.getPoint();
        int[] intArray30 = euclideanIntegerPoint26.getPoint();
        int[] intArray31 = euclideanIntegerPoint26.getPoint();
        java.lang.String str32 = euclideanIntegerPoint26.toString();
        double double33 = euclideanIntegerPoint14.distanceFrom(euclideanIntegerPoint26);
        java.lang.Class<?> wildcardClass34 = euclideanIntegerPoint26.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0,10,-1,100)" + "'", str15, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(-1,10,10,97,10,100)" + "'", str27, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 11.445523142259598d + "'", double33 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        java.lang.String str10 = euclideanIntegerPoint8.toString();
        int[] intArray11 = euclideanIntegerPoint8.getPoint();
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint43 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList45 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45, euclideanIntegerPointArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList65 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65, euclideanIntegerPointArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = euclideanIntegerPoint55.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        java.lang.String str76 = euclideanIntegerPoint75.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint27, euclideanIntegerPoint47, euclideanIntegerPoint55, euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList78 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78, euclideanIntegerPointArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        java.lang.Class<?> wildcardClass82 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(0,10,-1,100)" + "'", str10, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(-1,10,10,97,10,100)" + "'", str76, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray79 = euclideanIntegerPoint78.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        int[] intArray90 = euclideanIntegerPoint89.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        boolean boolean93 = euclideanIntegerPoint80.equals((java.lang.Object) euclideanIntegerPoint91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double95 = euclideanIntegerPoint80.distanceFrom(euclideanIntegerPoint94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        int[] intArray90 = euclideanIntegerPoint89.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        int[] intArray92 = euclideanIntegerPoint91.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray92);
        java.lang.Class<?> wildcardClass94 = euclideanIntegerPoint93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray10 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray12 = euclideanIntegerPoint11.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        double double14 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint13);
        java.lang.String str15 = euclideanIntegerPoint13.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0,10,-1,100)" + "'", str15, "(0,10,-1,100)");
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray77 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray77);
        int[] intArray79 = euclideanIntegerPoint78.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray82 = euclideanIntegerPoint81.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double85 = euclideanIntegerPoint72.distanceFrom(euclideanIntegerPoint83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(0,10,-1,100)" + "'", str84, "(0,10,-1,100)");
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        java.lang.Object obj22 = null;
        boolean boolean23 = euclideanIntegerPoint20.equals(obj22);
        java.lang.String str24 = euclideanIntegerPoint20.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(-1,10,10,97,10,100)" + "'", str24, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        boolean boolean83 = euclideanIntegerPoint7.equals((java.lang.Object) intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        int[] intArray86 = euclideanIntegerPoint84.getPoint();
        java.lang.Object obj87 = null;
        boolean boolean88 = euclideanIntegerPoint84.equals(obj87);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        java.lang.String str81 = euclideanIntegerPoint79.toString();
        java.lang.String str82 = euclideanIntegerPoint79.toString();
        java.lang.String str83 = euclideanIntegerPoint79.toString();
        java.lang.String str84 = euclideanIntegerPoint79.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(-1,10,10,97,10,100)" + "'", str81, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(-1,10,10,97,10,100)" + "'", str82, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        java.lang.String str27 = euclideanIntegerPoint26.toString();
        int[] intArray28 = euclideanIntegerPoint26.getPoint();
        boolean boolean30 = euclideanIntegerPoint26.equals((java.lang.Object) 1.0d);
        int[] intArray31 = euclideanIntegerPoint26.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        double double33 = euclideanIntegerPoint18.distanceFrom(euclideanIntegerPoint32);
        boolean boolean34 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint18);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        int[] intArray50 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray52 = euclideanIntegerPoint51.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        java.lang.Class<?> wildcardClass56 = intArray52.getClass();
        boolean boolean57 = euclideanIntegerPoint45.equals((java.lang.Object) intArray52);
        boolean boolean58 = euclideanIntegerPoint7.equals((java.lang.Object) boolean57);
        int[] intArray59 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(-1,10,10,97,10,100)" + "'", str27, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray22 = euclideanIntegerPoint21.getPoint();
        int[] intArray23 = euclideanIntegerPoint21.getPoint();
        java.lang.String str24 = euclideanIntegerPoint21.toString();
        java.lang.Class<?> wildcardClass25 = euclideanIntegerPoint21.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(-1,10,10,97,10,100)" + "'", str24, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray12 = euclideanIntegerPoint7.getPoint();
        int[] intArray19 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint53 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList55 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55, euclideanIntegerPointArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = euclideanIntegerPoint45.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint37, euclideanIntegerPoint57, euclideanIntegerPoint65, euclideanIntegerPoint85 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList88 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88, euclideanIntegerPointArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        java.lang.Class<?> wildcardClass93 = euclideanIntegerPointList88.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        double double91 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint89);
        boolean boolean93 = euclideanIntegerPoint68.equals((java.lang.Object) 0);
        java.lang.String str94 = euclideanIntegerPoint68.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray79 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint88 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList90 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90, euclideanIntegerPointArray89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint80.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = euclideanIntegerPoint72.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        int[] intArray94 = euclideanIntegerPoint93.getPoint();
        java.lang.String str95 = euclideanIntegerPoint93.toString();
        java.lang.String str96 = euclideanIntegerPoint93.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(-1,10,10,97,10,100)" + "'", str95, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(-1,10,10,97,10,100)" + "'", str96, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint43 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList45 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45, euclideanIntegerPointArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList65 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65, euclideanIntegerPointArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = euclideanIntegerPoint55.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        java.lang.String str76 = euclideanIntegerPoint75.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint27, euclideanIntegerPoint47, euclideanIntegerPoint55, euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList78 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78, euclideanIntegerPointArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        int[] intArray81 = euclideanIntegerPoint19.getPoint();
        java.lang.String str82 = euclideanIntegerPoint19.toString();
        java.lang.String str83 = euclideanIntegerPoint19.toString();
        int[] intArray84 = euclideanIntegerPoint19.getPoint();
        double double85 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint19);
        java.lang.Class<?> wildcardClass86 = euclideanIntegerPoint19.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(-1,10,10,97,10,100)" + "'", str76, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(-1,10,10,97,10,100)" + "'", str82, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray11 = euclideanIntegerPoint10.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint12 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray11);
        int[] intArray17 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray19 = euclideanIntegerPoint18.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        java.lang.String str30 = euclideanIntegerPoint29.toString();
        double double31 = euclideanIntegerPoint21.distanceFrom(euclideanIntegerPoint29);
        java.lang.String str32 = euclideanIntegerPoint29.toString();
        java.lang.String str33 = euclideanIntegerPoint29.toString();
        int[] intArray38 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray40 = euclideanIntegerPoint39.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        int[] intArray49 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        int[] intArray57 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint58 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList60 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList60, euclideanIntegerPointArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = euclideanIntegerPoint50.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint42.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList60);
        int[] intArray65 = euclideanIntegerPoint64.getPoint();
        boolean boolean66 = euclideanIntegerPoint12.equals((java.lang.Object) intArray65);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(-1,10,10,97,10,100)" + "'", str30, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 11.445523142259598d + "'", double31 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(-1,10,10,97,10,100)" + "'", str33, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint62);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        java.lang.String str20 = euclideanIntegerPoint19.toString();
        int[] intArray21 = euclideanIntegerPoint19.getPoint();
        int[] intArray22 = euclideanIntegerPoint19.getPoint();
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        java.lang.String str39 = euclideanIntegerPoint38.toString();
        int[] intArray40 = euclideanIntegerPoint38.getPoint();
        boolean boolean42 = euclideanIntegerPoint38.equals((java.lang.Object) 1.0d);
        int[] intArray43 = euclideanIntegerPoint38.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        double double45 = euclideanIntegerPoint30.distanceFrom(euclideanIntegerPoint44);
        boolean boolean46 = euclideanIntegerPoint19.equals((java.lang.Object) euclideanIntegerPoint30);
        boolean boolean47 = euclideanIntegerPoint11.equals((java.lang.Object) euclideanIntegerPoint30);
        int[] intArray48 = euclideanIntegerPoint30.getPoint();
        java.lang.Class<?> wildcardClass49 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        int[] intArray89 = euclideanIntegerPoint87.getPoint();
        boolean boolean91 = euclideanIntegerPoint87.equals((java.lang.Object) 1.0d);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint87);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean80 = euclideanIntegerPoint17.equals((java.lang.Object) 1.0d);
        boolean boolean81 = euclideanIntegerPoint9.equals((java.lang.Object) euclideanIntegerPoint17);
        java.lang.Class<?> wildcardClass82 = euclideanIntegerPoint17.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        int[] intArray76 = euclideanIntegerPoint75.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        java.lang.String str79 = euclideanIntegerPoint78.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray7 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray7);
        java.lang.String str9 = euclideanIntegerPoint8.toString();
        java.lang.Class<?> wildcardClass10 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(0,10,-1,100)" + "'", str9, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        boolean boolean90 = euclideanIntegerPoint10.equals((java.lang.Object) euclideanIntegerPointList86);
        java.lang.String str91 = euclideanIntegerPoint10.toString();
        java.lang.Class<?> wildcardClass92 = euclideanIntegerPoint10.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-1,10,10,97,10,100)" + "'", str91, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray12 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        java.lang.String str14 = euclideanIntegerPoint13.toString();
        int[] intArray15 = euclideanIntegerPoint13.getPoint();
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint47 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList49 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49, euclideanIntegerPointArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint39.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList49);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint67 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList69 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69, euclideanIntegerPointArray68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = euclideanIntegerPoint59.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        java.lang.String str80 = euclideanIntegerPoint79.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31, euclideanIntegerPoint51, euclideanIntegerPoint59, euclideanIntegerPoint79 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList82 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82, euclideanIntegerPointArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = euclideanIntegerPoint13.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        boolean boolean86 = euclideanIntegerPoint5.equals((java.lang.Object) euclideanIntegerPoint85);
        java.lang.String str87 = euclideanIntegerPoint85.toString();
        java.lang.Class<?> wildcardClass88 = euclideanIntegerPoint85.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(-1,10,10,97,10,100)" + "'", str14, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint71);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(-1,10,10,97,10,100)" + "'", str80, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint84);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(-1,10,10,97,10,100)" + "'", str87, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        int[] intArray22 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint55 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList57 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList57, euclideanIntegerPointArray56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = euclideanIntegerPoint47.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList57);
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList77 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77, euclideanIntegerPointArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint67.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        int[] intArray86 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint39, euclideanIntegerPoint59, euclideanIntegerPoint67, euclideanIntegerPoint87 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList90 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90, euclideanIntegerPointArray89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint31.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        int[] intArray93 = euclideanIntegerPoint31.getPoint();
        java.lang.String str94 = euclideanIntegerPoint31.toString();
        int[] intArray95 = euclideanIntegerPoint31.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        int[] intArray97 = euclideanIntegerPoint96.getPoint();
        int[] intArray98 = euclideanIntegerPoint96.getPoint();
        boolean boolean99 = euclideanIntegerPoint23.equals((java.lang.Object) euclideanIntegerPoint96);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint59);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint43 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList45 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45, euclideanIntegerPointArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList45);
        int[] intArray54 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray54);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList65 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65, euclideanIntegerPointArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = euclideanIntegerPoint55.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList65);
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        java.lang.String str76 = euclideanIntegerPoint75.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint27, euclideanIntegerPoint47, euclideanIntegerPoint55, euclideanIntegerPoint75 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList78 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78, euclideanIntegerPointArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint11.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        boolean boolean93 = euclideanIntegerPoint89.equals((java.lang.Object) 1.0d);
        java.lang.String str94 = euclideanIntegerPoint89.toString();
        double double95 = euclideanIntegerPoint81.distanceFrom(euclideanIntegerPoint89);
        int[] intArray96 = euclideanIntegerPoint81.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray96);
        java.lang.Object obj98 = null;
        boolean boolean99 = euclideanIntegerPoint97.equals(obj98);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(-1,10,10,97,10,100)" + "'", str76, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        int[] intArray18 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList37 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37, euclideanIntegerPointArray36);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        java.lang.Class<?> wildcardClass42 = euclideanIntegerPointList37.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint39);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint40);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        java.lang.String str70 = euclideanIntegerPoint7.toString();
        int[] intArray71 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        java.lang.String str74 = euclideanIntegerPoint72.toString();
        java.lang.Class<?> wildcardClass75 = euclideanIntegerPoint72.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(-1,10,10,97,10,100)" + "'", str70, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray10 = euclideanIntegerPoint9.getPoint();
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray20 = euclideanIntegerPoint19.getPoint();
        java.lang.String str21 = euclideanIntegerPoint19.toString();
        java.lang.String str22 = euclideanIntegerPoint19.toString();
        int[] intArray23 = euclideanIntegerPoint19.getPoint();
        int[] intArray24 = euclideanIntegerPoint19.getPoint();
        double double25 = euclideanIntegerPoint9.distanceFrom(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(0,10,-1,100)" + "'", str21, "(0,10,-1,100)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(0,10,-1,100)" + "'", str22, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        java.lang.String str26 = euclideanIntegerPoint25.toString();
        double double27 = euclideanIntegerPoint17.distanceFrom(euclideanIntegerPoint25);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray37 = euclideanIntegerPoint36.getPoint();
        boolean boolean39 = euclideanIntegerPoint36.equals((java.lang.Object) (short) 10);
        double double40 = euclideanIntegerPoint17.distanceFrom(euclideanIntegerPoint36);
        double double41 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint36);
        int[] intArray48 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        int[] intArray57 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        int[] intArray59 = euclideanIntegerPoint58.getPoint();
        java.lang.String str60 = euclideanIntegerPoint58.toString();
        int[] intArray61 = euclideanIntegerPoint58.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        boolean boolean63 = euclideanIntegerPoint50.equals((java.lang.Object) euclideanIntegerPoint62);
        int[] intArray68 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray68);
        int[] intArray70 = euclideanIntegerPoint69.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        boolean boolean75 = euclideanIntegerPoint62.equals((java.lang.Object) euclideanIntegerPoint74);
        double double76 = euclideanIntegerPoint36.distanceFrom(euclideanIntegerPoint62);
        java.lang.Class<?> wildcardClass77 = euclideanIntegerPoint36.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(-1,10,10,97,10,100)" + "'", str26, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 11.445523142259598d + "'", double27 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 11.445523142259598d + "'", double40 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(-1,10,10,97,10,100)" + "'", str60, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        java.lang.String str10 = euclideanIntegerPoint9.toString();
        int[] intArray11 = euclideanIntegerPoint9.getPoint();
        java.lang.Class<?> wildcardClass12 = intArray11.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(-1,10,10,97,10,100)" + "'", str10, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass10 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(0,10,-1,100)" + "'", str9, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        java.lang.String str91 = euclideanIntegerPoint7.toString();
        java.lang.Object obj92 = null;
        boolean boolean93 = euclideanIntegerPoint7.equals(obj92);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-1,10,10,97,10,100)" + "'", str91, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray7 = euclideanIntegerPoint6.getPoint();
        java.lang.String str8 = euclideanIntegerPoint6.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        java.lang.String str15 = euclideanIntegerPoint14.toString();
        double double16 = euclideanIntegerPoint6.distanceFrom(euclideanIntegerPoint14);
        int[] intArray17 = euclideanIntegerPoint6.getPoint();
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        java.lang.String str26 = euclideanIntegerPoint25.toString();
        int[] intArray27 = euclideanIntegerPoint25.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint44 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList46 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList46, euclideanIntegerPointArray45);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = euclideanIntegerPoint36.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList46);
        java.lang.String str50 = euclideanIntegerPoint49.toString();
        int[] intArray51 = euclideanIntegerPoint49.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        double double53 = euclideanIntegerPoint6.distanceFrom(euclideanIntegerPoint52);
        java.lang.String str54 = euclideanIntegerPoint6.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0,10,-1,100)" + "'", str15, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(-1,10,10,97,10,100)" + "'", str26, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint48);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(-1,10,10,97,10,100)" + "'", str50, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 11.445523142259598d + "'", double53 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(0,10,-1,100)" + "'", str54, "(0,10,-1,100)");
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        int[] intArray82 = euclideanIntegerPoint68.getPoint();
        java.lang.String str83 = euclideanIntegerPoint68.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        java.lang.String str26 = euclideanIntegerPoint25.toString();
        double double27 = euclideanIntegerPoint17.distanceFrom(euclideanIntegerPoint25);
        java.lang.String str28 = euclideanIntegerPoint25.toString();
        java.lang.String str29 = euclideanIntegerPoint25.toString();
        int[] intArray34 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray36 = euclideanIntegerPoint35.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint54 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList56 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56, euclideanIntegerPointArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = euclideanIntegerPoint46.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = euclideanIntegerPoint38.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = euclideanIntegerPoint25.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56);
        double double61 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint60);
        java.lang.Class<?> wildcardClass62 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(-1,10,10,97,10,100)" + "'", str26, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 11.445523142259598d + "'", double27 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(-1,10,10,97,10,100)" + "'", str29, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint58);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint59);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        int[] intArray90 = euclideanIntegerPoint89.getPoint();
        java.lang.String str91 = euclideanIntegerPoint89.toString();
        int[] intArray92 = euclideanIntegerPoint89.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray92);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-1,10,10,97,10,100)" + "'", str91, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        java.lang.String str6 = euclideanIntegerPoint5.toString();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        double double19 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint18);
        java.lang.String str20 = euclideanIntegerPoint5.toString();
        int[] intArray25 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray27 = euclideanIntegerPoint26.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        java.lang.String str38 = euclideanIntegerPoint37.toString();
        double double39 = euclideanIntegerPoint29.distanceFrom(euclideanIntegerPoint37);
        java.lang.String str40 = euclideanIntegerPoint37.toString();
        int[] intArray47 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        java.lang.String str49 = euclideanIntegerPoint48.toString();
        int[] intArray50 = euclideanIntegerPoint48.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint67 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList69 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69, euclideanIntegerPointArray68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = euclideanIntegerPoint59.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = euclideanIntegerPoint51.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = euclideanIntegerPoint37.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = euclideanIntegerPoint5.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList69);
        int[] intArray75 = euclideanIntegerPoint74.getPoint();
        java.lang.Class<?> wildcardClass76 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(0,10,-1,100)" + "'", str6, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 11.445523142259598d + "'", double19 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(0,10,-1,100)" + "'", str20, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(-1,10,10,97,10,100)" + "'", str38, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 11.445523142259598d + "'", double39 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(-1,10,10,97,10,100)" + "'", str40, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(-1,10,10,97,10,100)" + "'", str49, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint71);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint72);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint73);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint31.toString();
        int[] intArray33 = euclideanIntegerPoint31.getPoint();
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        java.lang.String str42 = euclideanIntegerPoint41.toString();
        int[] intArray43 = euclideanIntegerPoint41.getPoint();
        boolean boolean45 = euclideanIntegerPoint41.equals((java.lang.Object) 1.0d);
        int[] intArray46 = euclideanIntegerPoint41.getPoint();
        java.lang.String str47 = euclideanIntegerPoint41.toString();
        double double48 = euclideanIntegerPoint31.distanceFrom(euclideanIntegerPoint41);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        int[] intArray58 = euclideanIntegerPoint57.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        double double60 = euclideanIntegerPoint41.distanceFrom(euclideanIntegerPoint59);
        int[] intArray67 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray67);
        java.lang.String str69 = euclideanIntegerPoint68.toString();
        int[] intArray70 = euclideanIntegerPoint68.getPoint();
        int[] intArray71 = euclideanIntegerPoint68.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        boolean boolean73 = euclideanIntegerPoint41.equals((java.lang.Object) intArray71);
        java.lang.String str74 = euclideanIntegerPoint41.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(-1,10,10,97,10,100)" + "'", str42, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(-1,10,10,97,10,100)" + "'", str47, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        java.lang.String str20 = euclideanIntegerPoint16.toString();
        int[] intArray25 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray27 = euclideanIntegerPoint26.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint45 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList47 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47, euclideanIntegerPointArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = euclideanIntegerPoint37.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        int[] intArray52 = euclideanIntegerPoint51.getPoint();
        java.lang.Class<?> wildcardClass53 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint49);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint50);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint31.toString();
        int[] intArray33 = euclideanIntegerPoint31.getPoint();
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        java.lang.String str42 = euclideanIntegerPoint41.toString();
        int[] intArray43 = euclideanIntegerPoint41.getPoint();
        boolean boolean45 = euclideanIntegerPoint41.equals((java.lang.Object) 1.0d);
        int[] intArray46 = euclideanIntegerPoint41.getPoint();
        java.lang.String str47 = euclideanIntegerPoint41.toString();
        double double48 = euclideanIntegerPoint31.distanceFrom(euclideanIntegerPoint41);
        int[] intArray49 = euclideanIntegerPoint41.getPoint();
        java.lang.Class<?> wildcardClass50 = intArray49.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(-1,10,10,97,10,100)" + "'", str42, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(-1,10,10,97,10,100)" + "'", str47, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        double double91 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint89);
        boolean boolean93 = euclideanIntegerPoint89.equals((java.lang.Object) (byte) 1);
        java.lang.String str94 = euclideanIntegerPoint89.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        boolean boolean11 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        java.lang.String str12 = euclideanIntegerPoint7.toString();
        java.lang.String str13 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass14 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(-1,10,10,97,10,100)" + "'", str12, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(-1,10,10,97,10,100)" + "'", str13, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        int[] intArray29 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray35 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray37 = euclideanIntegerPoint36.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray40 = euclideanIntegerPoint39.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        boolean boolean42 = euclideanIntegerPoint30.equals((java.lang.Object) euclideanIntegerPoint41);
        double double43 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint30);
        int[] intArray48 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        boolean boolean52 = euclideanIntegerPoint30.equals((java.lang.Object) intArray48);
        java.lang.String str53 = euclideanIntegerPoint30.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(-1,10,10,97,10,100)" + "'", str53, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        java.lang.Class<?> wildcardClass18 = euclideanIntegerPoint15.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        boolean boolean19 = euclideanIntegerPoint15.equals((java.lang.Object) 1.0d);
        int[] intArray20 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        double double22 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint21);
        java.lang.String str23 = euclideanIntegerPoint7.toString();
        int[] intArray24 = euclideanIntegerPoint7.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(-1,10,10,97,10,100)" + "'", str23, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        double double29 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint27);
        java.lang.String str30 = euclideanIntegerPoint27.toString();
        java.lang.String str31 = euclideanIntegerPoint27.toString();
        int[] intArray36 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray38 = euclideanIntegerPoint37.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray47 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint56 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList58 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58, euclideanIntegerPointArray57);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = euclideanIntegerPoint48.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = euclideanIntegerPoint40.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        java.lang.Class<?> wildcardClass65 = euclideanIntegerPoint63.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 11.445523142259598d + "'", double29 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(-1,10,10,97,10,100)" + "'", str30, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(-1,10,10,97,10,100)" + "'", str31, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint60);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint61);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint62);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.Class<?> wildcardClass21 = intArray17.getClass();
        boolean boolean22 = euclideanIntegerPoint10.equals((java.lang.Object) intArray17);
        int[] intArray23 = euclideanIntegerPoint10.getPoint();
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        int[] intArray32 = euclideanIntegerPoint31.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        boolean boolean34 = euclideanIntegerPoint10.equals((java.lang.Object) intArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray78 = euclideanIntegerPoint16.getPoint();
        java.lang.String str79 = euclideanIntegerPoint16.toString();
        java.lang.String str80 = euclideanIntegerPoint16.toString();
        int[] intArray81 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        boolean boolean83 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint82);
        java.lang.String str84 = euclideanIntegerPoint8.toString();
        int[] intArray85 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        java.lang.Class<?> wildcardClass87 = euclideanIntegerPoint86.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(-1,10,10,97,10,100)" + "'", str80, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(0,10,-1,100)" + "'", str84, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.String str19 = euclideanIntegerPoint18.toString();
        int[] intArray20 = euclideanIntegerPoint18.getPoint();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        int[] intArray92 = euclideanIntegerPoint91.getPoint();
        java.lang.String str93 = euclideanIntegerPoint91.toString();
        java.lang.String str94 = euclideanIntegerPoint91.toString();
        int[] intArray95 = euclideanIntegerPoint91.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray20 = euclideanIntegerPoint19.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        boolean boolean22 = euclideanIntegerPoint10.equals((java.lang.Object) euclideanIntegerPoint21);
        boolean boolean24 = euclideanIntegerPoint21.equals((java.lang.Object) 0.0f);
        int[] intArray29 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        java.lang.String str39 = euclideanIntegerPoint38.toString();
        int[] intArray40 = euclideanIntegerPoint38.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        int[] intArray48 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        int[] intArray56 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint57 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList59 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59, euclideanIntegerPointArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = euclideanIntegerPoint49.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = euclideanIntegerPoint41.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList59);
        double double63 = euclideanIntegerPoint30.distanceFrom(euclideanIntegerPoint62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint79 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList81 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList81, euclideanIntegerPointArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = euclideanIntegerPoint71.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList81);
        java.lang.Class<?> wildcardClass86 = euclideanIntegerPoint21.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint61);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 11.445523142259598d + "'", double63 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint83);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint84);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        int[] intArray26 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray28 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        boolean boolean33 = euclideanIntegerPoint20.equals((java.lang.Object) euclideanIntegerPoint32);
        int[] intArray38 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray40 = euclideanIntegerPoint39.getPoint();
        int[] intArray47 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        double double50 = euclideanIntegerPoint39.distanceFrom(euclideanIntegerPoint49);
        boolean boolean51 = euclideanIntegerPoint20.equals((java.lang.Object) euclideanIntegerPoint39);
        int[] intArray58 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        java.lang.String str60 = euclideanIntegerPoint59.toString();
        int[] intArray61 = euclideanIntegerPoint59.getPoint();
        boolean boolean63 = euclideanIntegerPoint59.equals((java.lang.Object) 1.0d);
        int[] intArray64 = euclideanIntegerPoint59.getPoint();
        java.lang.String str65 = euclideanIntegerPoint59.toString();
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        int[] intArray75 = euclideanIntegerPoint73.getPoint();
        boolean boolean76 = euclideanIntegerPoint59.equals((java.lang.Object) intArray75);
        java.lang.Class<?> wildcardClass77 = intArray75.getClass();
        boolean boolean78 = euclideanIntegerPoint39.equals((java.lang.Object) wildcardClass77);
        java.lang.Class<?> wildcardClass79 = euclideanIntegerPoint39.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 11.445523142259598d + "'", double50 == 11.445523142259598d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(-1,10,10,97,10,100)" + "'", str60, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(-1,10,10,97,10,100)" + "'", str65, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        boolean boolean19 = euclideanIntegerPoint15.equals((java.lang.Object) 1.0d);
        int[] intArray20 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        double double22 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint21);
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint54 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList56 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56, euclideanIntegerPointArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = euclideanIntegerPoint46.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint66.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray85 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        java.lang.String str87 = euclideanIntegerPoint86.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint38, euclideanIntegerPoint58, euclideanIntegerPoint66, euclideanIntegerPoint86 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList89 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89, euclideanIntegerPointArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint91);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        java.lang.String str94 = euclideanIntegerPoint7.toString();
        java.lang.Class<?> wildcardClass95 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint58);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(-1,10,10,97,10,100)" + "'", str87, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        java.lang.String str78 = euclideanIntegerPoint16.toString();
        int[] intArray85 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        java.lang.String str87 = euclideanIntegerPoint86.toString();
        int[] intArray88 = euclideanIntegerPoint86.getPoint();
        boolean boolean90 = euclideanIntegerPoint86.equals((java.lang.Object) 1.0d);
        int[] intArray91 = euclideanIntegerPoint86.getPoint();
        double double92 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint86);
        java.lang.String str93 = euclideanIntegerPoint16.toString();
        double double94 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint16);
        int[] intArray95 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        java.lang.Class<?> wildcardClass97 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(-1,10,10,97,10,100)" + "'", str78, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(-1,10,10,97,10,100)" + "'", str87, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(-1,10,10,97,10,100)" + "'", str93, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray78 = euclideanIntegerPoint16.getPoint();
        java.lang.String str79 = euclideanIntegerPoint16.toString();
        java.lang.String str80 = euclideanIntegerPoint16.toString();
        int[] intArray81 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        boolean boolean83 = euclideanIntegerPoint8.equals((java.lang.Object) intArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        java.lang.Class<?> wildcardClass85 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(-1,10,10,97,10,100)" + "'", str80, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        java.lang.Class<?> wildcardClass80 = euclideanIntegerPoint79.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        int[] intArray76 = euclideanIntegerPoint75.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray76);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        int[] intArray92 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray92);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray94 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint93 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList95 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean96 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95, euclideanIntegerPointArray94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = euclideanIntegerPoint85.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = euclideanIntegerPoint77.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList95);
        java.lang.Class<?> wildcardClass99 = euclideanIntegerPoint77.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint97);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        int[] intArray26 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray28 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        boolean boolean33 = euclideanIntegerPoint20.equals((java.lang.Object) euclideanIntegerPoint32);
        int[] intArray34 = euclideanIntegerPoint32.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        java.lang.String str44 = euclideanIntegerPoint43.toString();
        int[] intArray45 = euclideanIntegerPoint43.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint62 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList64 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64, euclideanIntegerPointArray63);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = euclideanIntegerPoint54.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = euclideanIntegerPoint46.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        int[] intArray73 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        int[] intArray75 = euclideanIntegerPoint74.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        int[] intArray77 = euclideanIntegerPoint76.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray77);
        double double79 = euclideanIntegerPoint35.distanceFrom(euclideanIntegerPoint78);
        java.lang.String str80 = euclideanIntegerPoint35.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(-1,10,10,97,10,100)" + "'", str44, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint66);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint67);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(0,10,-1,100)" + "'", str80, "(0,10,-1,100)");
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        int[] intArray29 = euclideanIntegerPoint27.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint46 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList48 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48, euclideanIntegerPointArray47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = euclideanIntegerPoint38.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList48);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        int[] intArray68 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray68);
        int[] intArray70 = euclideanIntegerPoint69.getPoint();
        java.lang.String str71 = euclideanIntegerPoint69.toString();
        int[] intArray72 = euclideanIntegerPoint69.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        boolean boolean74 = euclideanIntegerPoint61.equals((java.lang.Object) euclideanIntegerPoint73);
        java.lang.Object obj75 = null;
        boolean boolean76 = euclideanIntegerPoint73.equals(obj75);
        double double77 = euclideanIntegerPoint52.distanceFrom(euclideanIntegerPoint73);
        int[] intArray78 = euclideanIntegerPoint73.getPoint();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint50);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint52);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(-1,10,10,97,10,100)" + "'", str71, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint53 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList55 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55, euclideanIntegerPointArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = euclideanIntegerPoint45.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint37, euclideanIntegerPoint57, euclideanIntegerPoint65, euclideanIntegerPoint85 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList88 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88, euclideanIntegerPointArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        int[] intArray91 = euclideanIntegerPoint29.getPoint();
        java.lang.String str92 = euclideanIntegerPoint29.toString();
        int[] intArray93 = euclideanIntegerPoint29.getPoint();
        boolean boolean94 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint29);
        java.lang.Class<?> wildcardClass95 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        java.lang.String str6 = euclideanIntegerPoint5.toString();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        double double19 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint18);
        java.lang.String str20 = euclideanIntegerPoint18.toString();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        int[] intArray90 = euclideanIntegerPoint28.getPoint();
        int[] intArray91 = euclideanIntegerPoint28.getPoint();
        int[] intArray92 = euclideanIntegerPoint28.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray92);
        double double94 = euclideanIntegerPoint18.distanceFrom(euclideanIntegerPoint93);
        java.lang.String str95 = euclideanIntegerPoint93.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(0,10,-1,100)" + "'", str6, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 11.445523142259598d + "'", double19 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(-1,10,10,97,10,100)" + "'", str95, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray29 = euclideanIntegerPoint28.getPoint();
        double double30 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint28);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray46 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray48 = euclideanIntegerPoint47.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        java.lang.Class<?> wildcardClass52 = intArray48.getClass();
        boolean boolean53 = euclideanIntegerPoint41.equals((java.lang.Object) intArray48);
        double double54 = euclideanIntegerPoint16.distanceFrom(euclideanIntegerPoint41);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        int[] intArray69 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint70 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList72 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72, euclideanIntegerPointArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = euclideanIntegerPoint62.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList72);
        int[] intArray75 = euclideanIntegerPoint62.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        boolean boolean77 = euclideanIntegerPoint41.equals((java.lang.Object) euclideanIntegerPoint76);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        int[] intArray86 = euclideanIntegerPoint85.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray86);
        java.lang.String str88 = euclideanIntegerPoint87.toString();
        boolean boolean89 = euclideanIntegerPoint76.equals((java.lang.Object) euclideanIntegerPoint87);
        java.lang.String str90 = euclideanIntegerPoint76.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        int[] intArray81 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        int[] intArray84 = euclideanIntegerPoint83.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        int[] intArray87 = euclideanIntegerPoint85.getPoint();
        java.lang.String str88 = euclideanIntegerPoint85.toString();
        java.lang.String str89 = euclideanIntegerPoint85.toString();
        double double90 = euclideanIntegerPoint74.distanceFrom(euclideanIntegerPoint85);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint85.centroidOf(euclideanIntegerPointCollection91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(-1,10,10,97,10,100)" + "'", str89, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray79 = euclideanIntegerPoint8.getPoint();
        java.lang.Class<?> wildcardClass80 = euclideanIntegerPoint8.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        int[] intArray78 = euclideanIntegerPoint76.getPoint();
        boolean boolean80 = euclideanIntegerPoint76.equals((java.lang.Object) 1.0d);
        double double81 = euclideanIntegerPoint68.distanceFrom(euclideanIntegerPoint76);
        int[] intArray82 = euclideanIntegerPoint76.getPoint();
        java.lang.String str83 = euclideanIntegerPoint76.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        boolean boolean70 = euclideanIntegerPoint7.equals((java.lang.Object) 1.0d);
        java.lang.String str71 = euclideanIntegerPoint7.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(-1,10,10,97,10,100)" + "'", str71, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        java.lang.Class<?> wildcardClass91 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray79 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint88 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList90 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90, euclideanIntegerPointArray89);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = euclideanIntegerPoint80.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = euclideanIntegerPoint72.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList90);
        int[] intArray94 = euclideanIntegerPoint93.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray94);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray94);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint92);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray79 = euclideanIntegerPoint78.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        java.lang.Class<?> wildcardClass83 = euclideanIntegerPoint82.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        int[] intArray21 = euclideanIntegerPoint20.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint22 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray21);
        java.lang.String str23 = euclideanIntegerPoint22.toString();
        int[] intArray24 = euclideanIntegerPoint22.getPoint();
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        int[] intArray47 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint56 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList58 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58, euclideanIntegerPointArray57);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = euclideanIntegerPoint48.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        int[] intArray67 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray67);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint76 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList78 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78, euclideanIntegerPointArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint68.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        int[] intArray87 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray87);
        java.lang.String str89 = euclideanIntegerPoint88.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray90 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40, euclideanIntegerPoint60, euclideanIntegerPoint68, euclideanIntegerPoint88 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList91 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList91, euclideanIntegerPointArray90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = euclideanIntegerPoint22.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = euclideanIntegerPoint11.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList91);
        java.lang.String str96 = euclideanIntegerPoint95.toString();
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint98 = euclideanIntegerPoint95.centroidOf(euclideanIntegerPointCollection97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(-1,10,10,97,10,100)" + "'", str23, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(-1,10,10,97,10,100)" + "'", str89, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint93);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint94);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(-1,10,10,97,10,100)" + "'", str96, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        java.lang.String str16 = euclideanIntegerPoint15.toString();
        int[] intArray17 = euclideanIntegerPoint15.getPoint();
        boolean boolean19 = euclideanIntegerPoint15.equals((java.lang.Object) 1.0d);
        int[] intArray20 = euclideanIntegerPoint15.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        double double22 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint21);
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint54 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList56 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56, euclideanIntegerPointArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = euclideanIntegerPoint46.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList56);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint66.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray85 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        java.lang.String str87 = euclideanIntegerPoint86.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray88 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint38, euclideanIntegerPoint58, euclideanIntegerPoint66, euclideanIntegerPoint86 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList89 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89, euclideanIntegerPointArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList89);
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint91);
        int[] intArray93 = euclideanIntegerPoint7.getPoint();
        java.lang.String str94 = euclideanIntegerPoint7.toString();
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint97 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray95);
        java.lang.Object obj98 = null;
        boolean boolean99 = euclideanIntegerPoint97.equals(obj98);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-1,10,10,97,10,100)" + "'", str16, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint58);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(-1,10,10,97,10,100)" + "'", str87, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        java.lang.Class<?> wildcardClass72 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray24 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray26 = euclideanIntegerPoint25.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        java.lang.String str37 = euclideanIntegerPoint36.toString();
        double double38 = euclideanIntegerPoint28.distanceFrom(euclideanIntegerPoint36);
        java.lang.String str39 = euclideanIntegerPoint36.toString();
        int[] intArray46 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        java.lang.String str48 = euclideanIntegerPoint47.toString();
        int[] intArray49 = euclideanIntegerPoint47.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        int[] intArray57 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray57);
        int[] intArray65 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint66 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList68 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68, euclideanIntegerPointArray67);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = euclideanIntegerPoint58.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = euclideanIntegerPoint50.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = euclideanIntegerPoint36.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList68);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(-1,10,10,97,10,100)" + "'", str37, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 11.445523142259598d + "'", double38 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(-1,10,10,97,10,100)" + "'", str48, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint70);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint71);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint72);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean80 = euclideanIntegerPoint17.equals((java.lang.Object) 1.0d);
        boolean boolean81 = euclideanIntegerPoint9.equals((java.lang.Object) euclideanIntegerPoint17);
        int[] intArray82 = euclideanIntegerPoint17.getPoint();
        java.lang.String str83 = euclideanIntegerPoint17.toString();
        int[] intArray90 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.String str92 = euclideanIntegerPoint91.toString();
        int[] intArray93 = euclideanIntegerPoint91.getPoint();
        boolean boolean95 = euclideanIntegerPoint91.equals((java.lang.Object) 1.0d);
        int[] intArray96 = euclideanIntegerPoint91.getPoint();
        java.lang.String str97 = euclideanIntegerPoint91.toString();
        int[] intArray98 = euclideanIntegerPoint91.getPoint();
        boolean boolean99 = euclideanIntegerPoint17.equals((java.lang.Object) intArray98);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(-1,10,10,97,10,100)" + "'", str97, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        java.lang.String str10 = euclideanIntegerPoint7.toString();
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList37 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37, euclideanIntegerPointArray36);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = euclideanIntegerPoint19.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList37);
        int[] intArray47 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        int[] intArray56 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        int[] intArray58 = euclideanIntegerPoint57.getPoint();
        java.lang.String str59 = euclideanIntegerPoint57.toString();
        int[] intArray60 = euclideanIntegerPoint57.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        boolean boolean62 = euclideanIntegerPoint49.equals((java.lang.Object) euclideanIntegerPoint61);
        double double63 = euclideanIntegerPoint40.distanceFrom(euclideanIntegerPoint61);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(-1,10,10,97,10,100)" + "'", str10, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint39);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint40);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(-1,10,10,97,10,100)" + "'", str59, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        java.lang.Class<?> wildcardClass77 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        int[] intArray6 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint33 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList35 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35, euclideanIntegerPointArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = euclideanIntegerPoint25.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        int[] intArray44 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray46 = euclideanIntegerPoint45.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint47 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray46);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        java.lang.String str57 = euclideanIntegerPoint56.toString();
        double double58 = euclideanIntegerPoint48.distanceFrom(euclideanIntegerPoint56);
        java.lang.String str59 = euclideanIntegerPoint56.toString();
        int[] intArray66 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint67 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray66);
        int[] intArray69 = euclideanIntegerPoint68.getPoint();
        double double70 = euclideanIntegerPoint56.distanceFrom(euclideanIntegerPoint68);
        double double71 = euclideanIntegerPoint39.distanceFrom(euclideanIntegerPoint56);
        java.lang.String str72 = euclideanIntegerPoint39.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint37);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint38);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(-1,10,10,97,10,100)" + "'", str57, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 11.445523142259598d + "'", double58 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(-1,10,10,97,10,100)" + "'", str59, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-1,10,10,97,10,100)" + "'", str72, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray10);
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        java.lang.String str20 = euclideanIntegerPoint19.toString();
        int[] intArray21 = euclideanIntegerPoint19.getPoint();
        int[] intArray22 = euclideanIntegerPoint19.getPoint();
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        java.lang.String str39 = euclideanIntegerPoint38.toString();
        int[] intArray40 = euclideanIntegerPoint38.getPoint();
        boolean boolean42 = euclideanIntegerPoint38.equals((java.lang.Object) 1.0d);
        int[] intArray43 = euclideanIntegerPoint38.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        double double45 = euclideanIntegerPoint30.distanceFrom(euclideanIntegerPoint44);
        boolean boolean46 = euclideanIntegerPoint19.equals((java.lang.Object) euclideanIntegerPoint30);
        boolean boolean47 = euclideanIntegerPoint11.equals((java.lang.Object) euclideanIntegerPoint30);
        boolean boolean49 = euclideanIntegerPoint30.equals((java.lang.Object) (short) 1);
        java.lang.Class<?> wildcardClass50 = euclideanIntegerPoint30.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-1,10,10,97,10,100)" + "'", str39, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        java.lang.String str22 = euclideanIntegerPoint21.toString();
        int[] intArray23 = euclideanIntegerPoint21.getPoint();
        java.lang.Class<?> wildcardClass24 = intArray23.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(-1,10,10,97,10,100)" + "'", str22, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        boolean boolean83 = euclideanIntegerPoint7.equals((java.lang.Object) intArray80);
        java.lang.Class<?> wildcardClass84 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray12 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray12);
        boolean boolean14 = euclideanIntegerPoint7.equals((java.lang.Object) euclideanIntegerPoint13);
        int[] intArray15 = euclideanIntegerPoint13.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = euclideanIntegerPoint13.distanceFrom(euclideanIntegerPoint16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        java.lang.String str11 = euclideanIntegerPoint10.toString();
        int[] intArray18 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray18);
        java.lang.String str20 = euclideanIntegerPoint19.toString();
        int[] intArray21 = euclideanIntegerPoint19.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint22 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray21);
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray37 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray37);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint38 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList40 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList40, euclideanIntegerPointArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = euclideanIntegerPoint30.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = euclideanIntegerPoint22.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList40);
        java.lang.String str44 = euclideanIntegerPoint43.toString();
        int[] intArray45 = euclideanIntegerPoint43.getPoint();
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        java.lang.String str54 = euclideanIntegerPoint53.toString();
        int[] intArray55 = euclideanIntegerPoint53.getPoint();
        boolean boolean57 = euclideanIntegerPoint53.equals((java.lang.Object) 1.0d);
        int[] intArray58 = euclideanIntegerPoint53.getPoint();
        java.lang.String str59 = euclideanIntegerPoint53.toString();
        double double60 = euclideanIntegerPoint43.distanceFrom(euclideanIntegerPoint53);
        int[] intArray61 = euclideanIntegerPoint43.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        double double63 = euclideanIntegerPoint10.distanceFrom(euclideanIntegerPoint62);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(0,10,-1,100)" + "'", str11, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint42);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(-1,10,10,97,10,100)" + "'", str44, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(-1,10,10,97,10,100)" + "'", str54, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(-1,10,10,97,10,100)" + "'", str59, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 11.445523142259598d + "'", double63 == 11.445523142259598d);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint12 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint13 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        int[] intArray14 = euclideanIntegerPoint13.getPoint();
        int[] intArray15 = euclideanIntegerPoint13.getPoint();
        int[] intArray20 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        int[] intArray22 = euclideanIntegerPoint21.getPoint();
        int[] intArray23 = euclideanIntegerPoint21.getPoint();
        int[] intArray24 = euclideanIntegerPoint21.getPoint();
        // The following exception was thrown during execution in test generation
        try {
            double double25 = euclideanIntegerPoint13.distanceFrom(euclideanIntegerPoint21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 10, -1, 100]");
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        int[] intArray71 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray73 = euclideanIntegerPoint72.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        int[] intArray81 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        int[] intArray84 = euclideanIntegerPoint83.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        int[] intArray87 = euclideanIntegerPoint85.getPoint();
        java.lang.String str88 = euclideanIntegerPoint85.toString();
        java.lang.String str89 = euclideanIntegerPoint85.toString();
        double double90 = euclideanIntegerPoint74.distanceFrom(euclideanIntegerPoint85);
        java.lang.String str91 = euclideanIntegerPoint85.toString();
        int[] intArray92 = euclideanIntegerPoint85.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-1,10,10,97,10,100)" + "'", str88, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(-1,10,10,97,10,100)" + "'", str89, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-1,10,10,97,10,100)" + "'", str91, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        java.lang.String str19 = euclideanIntegerPoint16.toString();
        java.lang.String str20 = euclideanIntegerPoint16.toString();
        int[] intArray25 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray27 = euclideanIntegerPoint26.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint45 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList47 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47, euclideanIntegerPointArray46);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = euclideanIntegerPoint37.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList47);
        int[] intArray52 = euclideanIntegerPoint51.getPoint();
        int[] intArray53 = euclideanIntegerPoint51.getPoint();
        int[] intArray58 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint59 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray58);
        java.lang.String str62 = euclideanIntegerPoint61.toString();
        int[] intArray69 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray69);
        java.lang.String str71 = euclideanIntegerPoint70.toString();
        int[] intArray72 = euclideanIntegerPoint70.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        int[] intArray80 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray90 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint89 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList91 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList91, euclideanIntegerPointArray90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint93 = euclideanIntegerPoint81.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint94 = euclideanIntegerPoint73.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList91);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint95 = euclideanIntegerPoint61.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList91);
        boolean boolean96 = euclideanIntegerPoint51.equals((java.lang.Object) euclideanIntegerPoint95);
        java.lang.Class<?> wildcardClass97 = euclideanIntegerPoint95.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(-1,10,10,97,10,100)" + "'", str20, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint49);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint50);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(0,10,-1,100)" + "'", str62, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(-1,10,10,97,10,100)" + "'", str71, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint93);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint94);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList28 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28, euclideanIntegerPointArray27);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList28);
        java.lang.String str32 = euclideanIntegerPoint31.toString();
        int[] intArray33 = euclideanIntegerPoint31.getPoint();
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        java.lang.String str42 = euclideanIntegerPoint41.toString();
        int[] intArray43 = euclideanIntegerPoint41.getPoint();
        boolean boolean45 = euclideanIntegerPoint41.equals((java.lang.Object) 1.0d);
        int[] intArray46 = euclideanIntegerPoint41.getPoint();
        java.lang.String str47 = euclideanIntegerPoint41.toString();
        double double48 = euclideanIntegerPoint31.distanceFrom(euclideanIntegerPoint41);
        int[] intArray49 = euclideanIntegerPoint41.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint50 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray49);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = euclideanIntegerPoint51.centroidOf(euclideanIntegerPointCollection52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint30);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(-1,10,10,97,10,100)" + "'", str32, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(-1,10,10,97,10,100)" + "'", str42, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(-1,10,10,97,10,100)" + "'", str47, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        java.lang.String str19 = euclideanIntegerPoint18.toString();
        int[] intArray20 = euclideanIntegerPoint18.getPoint();
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint52 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList54 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54, euclideanIntegerPointArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = euclideanIntegerPoint44.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList54);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList74 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74, euclideanIntegerPointArray73);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList74);
        int[] intArray83 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        java.lang.String str85 = euclideanIntegerPoint84.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint36, euclideanIntegerPoint56, euclideanIntegerPoint64, euclideanIntegerPoint84 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList87 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87, euclideanIntegerPointArray86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint28.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList87);
        boolean boolean93 = euclideanIntegerPoint91.equals((java.lang.Object) 100.0d);
        java.lang.String str94 = euclideanIntegerPoint91.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(-1,10,10,97,10,100)" + "'", str19, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-1,10,10,97,10,100)" + "'", str85, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1,10,10,97,10,100)" + "'", str94, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray78 = euclideanIntegerPoint16.getPoint();
        java.lang.String str79 = euclideanIntegerPoint16.toString();
        java.lang.String str80 = euclideanIntegerPoint16.toString();
        int[] intArray81 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray81);
        boolean boolean83 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint82);
        int[] intArray84 = euclideanIntegerPoint82.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        int[] intArray87 = euclideanIntegerPoint86.getPoint();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(-1,10,10,97,10,100)" + "'", str79, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(-1,10,10,97,10,100)" + "'", str80, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray70 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint71 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList73 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73, euclideanIntegerPointArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = euclideanIntegerPoint63.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList73);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        java.lang.String str84 = euclideanIntegerPoint83.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint35, euclideanIntegerPoint55, euclideanIntegerPoint63, euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList86 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86, euclideanIntegerPointArray85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList86);
        int[] intArray90 = euclideanIntegerPoint89.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint92 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray90);
        java.lang.Class<?> wildcardClass93 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        java.lang.String str11 = euclideanIntegerPoint10.toString();
        java.lang.String str12 = euclideanIntegerPoint10.toString();
        java.lang.Class<?> wildcardClass13 = euclideanIntegerPoint10.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(-1,10,10,97,10,100)" + "'", str11, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(-1,10,10,97,10,100)" + "'", str12, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray8);
        java.lang.String str11 = euclideanIntegerPoint10.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(-1,10,10,97,10,100)" + "'", str11, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        int[] intArray6 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        int[] intArray15 = euclideanIntegerPoint14.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint33 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList35 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35, euclideanIntegerPointArray34);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = euclideanIntegerPoint25.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint38 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList35);
        int[] intArray44 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        java.lang.String str46 = euclideanIntegerPoint45.toString();
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        int[] intArray55 = euclideanIntegerPoint54.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint58 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        double double59 = euclideanIntegerPoint45.distanceFrom(euclideanIntegerPoint58);
        java.lang.String str60 = euclideanIntegerPoint58.toString();
        int[] intArray67 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray67);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray77 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint76 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList78 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78, euclideanIntegerPointArray77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint68.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint58.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = euclideanIntegerPoint39.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList78);
        java.lang.String str83 = euclideanIntegerPoint39.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint37);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint38);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(0,10,-1,100)" + "'", str46, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 11.445523142259598d + "'", double59 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(-1,10,10,97,10,100)" + "'", str60, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray26 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray26);
        java.lang.String str28 = euclideanIntegerPoint27.toString();
        double double29 = euclideanIntegerPoint19.distanceFrom(euclideanIntegerPoint27);
        java.lang.String str30 = euclideanIntegerPoint27.toString();
        java.lang.String str31 = euclideanIntegerPoint27.toString();
        int[] intArray36 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray38 = euclideanIntegerPoint37.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray47 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray47);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint56 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList58 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58, euclideanIntegerPointArray57);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = euclideanIntegerPoint48.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = euclideanIntegerPoint40.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = euclideanIntegerPoint27.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = euclideanIntegerPoint10.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList58);
        int[] intArray64 = euclideanIntegerPoint10.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        java.lang.Class<?> wildcardClass66 = euclideanIntegerPoint65.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(-1,10,10,97,10,100)" + "'", str28, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 11.445523142259598d + "'", double29 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(-1,10,10,97,10,100)" + "'", str30, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(-1,10,10,97,10,100)" + "'", str31, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint60);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint61);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint62);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        int[] intArray13 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        double double16 = euclideanIntegerPoint5.distanceFrom(euclideanIntegerPoint15);
        int[] intArray17 = euclideanIntegerPoint5.getPoint();
        java.lang.String str18 = euclideanIntegerPoint5.toString();
        int[] intArray19 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray22 = euclideanIntegerPoint21.getPoint();
        int[] intArray29 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        java.lang.String str31 = euclideanIntegerPoint30.toString();
        int[] intArray32 = euclideanIntegerPoint30.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray38 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        int[] intArray40 = euclideanIntegerPoint39.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        int[] intArray43 = euclideanIntegerPoint42.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        boolean boolean45 = euclideanIntegerPoint33.equals((java.lang.Object) euclideanIntegerPoint44);
        int[] intArray46 = euclideanIntegerPoint33.getPoint();
        int[] intArray53 = new int[] { 0, ' ', 10, 1, (byte) 0, '4' };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        int[] intArray60 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        int[] intArray62 = euclideanIntegerPoint61.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        int[] intArray79 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint80 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList82 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82, euclideanIntegerPointArray81);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = euclideanIntegerPoint72.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = euclideanIntegerPoint64.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = euclideanIntegerPoint55.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint21.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList82);
        java.lang.String str89 = euclideanIntegerPoint88.toString();
        java.lang.Class<?> wildcardClass90 = euclideanIntegerPoint88.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.445523142259598d + "'", double16 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(0,10,-1,100)" + "'", str18, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(-1,10,10,97,10,100)" + "'", str31, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 32, 10, 1, 0, 52]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint84);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint85);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint86);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint87);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(-1,10,10,97)" + "'", str89, "(-1,10,10,97)");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        java.lang.String str26 = euclideanIntegerPoint25.toString();
        int[] intArray27 = euclideanIntegerPoint25.getPoint();
        boolean boolean29 = euclideanIntegerPoint25.equals((java.lang.Object) 1.0d);
        int[] intArray30 = euclideanIntegerPoint25.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        double double32 = euclideanIntegerPoint17.distanceFrom(euclideanIntegerPoint31);
        double double33 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint17);
        int[] intArray34 = euclideanIntegerPoint7.getPoint();
        java.lang.Object obj35 = null;
        boolean boolean36 = euclideanIntegerPoint7.equals(obj35);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(-1,10,10,97,10,100)" + "'", str26, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        java.lang.String str17 = euclideanIntegerPoint16.toString();
        double double18 = euclideanIntegerPoint8.distanceFrom(euclideanIntegerPoint16);
        int[] intArray23 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray25 = euclideanIntegerPoint24.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint27 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray34 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray34);
        java.lang.String str36 = euclideanIntegerPoint35.toString();
        double double37 = euclideanIntegerPoint27.distanceFrom(euclideanIntegerPoint35);
        java.lang.String str38 = euclideanIntegerPoint35.toString();
        int[] intArray45 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray45);
        java.lang.String str47 = euclideanIntegerPoint46.toString();
        int[] intArray48 = euclideanIntegerPoint46.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint49 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray48);
        int[] intArray56 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray56);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray66 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint65 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList67 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67, euclideanIntegerPointArray66);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint69 = euclideanIntegerPoint57.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint70 = euclideanIntegerPoint49.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = euclideanIntegerPoint35.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList67);
        java.lang.String str73 = euclideanIntegerPoint16.toString();
        java.lang.String str74 = euclideanIntegerPoint16.toString();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(-1,10,10,97,10,100)" + "'", str17, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.445523142259598d + "'", double18 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(-1,10,10,97,10,100)" + "'", str36, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 11.445523142259598d + "'", double37 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(-1,10,10,97,10,100)" + "'", str38, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(-1,10,10,97,10,100)" + "'", str47, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint69);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint70);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint71);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        java.lang.String str69 = euclideanIntegerPoint7.toString();
        boolean boolean71 = euclideanIntegerPoint7.equals((java.lang.Object) (-1));
        int[] intArray78 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray78);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        boolean boolean83 = euclideanIntegerPoint7.equals((java.lang.Object) intArray80);
        java.lang.Object obj84 = null;
        boolean boolean85 = euclideanIntegerPoint7.equals(obj84);
        java.lang.String str86 = euclideanIntegerPoint7.toString();
        int[] intArray87 = euclideanIntegerPoint7.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(-1,10,10,97,10,100)" + "'", str69, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        int[] intArray22 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint23 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray22);
        int[] intArray30 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint31 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList33 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33, euclideanIntegerPointArray32);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint35 = euclideanIntegerPoint23.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList33);
        int[] intArray42 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray42);
        int[] intArray50 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint51 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray50);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint51 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList53 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53, euclideanIntegerPointArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint55 = euclideanIntegerPoint43.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList53);
        int[] intArray62 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        java.lang.String str64 = euclideanIntegerPoint63.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15, euclideanIntegerPoint35, euclideanIntegerPoint43, euclideanIntegerPoint63 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray69 = euclideanIntegerPoint7.getPoint();
        int[] intArray70 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint71 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray70);
        int[] intArray80 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        int[] intArray83 = euclideanIntegerPoint82.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray83);
        int[] intArray85 = euclideanIntegerPoint84.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        boolean boolean87 = euclideanIntegerPoint73.equals((java.lang.Object) euclideanIntegerPoint86);
        int[] intArray88 = euclideanIntegerPoint73.getPoint();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(-1,10,10,97,10,100)" + "'", str64, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint9 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str11 = euclideanIntegerPoint10.toString();
        int[] intArray12 = euclideanIntegerPoint10.getPoint();
        int[] intArray19 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray27 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray35 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint36 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray35);
        int[] intArray43 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint44 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList46 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList46, euclideanIntegerPointArray45);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint48 = euclideanIntegerPoint36.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList46);
        int[] intArray55 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint56 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray55);
        int[] intArray63 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray63);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint64 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList66 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66, euclideanIntegerPointArray65);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint68 = euclideanIntegerPoint56.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList66);
        int[] intArray75 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray75);
        java.lang.String str77 = euclideanIntegerPoint76.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray78 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint28, euclideanIntegerPoint48, euclideanIntegerPoint56, euclideanIntegerPoint76 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList79 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList79, euclideanIntegerPointArray78);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = euclideanIntegerPoint20.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList79);
        int[] intArray82 = euclideanIntegerPoint20.getPoint();
        java.lang.String str83 = euclideanIntegerPoint20.toString();
        java.lang.String str84 = euclideanIntegerPoint20.toString();
        int[] intArray85 = euclideanIntegerPoint20.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint86 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray85);
        double double87 = euclideanIntegerPoint10.distanceFrom(euclideanIntegerPoint86);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint10.centroidOf(euclideanIntegerPointCollection88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(-1,10,10,97,10,100)" + "'", str11, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint48);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(-1,10,10,97,10,100)" + "'", str77, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(-1,10,10,97,10,100)" + "'", str84, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray17 = euclideanIntegerPoint16.getPoint();
        java.lang.String str18 = euclideanIntegerPoint16.toString();
        int[] intArray19 = euclideanIntegerPoint16.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        boolean boolean21 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint20);
        int[] intArray28 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint29 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray28);
        int[] intArray36 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint37 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray36);
        int[] intArray44 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray44);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint53 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList55 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55, euclideanIntegerPointArray54);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint57 = euclideanIntegerPoint45.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList55);
        int[] intArray64 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray64);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray84 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint85 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray84);
        java.lang.String str86 = euclideanIntegerPoint85.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray87 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint37, euclideanIntegerPoint57, euclideanIntegerPoint65, euclideanIntegerPoint85 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList88 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88, euclideanIntegerPointArray87);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint29.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList88);
        int[] intArray91 = euclideanIntegerPoint29.getPoint();
        java.lang.String str92 = euclideanIntegerPoint29.toString();
        int[] intArray93 = euclideanIntegerPoint29.getPoint();
        boolean boolean94 = euclideanIntegerPoint8.equals((java.lang.Object) euclideanIntegerPoint29);
        java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointCollection95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint96 = euclideanIntegerPoint8.centroidOf(euclideanIntegerPointCollection95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1,10,10,97,10,100)" + "'", str18, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(-1,10,10,97,10,100)" + "'", str86, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(-1,10,10,97,10,100)" + "'", str92, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray14 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint15 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray14);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint15 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList17 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17, euclideanIntegerPointArray16);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint19 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList17);
        int[] intArray20 = euclideanIntegerPoint7.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint21 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray20);
        java.lang.String str22 = euclideanIntegerPoint21.toString();
        int[] intArray27 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint28 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray27);
        int[] intArray29 = euclideanIntegerPoint28.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint30 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray29);
        int[] intArray38 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint39 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray38);
        java.lang.String str40 = euclideanIntegerPoint39.toString();
        double double41 = euclideanIntegerPoint31.distanceFrom(euclideanIntegerPoint39);
        int[] intArray42 = euclideanIntegerPoint39.getPoint();
        int[] intArray43 = euclideanIntegerPoint39.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray43);
        boolean boolean45 = euclideanIntegerPoint21.equals((java.lang.Object) intArray43);
        java.lang.Class<?> wildcardClass46 = euclideanIntegerPoint21.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(-1,10,10,97,10,100)" + "'", str22, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(-1,10,10,97,10,100)" + "'", str40, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 11.445523142259598d + "'", double41 == 11.445523142259598d);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        java.lang.String str26 = euclideanIntegerPoint25.toString();
        int[] intArray27 = euclideanIntegerPoint25.getPoint();
        boolean boolean29 = euclideanIntegerPoint25.equals((java.lang.Object) 1.0d);
        int[] intArray30 = euclideanIntegerPoint25.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint31 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray30);
        double double32 = euclideanIntegerPoint17.distanceFrom(euclideanIntegerPoint31);
        double double33 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint17);
        java.lang.Class<?> wildcardClass34 = euclideanIntegerPoint7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(-1,10,10,97,10,100)" + "'", str26, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        boolean boolean81 = euclideanIntegerPoint7.equals((java.lang.Object) 0);
        int[] intArray88 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray88);
        java.lang.String str90 = euclideanIntegerPoint89.toString();
        int[] intArray91 = euclideanIntegerPoint89.getPoint();
        double double92 = euclideanIntegerPoint7.distanceFrom(euclideanIntegerPoint89);
        java.lang.Object obj93 = null;
        boolean boolean94 = euclideanIntegerPoint7.equals(obj93);
        int[] intArray95 = euclideanIntegerPoint7.getPoint();
        int[] intArray96 = euclideanIntegerPoint7.getPoint();
        java.lang.Object obj97 = null;
        boolean boolean98 = euclideanIntegerPoint7.equals(obj97);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(-1,10,10,97,10,100)" + "'", str90, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint6 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray7 = euclideanIntegerPoint6.getPoint();
        java.lang.String str8 = euclideanIntegerPoint6.toString();
        int[] intArray13 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint14 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray13);
        java.lang.String str15 = euclideanIntegerPoint14.toString();
        double double16 = euclideanIntegerPoint6.distanceFrom(euclideanIntegerPoint14);
        int[] intArray17 = euclideanIntegerPoint6.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(0,10,-1,100)" + "'", str8, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0,10,-1,100)" + "'", str15, "(0,10,-1,100)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 10, -1, 100]");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        int[] intArray4 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint5 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray4);
        int[] intArray6 = euclideanIntegerPoint5.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray9 = euclideanIntegerPoint8.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint10 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint11 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray9);
        java.lang.String str12 = euclideanIntegerPoint11.toString();
        int[] intArray19 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint20 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray19);
        int[] intArray21 = euclideanIntegerPoint20.getPoint();
        java.lang.String str22 = euclideanIntegerPoint20.toString();
        int[] intArray23 = euclideanIntegerPoint20.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray45 = euclideanIntegerPoint32.getPoint();
        java.lang.String str46 = euclideanIntegerPoint32.toString();
        int[] intArray51 = new int[] { 0, 10, (-1), 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        java.lang.String str53 = euclideanIntegerPoint52.toString();
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        int[] intArray62 = euclideanIntegerPoint61.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray62);
        double double66 = euclideanIntegerPoint52.distanceFrom(euclideanIntegerPoint65);
        java.lang.String str67 = euclideanIntegerPoint65.toString();
        int[] intArray74 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray74);
        int[] intArray82 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint83 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray82);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray84 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint83 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList85 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85, euclideanIntegerPointArray84);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint87 = euclideanIntegerPoint75.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint88 = euclideanIntegerPoint65.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint89 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint90 = euclideanIntegerPoint24.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint91 = euclideanIntegerPoint11.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList85);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, -1, 100]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0,10,-1,100)" + "'", str12, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(-1,10,10,97,10,100)" + "'", str22, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(-1,10,10,97,10,100)" + "'", str46, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(0,10,-1,100)" + "'", str53, "(0,10,-1,100)");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 11.445523142259598d + "'", double66 == 11.445523142259598d);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(-1,10,10,97,10,100)" + "'", str67, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint87);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint88);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint89);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint90);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint91);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        java.lang.String str8 = euclideanIntegerPoint7.toString();
        int[] intArray9 = euclideanIntegerPoint7.getPoint();
        int[] intArray16 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint17 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray16);
        int[] intArray24 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint25 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray24);
        int[] intArray32 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint33 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray32);
        int[] intArray40 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray40);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint41 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList43 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43, euclideanIntegerPointArray42);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint45 = euclideanIntegerPoint33.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList43);
        int[] intArray52 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint53 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray52);
        int[] intArray60 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray60);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint61 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList63 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63, euclideanIntegerPointArray62);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint65 = euclideanIntegerPoint53.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList63);
        int[] intArray72 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint73 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray72);
        java.lang.String str74 = euclideanIntegerPoint73.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray75 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint25, euclideanIntegerPoint45, euclideanIntegerPoint53, euclideanIntegerPoint73 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList76 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76, euclideanIntegerPointArray75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint17.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList76);
        int[] intArray80 = euclideanIntegerPoint79.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint81 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint82 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray80);
        java.lang.String str83 = euclideanIntegerPoint82.toString();
        int[] intArray84 = euclideanIntegerPoint82.getPoint();
        java.lang.Class<?> wildcardClass85 = euclideanIntegerPoint82.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1,10,10,97,10,100)" + "'", str8, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint45);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(-1,10,10,97,10,100)" + "'", str74, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray8 = euclideanIntegerPoint7.getPoint();
        java.lang.String str9 = euclideanIntegerPoint7.toString();
        int[] intArray10 = euclideanIntegerPoint7.getPoint();
        int[] intArray17 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint18 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray17);
        int[] intArray25 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint26 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray25);
        int[] intArray33 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint34 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray33);
        int[] intArray41 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint42 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray43 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint42 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList44 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44, euclideanIntegerPointArray43);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint46 = euclideanIntegerPoint34.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList44);
        int[] intArray53 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint54 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray53);
        int[] intArray61 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint62 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray63 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint62 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList64 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64, euclideanIntegerPointArray63);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint66 = euclideanIntegerPoint54.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList64);
        int[] intArray73 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray73);
        java.lang.String str75 = euclideanIntegerPoint74.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray76 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint26, euclideanIntegerPoint46, euclideanIntegerPoint54, euclideanIntegerPoint74 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList77 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77, euclideanIntegerPointArray76);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint79 = euclideanIntegerPoint18.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = euclideanIntegerPoint7.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList77);
        java.lang.Class<?> wildcardClass81 = euclideanIntegerPoint80.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1,10,10,97,10,100)" + "'", str9, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(-1,10,10,97,10,100)" + "'", str75, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint79);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint7 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint8 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray6);
        int[] intArray15 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint16 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray15);
        int[] intArray23 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint24 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray23);
        int[] intArray31 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint32 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray31);
        int[] intArray39 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint40 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray39);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray41 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint40 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList42 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42, euclideanIntegerPointArray41);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint44 = euclideanIntegerPoint32.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList42);
        int[] intArray51 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint52 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray51);
        int[] intArray59 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint60 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray59);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray61 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint60 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList62 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62, euclideanIntegerPointArray61);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint64 = euclideanIntegerPoint52.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList62);
        int[] intArray71 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint72 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray71);
        java.lang.String str73 = euclideanIntegerPoint72.toString();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] euclideanIntegerPointArray74 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint[] { euclideanIntegerPoint24, euclideanIntegerPoint44, euclideanIntegerPoint52, euclideanIntegerPoint72 };
        java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint> euclideanIntegerPointList75 = new java.util.ArrayList<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75, euclideanIntegerPointArray74);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint77 = euclideanIntegerPoint16.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint78 = euclideanIntegerPoint8.centroidOf((java.util.Collection<org.apache.commons.math.stat.clustering.EuclideanIntegerPoint>) euclideanIntegerPointList75);
        int[] intArray79 = euclideanIntegerPoint78.getPoint();
        org.apache.commons.math.stat.clustering.EuclideanIntegerPoint euclideanIntegerPoint80 = new org.apache.commons.math.stat.clustering.EuclideanIntegerPoint(intArray79);
        java.lang.String str81 = euclideanIntegerPoint80.toString();
        int[] intArray82 = euclideanIntegerPoint80.getPoint();
        java.lang.String str83 = euclideanIntegerPoint80.toString();
        int[] intArray84 = euclideanIntegerPoint80.getPoint();
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(-1,10,10,97,10,100)" + "'", str73, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(euclideanIntegerPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint77);
        org.junit.Assert.assertNotNull(euclideanIntegerPoint78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(-1,10,10,97,10,100)" + "'", str81, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-1,10,10,97,10,100)" + "'", str83, "(-1,10,10,97,10,100)");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 10, 97, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node node19 = node18.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node25 = node1.getLastChild();
        int int26 = node1.getSourcePosition();
        node1.removeProp(38);
        int int29 = node1.getSourceOffset();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        double double49 = node38.getDouble();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = null;
        node54.setJSDocInfo(jSDocInfo65);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 0, node32, node38, node54);
        boolean boolean68 = node1.isEquivalentTo(node38);
        boolean boolean69 = node1.isDo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 40.0d + "'", double49 == 40.0d);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node4.siblings();
        boolean boolean40 = node4.isOptionalArg();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node4.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoIfMissingFrom(node36);
        node38.putBooleanProp(31, true);
        boolean boolean42 = node38.isBreak();
        boolean boolean43 = node38.isOptionalArg();
        com.google.javascript.rhino.Node node44 = node18.useSourceInfoFromForTree(node38);
        boolean boolean45 = node44.isThrow();
        boolean boolean46 = node44.isDefaultCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        java.lang.String str38 = node8.toStringTree();
        double double39 = node8.getDouble();
        boolean boolean40 = node8.isTrue();
        com.google.javascript.rhino.Node node41 = node8.cloneNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 40.0\n" + "'", str38, "NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 40.0d + "'", double39 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        node36.detachChildren();
        boolean boolean38 = node36.isEmpty();
        java.lang.String str39 = node36.getQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        node4.setVarArgs(false);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        double double55 = node44.getDouble();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int58 = node57.getChildCount();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        boolean boolean68 = node60.isDebugger();
        boolean boolean69 = node60.isTrue();
        com.google.javascript.rhino.Node node70 = node57.copyInformationFrom(node60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        node60.setJSDocInfo(jSDocInfo71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 0, node38, node44, node60);
        java.lang.String str74 = node44.toStringTree();
        com.google.javascript.rhino.Node node75 = node4.useSourceInfoIfMissingFromForTree(node44);
        java.lang.Class<?> wildcardClass76 = node75.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 40.0d + "'", double55 == 40.0d);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER 40.0\n" + "'", str74, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        java.util.Set<java.lang.String> strSet24 = node18.getDirectives();
        int int25 = node5.getIndexOfChild(node18);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        boolean boolean30 = node29.isDebugger();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node29.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = null;
        node36.setJSDocInfo(jSDocInfo47);
        int int49 = node36.getSourceOffset();
        node36.setLength(39);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("STRING ", 10, (int) (short) 100);
        com.google.javascript.rhino.Node node56 = node36.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        boolean boolean68 = node58.isInstanceOf();
        int int69 = node58.getType();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable70 = node58.getAncestors();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(50, node18, node29, node36, node58);
        int int72 = node18.getSourceOffset();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 39 + "'", int69 == 39);
        org.junit.Assert.assertNotNull(ancestorIterable70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 30, 50);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.detachChildren();
        int int17 = node4.getLength();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node20.siblings();
        node20.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node27.siblings();
        node27.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] { node27 };
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) '#', nodeArray32, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        boolean boolean47 = node41.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node41.getJSDocInfo();
        boolean boolean49 = node41.isDebugger();
        boolean boolean50 = node41.isTrue();
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node41);
        node51.setSourceEncodedPositionForTree((int) (short) 0);
        node51.setLineno((int) ' ');
        boolean boolean56 = node51.isCatch();
        boolean boolean57 = node51.isDebugger();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int60 = node59.getChildCount();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        java.lang.String str67 = node62.checkTreeEquals(node65);
        boolean boolean68 = node62.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node62.getJSDocInfo();
        boolean boolean70 = node62.isDebugger();
        boolean boolean71 = node62.isTrue();
        com.google.javascript.rhino.Node node72 = node59.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        com.google.javascript.rhino.Node node76 = node59.useSourceInfoIfMissingFrom(node74);
        boolean boolean77 = node59.isTypeOf();
        com.google.javascript.rhino.Node node78 = node51.copyInformationFromForTree(node59);
        node35.putProp((int) (byte) 1, (java.lang.Object) node51);
        boolean boolean80 = node35.isTrue();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(42, node20, node35);
        com.google.javascript.rhino.Node node82 = node4.useSourceInfoFromForTree(node35);
        // The following exception was thrown during execution in test generation
        try {
            node4.setSideEffectFlags(40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 36);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        boolean boolean3 = node1.isSyntheticBlock();
        boolean boolean4 = node1.hasOneChild();
        boolean boolean5 = node1.isDec();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 40.0\n");
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int9 = node8.getChildCount();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        java.lang.String str16 = node11.checkTreeEquals(node14);
        boolean boolean17 = node11.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node11.getJSDocInfo();
        boolean boolean19 = node11.isDebugger();
        boolean boolean20 = node11.isTrue();
        com.google.javascript.rhino.Node node21 = node8.copyInformationFrom(node11);
        double double22 = node11.getDouble();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int25 = node24.getChildCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node37 = node24.copyInformationFrom(node27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = null;
        node27.setJSDocInfo(jSDocInfo38);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 0, node5, node11, node27);
        boolean boolean41 = node11.isAdd();
        int int42 = node11.getSourcePosition();
        boolean boolean43 = node11.isRegExp();
        node11.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = node11.getParent();
        boolean boolean47 = node46.isFromExterns();
        int int48 = node46.getLineno();
        node1.addChildToBack(node46);
        boolean boolean50 = node46.isCase();
        com.google.javascript.rhino.Node node51 = node46.detachFromParent();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "STRING NUMBER 40.0\n" + "'", str2, "STRING NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 40.0d + "'", double22 == 40.0d);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        int int71 = node22.getType();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node76 = node75.cloneNode();
        boolean boolean77 = node75.isTry();
        com.google.javascript.rhino.Node node78 = node22.clonePropsFrom(node75);
        boolean boolean79 = node75.isInstanceOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 39 + "'", int71 == 39);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        com.google.javascript.rhino.Node node72 = node22.getAncestor((int) (short) 1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        node15.setSourceEncodedPositionForTree((int) (short) 0);
        node15.setLineno((int) ' ');
        boolean boolean20 = node15.isAnd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        node50.setSourceEncodedPositionForTree((int) (short) 0);
        node50.setLineno((int) ' ');
        boolean boolean55 = node50.isCatch();
        boolean boolean56 = node50.isDebugger();
        com.google.javascript.rhino.Node node57 = node25.srcrefTree(node50);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        java.lang.String str64 = node59.checkTreeEquals(node62);
        boolean boolean65 = node59.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = node59.getJSDocInfo();
        boolean boolean67 = node59.isDebugger();
        boolean boolean68 = node59.isTrue();
        boolean boolean69 = node59.isFromExterns();
        boolean boolean70 = node59.isOptionalArg();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(10, node15, node57, node59, 15, 4095);
        boolean boolean74 = node73.isGetElem();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setThrows();
        int int7 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        boolean boolean26 = node1.isIf();
        int int28 = node1.getIntProp(0);
        boolean boolean29 = node1.isGetElem();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean32 = node31.isGetProp();
        boolean boolean33 = node31.isUnscopedQualifiedName();
        boolean boolean34 = node31.isAssignAdd();
        java.lang.String str35 = node31.toString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node54 = node37.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node55 = node31.copyInformationFrom(node37);
        boolean boolean56 = node31.isRegExp();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node61.isAdd();
        boolean boolean65 = node61.isNE();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenAfter(node31, node61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 40.0" + "'", str35, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        boolean boolean28 = node27.isAnd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean24 = node23.isGetProp();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        boolean boolean26 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node27 = node1.copyInformationFrom(node23);
        boolean boolean28 = node23.isNE();
        boolean boolean29 = node23.isTry();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node56 = node39.useSourceInfoIfMissingFrom(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = null;
        node39.setJSDocInfo(jSDocInfo57);
        node39.detachChildren();
        int int60 = node39.getLength();
        node39.putIntProp(1, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = node37.useSourceInfoIfMissingFrom(node39);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node70 = node69.removeChildren();
        java.lang.String str71 = node66.checkTreeEquals(node69);
        boolean boolean72 = node66.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = node66.getJSDocInfo();
        boolean boolean74 = node66.isDebugger();
        boolean boolean75 = node66.isTrue();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int79 = node78.getChildCount();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node82 = node81.removeChildren();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node85 = node84.removeChildren();
        java.lang.String str86 = node81.checkTreeEquals(node84);
        boolean boolean87 = node81.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node81.getJSDocInfo();
        boolean boolean89 = node81.isDebugger();
        boolean boolean90 = node81.isTrue();
        com.google.javascript.rhino.Node node91 = node78.copyInformationFrom(node81);
        com.google.javascript.rhino.JSDocInfo jSDocInfo92 = null;
        node81.setJSDocInfo(jSDocInfo92);
        node66.putProp((int) (short) 0, (java.lang.Object) node81);
        boolean boolean95 = node66.isIf();
        boolean boolean96 = node66.isReturn();
        boolean boolean97 = node66.isThis();
        com.google.javascript.rhino.Node node98 = node39.useSourceInfoIfMissingFrom(node66);
        boolean boolean99 = node66.isSwitch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(52);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        boolean boolean29 = node1.isArrayLit();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("NUMBER 40.0", 36, (int) (short) 100);
        com.google.javascript.rhino.Node node34 = node33.getLastSibling();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        boolean boolean50 = node39.isVoid();
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node39.setJSType(jSType51);
        boolean boolean53 = node34.isEquivalentTo(node39);
        com.google.javascript.rhino.Node node54 = node34.getLastSibling();
        boolean boolean55 = node1.isEquivalentToTyped(node34);
        boolean boolean56 = node1.isWhile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        boolean boolean8 = node1.isNull();
        boolean boolean9 = node1.isIn();
        boolean boolean10 = node1.hasChildren();
        node1.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node1.getAncestors();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ancestorIterable13);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        int int4 = node1.getLength();
        boolean boolean5 = node1.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int18 = node17.getChildCount();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        com.google.javascript.rhino.Node node30 = node17.copyInformationFrom(node20);
        node30.setSourceEncodedPositionForTree((int) (short) 0);
        node30.setLineno((int) ' ');
        boolean boolean35 = node30.isCatch();
        boolean boolean36 = node30.isDebugger();
        com.google.javascript.rhino.Node node37 = node5.srcrefTree(node30);
        boolean boolean38 = node5.isString();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(40, node41, 100, 100);
        boolean boolean45 = node44.hasChildren();
        node5.addChildToFront(node44);
        boolean boolean47 = node5.isSwitch();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(31, node5, 49, 38);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isThis();
        boolean boolean25 = node1.isFalse();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 16);
        com.google.javascript.rhino.Node node28 = node27.getLastSibling();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable29 = node27.getAncestors();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        java.lang.String str33 = node27.checkTreeEquals(node31);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node34 = node1.removeChildAfter(node31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(ancestorIterable29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 16.0\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: NUMBER 16.0\n\n\nSubtree2: NUMBER 40.0\n" + "'", str33, "Node tree inequality:\nTree1:\nNUMBER 16.0\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: NUMBER 16.0\n\n\nSubtree2: NUMBER 40.0\n");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node30 = node14.getLastSibling();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        boolean boolean46 = node35.isNE();
        node35.detachChildren();
        com.google.javascript.rhino.Node node48 = node30.useSourceInfoFromForTree(node35);
        boolean boolean49 = node48.isString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "STRING " + "'", str2, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        java.lang.String str17 = node14.getSourceFileName();
        boolean boolean18 = node14.isWith();
        boolean boolean19 = node14.isSwitch();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node14.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        boolean boolean20 = node4.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node4.siblings();
        int int22 = node4.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        boolean boolean34 = node24.isVoid();
        boolean boolean35 = node24.isIf();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node51 = node24.clonePropsFrom(node37);
        com.google.javascript.rhino.jstype.JSType jSType52 = node37.getJSType();
        boolean boolean53 = node37.isVar();
        java.lang.String str57 = node37.toString(false, false, false);
        boolean boolean58 = node37.isDelProp();
        boolean boolean59 = node4.isEquivalentTo(node37);
        boolean boolean60 = node4.isAnd();
        int int61 = node4.getLength();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER 40.0" + "'", str57, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 39 + "'", int61 == 39);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        int int55 = node34.getLength();
        boolean boolean56 = node34.isLabel();
        com.google.javascript.rhino.Node node57 = node1.copyInformationFrom(node34);
        boolean boolean58 = node1.isSyntheticBlock();
        // The following exception was thrown during execution in test generation
        try {
            node1.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        int int71 = node22.getType();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node76 = node75.cloneNode();
        boolean boolean77 = node75.isTry();
        com.google.javascript.rhino.Node node78 = node22.clonePropsFrom(node75);
        boolean boolean79 = node78.isInc();
        boolean boolean80 = node78.isName();
        java.lang.Class<?> wildcardClass81 = node78.getClass();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 39 + "'", int71 == 39);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        int int19 = node16.getLength();
        com.google.javascript.rhino.InputId inputId20 = node16.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(inputId20);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isCatch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        com.google.javascript.rhino.Node node27 = node14.useSourceInfoIfMissingFrom(node21);
        boolean boolean28 = node21.isTrue();
        boolean boolean29 = node21.isTrue();
        boolean boolean30 = node21.isVar();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        node19.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(40, node25, 100, 100);
        boolean boolean29 = node19.isEquivalentToTyped(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node48 = node31.useSourceInfoIfMissingFrom(node46);
        node48.putBooleanProp(31, true);
        boolean boolean52 = node48.isHook();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int67 = node66.getChildCount();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node70 = node69.removeChildren();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        java.lang.String str74 = node69.checkTreeEquals(node72);
        boolean boolean75 = node69.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = node69.getJSDocInfo();
        boolean boolean77 = node69.isDebugger();
        boolean boolean78 = node69.isTrue();
        com.google.javascript.rhino.Node node79 = node66.copyInformationFrom(node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = null;
        node69.setJSDocInfo(jSDocInfo80);
        node54.putProp((int) (short) 0, (java.lang.Object) node69);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100, node19, node48, node54, 0, 15);
        int int86 = node85.getLineno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, 39, 4);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node23 = node6.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = null;
        node6.setJSDocInfo(jSDocInfo24);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean28 = node6.hasChild(node27);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(54, node4, node27, node30);
        boolean boolean32 = node4.isDo();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        boolean boolean22 = node18.isBreak();
        boolean boolean24 = node18.getBooleanProp(41);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        java.lang.String str17 = node4.getSourceFileName();
        boolean boolean18 = node4.isEmpty();
        com.google.javascript.rhino.Node node19 = node4.removeChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, 37, (int) (byte) 1);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable4 = node3.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator5 = ancestorIterable4.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(ancestorIterable4);
        org.junit.Assert.assertNotNull(nodeSpliterator5);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node5.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        node5.addChildrenToBack(node32);
        boolean boolean34 = node5.isComma();
        boolean boolean35 = node5.isGetProp();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] { node5 };
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray36, 4, 0);
        boolean boolean40 = node39.isThrow();
        com.google.javascript.rhino.Node node42 = node39.getChildAtIndex((int) (byte) 1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        java.lang.String str38 = node8.toStringTree();
        node8.setDouble((double) (byte) 10);
        boolean boolean41 = node8.isDebugger();
        node8.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 40.0\n" + "'", str38, "NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        boolean boolean3 = node1.isThrow();
        int int4 = node1.getSourcePosition();
        java.lang.Class<?> wildcardClass5 = node1.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        int int32 = node1.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(40, node35, 100, 100);
        boolean boolean39 = node38.isComma();
        node38.setCharno(35);
        boolean boolean42 = node38.isCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = node1.removeChildAfter(node38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.detachChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        double double33 = node22.getDouble();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        java.util.Set<java.lang.String> strSet41 = node35.getDirectives();
        int int42 = node22.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(39, node5, node22);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable44 = node5.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor45 = ancestorIterable44.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator46 = ancestorIterable44.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor47 = ancestorIterable44.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator48 = ancestorIterable44.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator49 = ancestorIterable44.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 40.0d + "'", double33 == 40.0d);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable44);
        org.junit.Assert.assertNotNull(nodeItor45);
        org.junit.Assert.assertNotNull(nodeSpliterator46);
        org.junit.Assert.assertNotNull(nodeItor47);
        org.junit.Assert.assertNotNull(nodeSpliterator48);
        org.junit.Assert.assertNotNull(nodeSpliterator49);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(39);
        node1.setSourceEncodedPosition(52);
        com.google.javascript.rhino.Node node4 = node1.getLastChild();
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setCharno(1);
        boolean boolean32 = node28.getBooleanProp((int) (short) -1);
        boolean boolean33 = node28.isName();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        node48.setSourceEncodedPositionForTree((int) (short) 0);
        int int52 = node48.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node48.setStaticSourceFile(staticSourceFile53);
        int int55 = node48.getSourceOffset();
        boolean boolean56 = node28.hasChild(node48);
        node48.removeProp(49);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node37 = node4.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 100);
        com.google.javascript.rhino.Node node2 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node3 = node1.removeChildren();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        int int55 = node34.getLength();
        boolean boolean56 = node34.isLabel();
        com.google.javascript.rhino.Node node57 = node1.copyInformationFrom(node34);
        int int58 = node34.getChildCount();
        boolean boolean59 = node34.isLabelName();
        boolean boolean60 = node34.isNot();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean63 = node62.isGetProp();
        boolean boolean64 = node62.isUnscopedQualifiedName();
        boolean boolean65 = node62.isAssignAdd();
        java.lang.String str66 = node62.toString();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int69 = node68.getChildCount();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node72 = node71.removeChildren();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        java.lang.String str76 = node71.checkTreeEquals(node74);
        boolean boolean77 = node71.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = node71.getJSDocInfo();
        boolean boolean79 = node71.isDebugger();
        boolean boolean80 = node71.isTrue();
        com.google.javascript.rhino.Node node81 = node68.copyInformationFrom(node71);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node84 = node83.removeChildren();
        com.google.javascript.rhino.Node node85 = node68.useSourceInfoIfMissingFrom(node83);
        com.google.javascript.rhino.Node node86 = node62.copyInformationFrom(node68);
        com.google.javascript.rhino.Node node87 = node86.cloneNode();
        com.google.javascript.rhino.Node node88 = node34.clonePropsFrom(node87);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "NUMBER 40.0" + "'", str66, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSDocInfo78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isNot();
        node14.setDouble((double) 10L);
        boolean boolean24 = node14.isString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        java.util.Set<java.lang.String> strSet9 = node3.getDirectives();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int12 = node11.getChildCount();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        java.lang.String str19 = node14.checkTreeEquals(node17);
        boolean boolean20 = node14.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node14.getJSDocInfo();
        boolean boolean22 = node14.isDebugger();
        boolean boolean23 = node14.isTrue();
        com.google.javascript.rhino.Node node24 = node11.copyInformationFrom(node14);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node28 = node11.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node11.setJSDocInfo(jSDocInfo29);
        node11.detachChildren();
        int int32 = node11.getLength();
        boolean boolean33 = node11.isTry();
        boolean boolean34 = node11.isContinue();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node11.addChildToFront(node36);
        boolean boolean38 = node11.isAnd();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node40.siblings();
        node40.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        java.lang.String str51 = node46.checkTreeEquals(node49);
        boolean boolean52 = node46.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = node46.getJSDocInfo();
        boolean boolean54 = node46.isDebugger();
        boolean boolean55 = node46.isTrue();
        boolean boolean56 = node46.isFromExterns();
        boolean boolean57 = node46.isOptionalArg();
        com.google.javascript.rhino.Node node58 = node40.copyInformationFrom(node46);
        boolean boolean59 = node46.isHook();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        boolean boolean64 = node63.isDebugger();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder65 = node63.new FileLevelJsDocBuilder();
        boolean boolean66 = node63.isLabel();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int69 = node68.getChildCount();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node72 = node71.removeChildren();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        java.lang.String str76 = node71.checkTreeEquals(node74);
        boolean boolean77 = node71.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = node71.getJSDocInfo();
        boolean boolean79 = node71.isDebugger();
        boolean boolean80 = node71.isTrue();
        com.google.javascript.rhino.Node node81 = node68.copyInformationFrom(node71);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node84 = node83.removeChildren();
        com.google.javascript.rhino.Node node85 = node68.useSourceInfoIfMissingFrom(node83);
        node85.putBooleanProp(31, true);
        boolean boolean89 = node85.isBreak();
        boolean boolean90 = node85.isCall();
        boolean boolean91 = node85.isTrue();
        com.google.javascript.rhino.Node[] nodeArray92 = new com.google.javascript.rhino.Node[] { node3, node11, node46, node63, node85 };
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(0, nodeArray92, 32, 29);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(51, nodeArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: duplicate child");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSDocInfo53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSDocInfo78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(nodeArray92);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        double double17 = node6.getDouble();
        boolean boolean18 = node6.isNull();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        boolean boolean34 = node23.isNE();
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean39 = node38.isGetProp();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        node54.setSourceEncodedPositionForTree((int) (short) 0);
        int int58 = node54.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node59 = node38.useSourceInfoFromForTree(node54);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 100, node6, node23, node54, node61, 46, (int) (byte) 1);
        int int72 = node23.getType();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node77 = node76.cloneNode();
        boolean boolean78 = node76.isTry();
        com.google.javascript.rhino.Node node79 = node23.clonePropsFrom(node76);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node76);
        node80.setSourceEncodedPositionForTree(31);
        java.lang.Appendable appendable83 = null;
        // The following exception was thrown during execution in test generation
        try {
            node80.appendStringTree(appendable83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 40.0d + "'", double17 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 39 + "'", int72 == 39);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node1.addChildToFront(node26);
        boolean boolean28 = node1.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node15.isComma();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean19 = node18.isGetProp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        node34.setSourceEncodedPositionForTree((int) (short) 0);
        int int38 = node34.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node39 = node18.useSourceInfoFromForTree(node34);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node15.srcref(node39);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node39.getJSDocInfo();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node61 = node44.useSourceInfoIfMissingFrom(node59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = null;
        node44.setJSDocInfo(jSDocInfo62);
        node44.detachChildren();
        int int65 = node44.getLength();
        node44.putIntProp(1, (int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(45, node39, node44, 0, (int) ' ');
        boolean boolean72 = node44.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isDefaultCase();
        com.google.javascript.rhino.Node node22 = node14.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        java.lang.String str18 = node13.checkTreeEquals(node16);
        boolean boolean19 = node13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node13.getJSDocInfo();
        boolean boolean21 = node13.isDebugger();
        boolean boolean22 = node13.isTrue();
        com.google.javascript.rhino.Node node23 = node10.copyInformationFrom(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoIfMissingFrom(node25);
        node27.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node31 = node1.useSourceInfoIfMissingFrom(node27);
        boolean boolean32 = node27.isGetProp();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean56 = node34.hasChild(node55);
        node34.setLineno(0);
        boolean boolean59 = node34.isAssign();
        com.google.javascript.rhino.Node node60 = node27.useSourceInfoFromForTree(node34);
        boolean boolean61 = node27.isNew();
        int int63 = node27.getIntProp(35);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '#', nodeArray7, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        node26.setSourceEncodedPositionForTree((int) (short) 0);
        node26.setLineno((int) ' ');
        boolean boolean31 = node26.isCatch();
        boolean boolean32 = node26.isDebugger();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        boolean boolean52 = node34.isTypeOf();
        com.google.javascript.rhino.Node node53 = node26.copyInformationFromForTree(node34);
        node10.putProp((int) (byte) 1, (java.lang.Object) node26);
        boolean boolean55 = node10.isTrue();
        boolean boolean56 = node10.isScript();
        boolean boolean57 = node10.isCall();
        boolean boolean58 = node10.isFromExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        int int32 = node1.getLength();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        boolean boolean44 = node34.isVoid();
        boolean boolean45 = node34.isIf();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int48 = node47.getChildCount();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node54 = node53.removeChildren();
        java.lang.String str55 = node50.checkTreeEquals(node53);
        boolean boolean56 = node50.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = node50.getJSDocInfo();
        boolean boolean58 = node50.isDebugger();
        boolean boolean59 = node50.isTrue();
        com.google.javascript.rhino.Node node60 = node47.copyInformationFrom(node50);
        com.google.javascript.rhino.Node node61 = node34.clonePropsFrom(node47);
        boolean boolean62 = node47.isRegExp();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node69 = node68.removeChildren();
        java.lang.String str70 = node65.checkTreeEquals(node68);
        boolean boolean71 = node65.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = node65.getJSDocInfo();
        boolean boolean73 = node65.isDebugger();
        boolean boolean74 = node65.isTrue();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int78 = node77.getChildCount();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node81 = node80.removeChildren();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node84 = node83.removeChildren();
        java.lang.String str85 = node80.checkTreeEquals(node83);
        boolean boolean86 = node80.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = node80.getJSDocInfo();
        boolean boolean88 = node80.isDebugger();
        boolean boolean89 = node80.isTrue();
        com.google.javascript.rhino.Node node90 = node77.copyInformationFrom(node80);
        com.google.javascript.rhino.JSDocInfo jSDocInfo91 = null;
        node80.setJSDocInfo(jSDocInfo91);
        node65.putProp((int) (short) 0, (java.lang.Object) node80);
        node47.putProp(0, (java.lang.Object) node80);
        boolean boolean95 = node80.isDelProp();
        com.google.javascript.rhino.Node node96 = node1.clonePropsFrom(node80);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSDocInfo57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(jSDocInfo87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node25 = node1.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = node25.isEmpty();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        int int71 = node22.getType();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node76 = node75.cloneNode();
        boolean boolean77 = node75.isTry();
        com.google.javascript.rhino.Node node78 = node22.clonePropsFrom(node75);
        node75.setType((int) (byte) 0);
        node75.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 39 + "'", int71 == 39);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isThis();
        boolean boolean25 = node1.isName();
        int int26 = node1.getChildCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(46, (int) (byte) 100, (int) (short) 100);
        int int4 = node3.getCharno();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        java.lang.String str7 = node1.toString(true, false, false);
        java.lang.String str8 = node1.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NUMBER 1.0" + "'", str7, "NUMBER 1.0");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 1.0\n" + "'", str8, "NUMBER 1.0\n");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        int int39 = node8.getSourcePosition();
        boolean boolean40 = node8.isRegExp();
        node8.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = node8.getParent();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        node58.setSourceEncodedPositionForTree((int) (short) 0);
        node58.setLineno((int) ' ');
        boolean boolean63 = node58.isNew();
        com.google.javascript.rhino.Node node64 = node43.copyInformationFromForTree(node58);
        boolean boolean65 = node43.isAnd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        boolean boolean17 = node4.isTry();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isNot();
        boolean boolean22 = node14.isQuotedString();
        boolean boolean23 = node14.isGetterDef();
        boolean boolean24 = node14.isString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.isQualifiedName();
        boolean boolean20 = node18.isThis();
        boolean boolean21 = node18.isThrow();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node5.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        node5.addChildrenToBack(node32);
        boolean boolean34 = node5.isComma();
        boolean boolean35 = node5.isGetProp();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] { node5 };
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray36, 4, 0);
        boolean boolean41 = node39.getBooleanProp((int) 'a');
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.detachChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        double double33 = node22.getDouble();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        java.util.Set<java.lang.String> strSet41 = node35.getDirectives();
        int int42 = node22.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(39, node5, node22);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable44 = node5.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor45 = ancestorIterable44.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator46 = ancestorIterable44.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor47 = ancestorIterable44.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator48 = ancestorIterable44.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor49 = ancestorIterable44.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 40.0d + "'", double33 == 40.0d);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable44);
        org.junit.Assert.assertNotNull(nodeItor45);
        org.junit.Assert.assertNotNull(nodeSpliterator46);
        org.junit.Assert.assertNotNull(nodeItor47);
        org.junit.Assert.assertNotNull(nodeSpliterator48);
        org.junit.Assert.assertNotNull(nodeItor49);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100.0f, 38, 29);
        double double4 = node3.getDouble();
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.appendStringTree(appendable5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node4 = node3.cloneNode();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags6.clearSideEffectFlags();
        sideEffectFlags6.setAllFlags();
        boolean boolean9 = sideEffectFlags6.areAllFlagsSet();
        node4.putProp(0, (java.lang.Object) boolean9);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        int int39 = node8.getSourcePosition();
        boolean boolean40 = node8.isRegExp();
        node8.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = node8.getParent();
        boolean boolean44 = node43.isFromExterns();
        int int45 = node43.getLineno();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        boolean boolean58 = node48.isVoid();
        boolean boolean59 = node48.isIf();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int62 = node61.getChildCount();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        java.lang.String str69 = node64.checkTreeEquals(node67);
        boolean boolean70 = node64.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = node64.getJSDocInfo();
        boolean boolean72 = node64.isDebugger();
        boolean boolean73 = node64.isTrue();
        com.google.javascript.rhino.Node node74 = node61.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node75 = node48.clonePropsFrom(node61);
        boolean boolean76 = node48.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder77 = node48.getJsDocBuilderForNode();
        node43.putProp(2, (java.lang.Object) fileLevelJsDocBuilder77);
        fileLevelJsDocBuilder77.append("STRING NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSDocInfo71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder77);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isNot();
        node14.setDouble((double) 10L);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        node38.setSourceEncodedPositionForTree((int) (short) 0);
        node38.setLineno((int) ' ');
        boolean boolean43 = node38.isCatch();
        boolean boolean44 = node38.isDebugger();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int47 = node46.getChildCount();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        java.lang.String str54 = node49.checkTreeEquals(node52);
        boolean boolean55 = node49.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node49.getJSDocInfo();
        boolean boolean57 = node49.isDebugger();
        boolean boolean58 = node49.isTrue();
        com.google.javascript.rhino.Node node59 = node46.copyInformationFrom(node49);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node63 = node46.useSourceInfoIfMissingFrom(node61);
        boolean boolean64 = node46.isTypeOf();
        com.google.javascript.rhino.Node node65 = node38.copyInformationFromForTree(node46);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node71 = node70.removeChildren();
        java.lang.String str72 = node67.checkTreeEquals(node70);
        boolean boolean73 = node67.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = node67.getJSDocInfo();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        node67.setDirectives((java.util.Set<java.lang.String>) strSet78);
        node65.setDirectives((java.util.Set<java.lang.String>) strSet78);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet78);
        boolean boolean83 = node14.isIf();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable84 = node14.getAncestors();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSDocInfo74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(ancestorIterable84);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        node46.setSourceEncodedPositionForTree((int) (short) 0);
        node46.setLineno((int) ' ');
        boolean boolean51 = node46.isCatch();
        boolean boolean52 = node46.isDebugger();
        com.google.javascript.rhino.Node node53 = node21.srcrefTree(node46);
        boolean boolean54 = node21.isString();
        boolean boolean55 = node21.isQualifiedName();
        boolean boolean56 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node57 = node14.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node58 = node57.removeFirstChild();
        node57.setType(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node57.getJSDocInfo();
        boolean boolean62 = node57.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        int int17 = node4.getType();
        java.lang.String str21 = node4.toString(false, true, false);
        boolean boolean22 = node4.hasOneChild();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int27 = node26.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node26.siblings();
        node26.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] { node26 };
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) '#', nodeArray31, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        node50.setSourceEncodedPositionForTree((int) (short) 0);
        node50.setLineno((int) ' ');
        boolean boolean55 = node50.isCatch();
        boolean boolean56 = node50.isDebugger();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int59 = node58.getChildCount();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        boolean boolean69 = node61.isDebugger();
        boolean boolean70 = node61.isTrue();
        com.google.javascript.rhino.Node node71 = node58.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        com.google.javascript.rhino.Node node75 = node58.useSourceInfoIfMissingFrom(node73);
        boolean boolean76 = node58.isTypeOf();
        com.google.javascript.rhino.Node node77 = node50.copyInformationFromForTree(node58);
        node34.putProp((int) (byte) 1, (java.lang.Object) node50);
        boolean boolean79 = node34.isTrue();
        boolean boolean80 = node34.isGetterDef();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(12, node34);
        int int82 = node4.getIndexOfChild(node81);
        boolean boolean83 = node4.isDebugger();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 39 + "'", int17 == 39);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER 40.0" + "'", str21, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node15.isComma();
        node15.putIntProp(37, 36);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(0, node15);
        com.google.javascript.rhino.Node node22 = node20.getAncestor(47);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int25 = node24.getChildCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node37 = node24.copyInformationFrom(node27);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        node27.setStaticSourceFile(staticSourceFile38);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        node27.addChildrenToBack(node54);
        boolean boolean56 = node27.isComma();
        node27.setCharno((int) (short) 1);
        com.google.javascript.rhino.Node node59 = node27.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node20.removeChild(node59);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        node1.detachChildren();
        java.lang.Class<?> wildcardClass24 = node1.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.detachChildren();
        int int17 = node4.getLength();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node20.siblings();
        node20.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node27.siblings();
        node27.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] { node27 };
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) '#', nodeArray32, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        boolean boolean47 = node41.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node41.getJSDocInfo();
        boolean boolean49 = node41.isDebugger();
        boolean boolean50 = node41.isTrue();
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node41);
        node51.setSourceEncodedPositionForTree((int) (short) 0);
        node51.setLineno((int) ' ');
        boolean boolean56 = node51.isCatch();
        boolean boolean57 = node51.isDebugger();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int60 = node59.getChildCount();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        java.lang.String str67 = node62.checkTreeEquals(node65);
        boolean boolean68 = node62.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node62.getJSDocInfo();
        boolean boolean70 = node62.isDebugger();
        boolean boolean71 = node62.isTrue();
        com.google.javascript.rhino.Node node72 = node59.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        com.google.javascript.rhino.Node node76 = node59.useSourceInfoIfMissingFrom(node74);
        boolean boolean77 = node59.isTypeOf();
        com.google.javascript.rhino.Node node78 = node51.copyInformationFromForTree(node59);
        node35.putProp((int) (byte) 1, (java.lang.Object) node51);
        boolean boolean80 = node35.isTrue();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(42, node20, node35);
        com.google.javascript.rhino.Node node82 = node4.useSourceInfoFromForTree(node35);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node83 = node4.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(40, node2, 100, 100);
        boolean boolean6 = node5.isComma();
        node5.setCharno(35);
        node5.setSourceEncodedPosition(0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        node14.putIntProp(37, 36);
        node14.setDouble(10.0d);
        boolean boolean21 = node14.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node4.siblings();
        boolean boolean40 = node4.isOptionalArg();
        boolean boolean41 = node4.isSwitch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isDebugger();
        boolean boolean12 = node3.isTrue();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node18.setJSDocInfo(jSDocInfo29);
        node3.putProp((int) (short) 0, (java.lang.Object) node18);
        com.google.javascript.rhino.Node node32 = node1.copyInformationFrom(node3);
        int int33 = node32.getType();
        com.google.javascript.rhino.Node node34 = node32.getParent();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(47, "NUMBER 40.0", 53, 48);
        boolean boolean5 = node4.isFalse();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isCall();
        node2.removeProp(30);
        int int16 = node2.getLength();
        com.google.javascript.rhino.Node node17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(12, node2, node17, 54, 29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        boolean boolean33 = node23.isVoid();
        boolean boolean34 = node23.isIf();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node50 = node23.clonePropsFrom(node36);
        boolean boolean51 = node36.isRegExp();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int67 = node66.getChildCount();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node70 = node69.removeChildren();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        java.lang.String str74 = node69.checkTreeEquals(node72);
        boolean boolean75 = node69.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = node69.getJSDocInfo();
        boolean boolean77 = node69.isDebugger();
        boolean boolean78 = node69.isTrue();
        com.google.javascript.rhino.Node node79 = node66.copyInformationFrom(node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = null;
        node69.setJSDocInfo(jSDocInfo80);
        node54.putProp((int) (short) 0, (java.lang.Object) node69);
        node36.putProp(0, (java.lang.Object) node69);
        boolean boolean84 = node18.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node node85 = node18.cloneNode();
        boolean boolean86 = node18.isNot();
        boolean boolean87 = node18.isLabel();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((-1));
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isCatch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        com.google.javascript.rhino.Node node27 = node14.useSourceInfoIfMissingFrom(node21);
        boolean boolean28 = node14.isFunction();
        boolean boolean29 = node14.isParamList();
        boolean boolean30 = node14.isGetterDef();
        boolean boolean31 = node14.isIn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        boolean boolean28 = node2.isOnlyModifiesThisCall();
        boolean boolean29 = node2.isDec();
        com.google.javascript.rhino.Node node30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = node2.checkTreeEquals(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        java.lang.String str18 = node13.checkTreeEquals(node16);
        boolean boolean19 = node13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node13.getJSDocInfo();
        boolean boolean21 = node13.isDebugger();
        boolean boolean22 = node13.isTrue();
        com.google.javascript.rhino.Node node23 = node10.copyInformationFrom(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoIfMissingFrom(node25);
        node27.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node31 = node1.useSourceInfoIfMissingFrom(node27);
        boolean boolean32 = node1.isHook();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 40.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.detachChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        double double33 = node22.getDouble();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        java.util.Set<java.lang.String> strSet41 = node35.getDirectives();
        int int42 = node22.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(39, node5, node22);
        int int44 = node43.getType();
        boolean boolean45 = node43.isInstanceOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 40.0d + "'", double33 == 40.0d);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 39 + "'", int44 == 39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        boolean boolean30 = node15.isRegExp();
        java.lang.String str31 = node15.toString();
        com.google.javascript.rhino.InputId inputId32 = null;
        node15.setInputId(inputId32);
        node15.setSourceFileForTesting("NUMBER 1.0\n");
        com.google.javascript.rhino.Node node36 = node15.getNext();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(44, node15, (int) (short) 0, 49);
        node15.setType(37);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 40.0" + "'", str31, "NUMBER 40.0");
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoIfMissingFrom(node36);
        node38.putBooleanProp(31, true);
        boolean boolean42 = node38.isBreak();
        boolean boolean43 = node38.isOptionalArg();
        com.google.javascript.rhino.Node node44 = node18.useSourceInfoFromForTree(node38);
        boolean boolean45 = node44.isName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        boolean boolean20 = node4.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node4.siblings();
        int int22 = node4.getChildCount();
        boolean boolean23 = node4.isBlock();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node42.setJSDocInfo(jSDocInfo53);
        node27.putProp((int) (short) 0, (java.lang.Object) node42);
        com.google.javascript.rhino.Node node56 = node25.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int59 = node58.getChildCount();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        boolean boolean69 = node61.isDebugger();
        boolean boolean70 = node61.isTrue();
        com.google.javascript.rhino.Node node71 = node58.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        com.google.javascript.rhino.Node node75 = node58.useSourceInfoIfMissingFrom(node73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = null;
        node58.setJSDocInfo(jSDocInfo76);
        node58.detachChildren();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean81 = node80.isGetProp();
        boolean boolean82 = node80.isUnscopedQualifiedName();
        boolean boolean83 = node80.isAssignAdd();
        com.google.javascript.rhino.Node node84 = node58.copyInformationFrom(node80);
        com.google.javascript.rhino.Node node85 = node25.srcref(node80);
        com.google.javascript.rhino.Node node86 = node4.copyInformationFrom(node25);
        java.lang.String str87 = node86.getQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = node2.getCharno();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        node15.setSourceEncodedPositionForTree((int) (short) 0);
        node15.setLineno((int) ' ');
        boolean boolean20 = node15.isCatch();
        boolean boolean21 = node15.isDebugger();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoIfMissingFrom(node38);
        boolean boolean41 = node23.isTypeOf();
        com.google.javascript.rhino.Node node42 = node15.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] { node15 };
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(47, nodeArray43, 39, (int) (byte) 1);
        boolean boolean47 = node46.isGetElem();
        boolean boolean48 = node46.isBlock();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        node15.setSourceEncodedPositionForTree((int) (short) 0);
        node15.setLineno((int) ' ');
        boolean boolean20 = node15.isAnd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        node50.setSourceEncodedPositionForTree((int) (short) 0);
        node50.setLineno((int) ' ');
        boolean boolean55 = node50.isCatch();
        boolean boolean56 = node50.isDebugger();
        com.google.javascript.rhino.Node node57 = node25.srcrefTree(node50);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        java.lang.String str64 = node59.checkTreeEquals(node62);
        boolean boolean65 = node59.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = node59.getJSDocInfo();
        boolean boolean67 = node59.isDebugger();
        boolean boolean68 = node59.isTrue();
        boolean boolean69 = node59.isFromExterns();
        boolean boolean70 = node59.isOptionalArg();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(10, node15, node57, node59, 15, 4095);
        boolean boolean74 = node73.isCatch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(44);
        boolean boolean2 = node1.isNumber();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(35);
        node1.removeProp(0);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        java.lang.String str38 = node8.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable39 = node8.getAncestors();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 40.0\n" + "'", str38, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(ancestorIterable39);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        java.util.Set<java.lang.String> strSet23 = node17.getDirectives();
        int int24 = node4.getIndexOfChild(node17);
        boolean boolean25 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node42.setJSDocInfo(jSDocInfo53);
        node27.putProp((int) (short) 0, (java.lang.Object) node42);
        boolean boolean56 = node27.isIf();
        int int58 = node27.getIntProp((int) (byte) 100);
        int int59 = node27.getSideEffectFlags();
        boolean boolean60 = node27.isAssignAdd();
        com.google.javascript.rhino.Node node61 = node4.copyInformationFrom(node27);
        boolean boolean62 = node4.isTypeOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node24.isNot();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        boolean boolean28 = node2.isOnlyModifiesThisCall();
        com.google.javascript.rhino.InputId inputId29 = null;
        node2.setInputId(inputId29);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node49 = node32.useSourceInfoIfMissingFrom(node47);
        node49.putBooleanProp(31, true);
        boolean boolean53 = node49.isBreak();
        boolean boolean54 = node49.isOptionalArg();
        com.google.javascript.rhino.Node node55 = node2.copyInformationFrom(node49);
        int int56 = node2.getSourcePosition();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isVoid();
        boolean boolean16 = node4.isUnscopedQualifiedName();
        boolean boolean17 = node4.isAdd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        node4.setStaticSourceFile(staticSourceFile18);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        boolean boolean26 = node25.isCatch();
        boolean boolean27 = node25.isScript();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoIfMissingFrom(node36);
        node38.putBooleanProp(31, true);
        boolean boolean42 = node38.isBreak();
        boolean boolean43 = node38.isOptionalArg();
        com.google.javascript.rhino.Node node44 = node18.useSourceInfoFromForTree(node38);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        node18.setStaticSourceFile(staticSourceFile45);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        boolean boolean4 = node3.isDebugger();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean8 = node7.isTrue();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 0, node7);
        node9.setCharno((int) (byte) -1);
        boolean boolean12 = node3.isEquivalentToTyped(node9);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node36 = node19.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = null;
        node19.setJSDocInfo(jSDocInfo37);
        node19.detachChildren();
        int int40 = node19.getLength();
        boolean boolean41 = node19.isTry();
        boolean boolean42 = node19.isThis();
        boolean boolean43 = node19.isFalse();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int61 = node60.getChildCount();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        java.lang.String str68 = node63.checkTreeEquals(node66);
        boolean boolean69 = node63.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = node63.getJSDocInfo();
        boolean boolean71 = node63.isDebugger();
        boolean boolean72 = node63.isTrue();
        com.google.javascript.rhino.Node node73 = node60.copyInformationFrom(node63);
        node73.setSourceEncodedPositionForTree((int) (short) 0);
        node73.setLineno((int) ' ');
        boolean boolean78 = node73.isCatch();
        boolean boolean79 = node73.isDebugger();
        com.google.javascript.rhino.Node node80 = node48.srcrefTree(node73);
        com.google.javascript.rhino.Node node81 = node19.useSourceInfoFrom(node80);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node82 = node4.removeChildAfter(node81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 40.0", 36, (int) (short) 100);
        int int4 = node3.getCharno();
        node3.setIsSyntheticBlock(true);
        node3.setString("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 40.0\n    NUMBER 40.0\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 40.0\n    NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isAnd();
        boolean boolean20 = node14.isHook();
        boolean boolean21 = node14.isOr();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable22 = node14.getAncestors();
        com.google.javascript.rhino.Node node23 = node14.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(ancestorIterable22);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = node4.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        com.google.javascript.rhino.Node node24 = node22.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass25 = node24.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node2.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node39 = node2.cloneNode();
        boolean boolean40 = node39.isAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node1.isQuotedString();
        boolean boolean20 = node1.isAdd();
        java.lang.Object obj22 = node1.getProp((int) '#');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(159748);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isCall();
        node1.removeProp(30);
        int int15 = node1.getLength();
        boolean boolean16 = node1.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        boolean boolean22 = node18.isBreak();
        boolean boolean23 = node18.isCall();
        boolean boolean24 = node18.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        node1.setSourceFileForTesting("");
        int int7 = node1.getIntProp(53);
        boolean boolean8 = node1.isSyntheticBlock();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node1.getAncestors();
        boolean boolean10 = node1.isScript();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        java.lang.String str18 = node13.checkTreeEquals(node16);
        boolean boolean19 = node13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node13.getJSDocInfo();
        boolean boolean21 = node13.isDebugger();
        boolean boolean22 = node13.isTrue();
        com.google.javascript.rhino.Node node23 = node10.copyInformationFrom(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoIfMissingFrom(node25);
        node27.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node31 = node1.useSourceInfoIfMissingFrom(node27);
        boolean boolean32 = node27.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING ", 1, 8);
        java.util.Set<java.lang.String> strSet4 = node3.getDirectives();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean7 = node6.isGetProp();
        boolean boolean8 = node6.isUnscopedQualifiedName();
        boolean boolean9 = node6.isAssignAdd();
        java.lang.String str10 = node6.toString();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int13 = node12.getChildCount();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node16 = node15.removeChildren();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        java.lang.String str20 = node15.checkTreeEquals(node18);
        boolean boolean21 = node15.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = node15.getJSDocInfo();
        boolean boolean23 = node15.isDebugger();
        boolean boolean24 = node15.isTrue();
        com.google.javascript.rhino.Node node25 = node12.copyInformationFrom(node15);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node29 = node12.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node30 = node6.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        java.lang.String str38 = node33.checkTreeEquals(node36);
        boolean boolean39 = node33.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node33.getJSDocInfo();
        boolean boolean41 = node33.isDebugger();
        boolean boolean42 = node33.isTrue();
        boolean boolean43 = node33.isVoid();
        boolean boolean44 = node33.isCall();
        int int45 = node33.getSourcePosition();
        boolean boolean46 = node33.isAnd();
        com.google.javascript.rhino.Node node47 = node31.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int50 = node49.getChildCount();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        java.lang.String str57 = node52.checkTreeEquals(node55);
        boolean boolean58 = node52.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = node52.getJSDocInfo();
        boolean boolean60 = node52.isDebugger();
        boolean boolean61 = node52.isTrue();
        com.google.javascript.rhino.Node node62 = node49.copyInformationFrom(node52);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        com.google.javascript.rhino.Node node66 = node49.useSourceInfoIfMissingFrom(node64);
        node66.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(40, node72, 100, 100);
        boolean boolean76 = node66.isEquivalentToTyped(node72);
        boolean boolean77 = node66.isCatch();
        boolean boolean78 = node66.isNumber();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildBefore(node33, node66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 40.0" + "'", str10, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSDocInfo59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.isName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node18.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        boolean boolean47 = node41.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node41.getJSDocInfo();
        boolean boolean49 = node41.isDebugger();
        boolean boolean50 = node41.isTrue();
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node41);
        node51.setSourceEncodedPositionForTree((int) (short) 0);
        node51.setLineno((int) ' ');
        boolean boolean56 = node51.isCatch();
        boolean boolean57 = node51.isDebugger();
        com.google.javascript.rhino.Node node58 = node26.srcrefTree(node51);
        boolean boolean59 = node26.isString();
        boolean boolean60 = node26.isQualifiedName();
        boolean boolean61 = node26.isQualifiedName();
        boolean boolean62 = node26.isScript();
        com.google.javascript.rhino.Node node63 = node26.getLastSibling();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("NUMBER 40.0", 36, (int) (short) 100);
        int int68 = node67.getSourceOffset();
        boolean boolean69 = node67.isIn();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) -1, node63, node67);
        boolean boolean71 = node67.isParamList();
        com.google.javascript.rhino.Node node72 = node18.useSourceInfoFromForTree(node67);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        java.lang.String str17 = node4.getSourceFileName();
        boolean boolean18 = node4.isEmpty();
        node4.setLineno((int) (byte) -1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        node4.setVarArgs(false);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        double double55 = node44.getDouble();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int58 = node57.getChildCount();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        boolean boolean68 = node60.isDebugger();
        boolean boolean69 = node60.isTrue();
        com.google.javascript.rhino.Node node70 = node57.copyInformationFrom(node60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        node60.setJSDocInfo(jSDocInfo71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 0, node38, node44, node60);
        java.lang.String str74 = node44.toStringTree();
        com.google.javascript.rhino.Node node75 = node4.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean76 = node44.isString();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("hi!", (int) '#', (-1));
        boolean boolean81 = node80.isNot();
        node44.addChildToFront(node80);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 40.0d + "'", double55 == 40.0d);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER 40.0\n" + "'", str74, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        boolean boolean18 = node7.isNE();
        node7.detachChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        double double35 = node24.getDouble();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        java.util.Set<java.lang.String> strSet43 = node37.getDirectives();
        int int44 = node24.getIndexOfChild(node37);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(39, node7, node24);
        int int46 = node45.getType();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int49 = node48.getChildCount();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        java.lang.String str56 = node51.checkTreeEquals(node54);
        boolean boolean57 = node51.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = node51.getJSDocInfo();
        boolean boolean59 = node51.isDebugger();
        boolean boolean60 = node51.isTrue();
        com.google.javascript.rhino.Node node61 = node48.copyInformationFrom(node51);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node65 = node48.useSourceInfoIfMissingFrom(node63);
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = null;
        node48.setJSDocInfo(jSDocInfo66);
        node48.detachChildren();
        int int69 = node48.getLength();
        boolean boolean70 = node48.isTry();
        boolean boolean71 = node48.isContinue();
        com.google.javascript.rhino.Node node72 = node48.getLastChild();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(40, "STRING NUMBER 40.0\n", 4, 52);
        node48.addChildToFront(node77);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(50, node45, node48);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(49, node45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 40.0d + "'", double35 == 40.0d);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 39 + "'", int46 == 39);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSDocInfo58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node77);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node1.getJsDocBuilderForNode();
        boolean boolean31 = node1.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node1.getJSDocInfo();
        boolean boolean33 = node1.isHook();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        int int71 = node22.getType();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node76 = node75.cloneNode();
        boolean boolean77 = node75.isTry();
        com.google.javascript.rhino.Node node78 = node22.clonePropsFrom(node75);
        java.lang.Appendable appendable79 = null;
        // The following exception was thrown during execution in test generation
        try {
            node22.appendStringTree(appendable79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 39 + "'", int71 == 39);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(29, "Node tree inequality:\nTree1:\nNULL\n\n\nTree2:\nSTRING STRING  10\n\n\nSubtree1: NULL\n\n\nSubtree2: STRING STRING  10\n");
        boolean boolean3 = node2.isScript();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        com.google.javascript.rhino.jstype.JSType jSType29 = node14.getJSType();
        boolean boolean30 = node14.isVar();
        com.google.javascript.rhino.Node node31 = node14.getLastSibling();
        boolean boolean32 = node14.isTry();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node14.setStaticSourceFile(staticSourceFile33);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        boolean boolean20 = node4.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node4.siblings();
        int int22 = node4.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        boolean boolean34 = node24.isVoid();
        boolean boolean35 = node24.isIf();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node51 = node24.clonePropsFrom(node37);
        com.google.javascript.rhino.jstype.JSType jSType52 = node37.getJSType();
        boolean boolean53 = node37.isVar();
        java.lang.String str57 = node37.toString(false, false, false);
        boolean boolean58 = node37.isDelProp();
        boolean boolean59 = node4.isEquivalentTo(node37);
        com.google.javascript.rhino.Node node60 = node37.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER 40.0" + "'", str57, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(node60);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isOptionalArg();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        java.lang.String str19 = node14.checkTreeEquals(node17);
        boolean boolean20 = node14.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node14.getJSDocInfo();
        boolean boolean22 = node14.isDebugger();
        boolean boolean23 = node14.isTrue();
        boolean boolean24 = node14.isInstanceOf();
        int int25 = node14.getType();
        boolean boolean26 = node14.isAssignAdd();
        int int27 = node1.getIndexOfChild(node14);
        node1.setOptionalArg(true);
        java.util.Set<java.lang.String> strSet30 = node1.getDirectives();
        boolean boolean31 = node1.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 39 + "'", int25 == 39);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node1.getAncestors();
        java.lang.String str19 = node1.toString(false, true, true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER 40.0" + "'", str19, "NUMBER 40.0");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 40.0", 36, (int) (short) 100);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int18 = node17.getChildCount();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        com.google.javascript.rhino.Node node30 = node17.copyInformationFrom(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = null;
        node20.setJSDocInfo(jSDocInfo31);
        node5.putProp((int) (short) 0, (java.lang.Object) node20);
        boolean boolean34 = node5.isIf();
        int int36 = node5.getIntProp((int) (byte) 100);
        boolean boolean37 = node5.isSyntheticBlock();
        boolean boolean38 = node3.isEquivalentToTyped(node5);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(36);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        node1.detachChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = null;
        node25.setJSDocInfo(jSDocInfo43);
        node25.detachChildren();
        int int46 = node25.getLength();
        boolean boolean47 = node25.isTry();
        boolean boolean48 = node25.isContinue();
        com.google.javascript.rhino.Node node49 = node25.getLastChild();
        int int50 = node25.getSourcePosition();
        com.google.javascript.rhino.Node node51 = node1.useSourceInfoFromForTree(node25);
        java.lang.String str52 = node25.getQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.isSwitch();
        boolean boolean20 = node18.isArrayLit();
        com.google.javascript.rhino.InputId inputId21 = node18.getInputId();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoIfMissingFrom(node38);
        node40.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(40, node46, 100, 100);
        boolean boolean50 = node40.isEquivalentToTyped(node46);
        boolean boolean51 = node46.isWhile();
        boolean boolean52 = node18.isEquivalentTo(node46);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node18.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(staticSourceFile53);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "STRING ");
        int int4 = node2.getIntProp(12);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node23 = node6.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = null;
        node6.setJSDocInfo(jSDocInfo24);
        node6.detachChildren();
        int int27 = node2.getIndexOfChild(node6);
        node6.detachChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        boolean boolean33 = node23.isVoid();
        boolean boolean34 = node23.isIf();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node50 = node23.clonePropsFrom(node36);
        boolean boolean51 = node36.isRegExp();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int67 = node66.getChildCount();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node70 = node69.removeChildren();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        java.lang.String str74 = node69.checkTreeEquals(node72);
        boolean boolean75 = node69.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = node69.getJSDocInfo();
        boolean boolean77 = node69.isDebugger();
        boolean boolean78 = node69.isTrue();
        com.google.javascript.rhino.Node node79 = node66.copyInformationFrom(node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = null;
        node69.setJSDocInfo(jSDocInfo80);
        node54.putProp((int) (short) 0, (java.lang.Object) node69);
        node36.putProp(0, (java.lang.Object) node69);
        boolean boolean84 = node18.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node node85 = node18.cloneNode();
        boolean boolean86 = node18.isNew();
        int int87 = node18.getLength();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node30 = node14.getLastSibling();
        boolean boolean31 = node14.isQuotedString();
        boolean boolean32 = node14.isCall();
        com.google.javascript.rhino.InputId inputId33 = null;
        node14.setInputId(inputId33);
        com.google.javascript.rhino.InputId inputId35 = node14.getInputId();
        int int36 = node14.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        java.lang.String str17 = node14.getSourceFileName();
        com.google.javascript.rhino.Node node18 = node14.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        node17.setSourceEncodedPositionForTree((int) (short) 0);
        int int21 = node17.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFromForTree(node17);
        boolean boolean23 = node1.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        node17.setSourceEncodedPositionForTree((int) (short) 0);
        int int21 = node17.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFromForTree(node17);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        node38.setSourceEncodedPositionForTree((int) (short) 0);
        int int42 = node38.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node38.setStaticSourceFile(staticSourceFile43);
        int int45 = node38.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType46 = node38.getJSType();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int49 = node48.getChildCount();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        java.lang.String str56 = node51.checkTreeEquals(node54);
        boolean boolean57 = node51.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = node51.getJSDocInfo();
        boolean boolean59 = node51.isDebugger();
        boolean boolean60 = node51.isTrue();
        com.google.javascript.rhino.Node node61 = node48.copyInformationFrom(node51);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node65 = node48.useSourceInfoIfMissingFrom(node63);
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = null;
        node48.setJSDocInfo(jSDocInfo66);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean70 = node48.hasChild(node69);
        boolean boolean71 = node48.isObjectLit();
        boolean boolean72 = node48.isDefaultCase();
        boolean boolean73 = node48.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            node22.replaceChild(node38, node48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSDocInfo58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        int int32 = node1.getIntProp((int) (byte) 100);
        node1.setType(54);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        boolean boolean38 = node36.isThrow();
        boolean boolean39 = node1.isEquivalentToTyped(node36);
        boolean boolean40 = node1.isString();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int43 = node42.getChildCount();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        java.lang.String str50 = node45.checkTreeEquals(node48);
        boolean boolean51 = node45.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = node45.getJSDocInfo();
        boolean boolean53 = node45.isDebugger();
        boolean boolean54 = node45.isTrue();
        com.google.javascript.rhino.Node node55 = node42.copyInformationFrom(node45);
        double double56 = node45.getDouble();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        java.util.Set<java.lang.String> strSet64 = node58.getDirectives();
        int int65 = node45.getIndexOfChild(node58);
        int int66 = node58.getSourcePosition();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int69 = node68.getChildCount();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node72 = node71.removeChildren();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        java.lang.String str76 = node71.checkTreeEquals(node74);
        boolean boolean77 = node71.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = node71.getJSDocInfo();
        boolean boolean79 = node71.isDebugger();
        boolean boolean80 = node71.isTrue();
        com.google.javascript.rhino.Node node81 = node68.copyInformationFrom(node71);
        boolean boolean82 = node71.isNE();
        node71.detachChildren();
        int int84 = node71.getLength();
        node71.setWasEmptyNode(true);
        node58.addChildrenToFront(node71);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node88 = node1.getChildBefore(node71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 40.0d + "'", double56 == 40.0d);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSDocInfo78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isDebugger();
        boolean boolean12 = node3.isTrue();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node18.setJSDocInfo(jSDocInfo29);
        node3.putProp((int) (short) 0, (java.lang.Object) node18);
        com.google.javascript.rhino.Node node32 = node1.copyInformationFrom(node3);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean57 = node56.isGetProp();
        boolean boolean58 = node56.isUnscopedQualifiedName();
        boolean boolean59 = node56.isAssignAdd();
        com.google.javascript.rhino.Node node60 = node34.copyInformationFrom(node56);
        com.google.javascript.rhino.Node node61 = node1.srcref(node56);
        boolean boolean62 = node1.isIn();
        boolean boolean63 = node1.isExprResult();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node1.isQuotedString();
        boolean boolean20 = node1.isNull();
        node1.setCharno(32);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        boolean boolean30 = node15.isRegExp();
        boolean boolean31 = node15.isQualifiedName();
        boolean boolean32 = node15.isFor();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(0, node15);
        node15.putBooleanProp(12, true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node15.getJSDocInfo();
        com.google.javascript.rhino.Node node38 = node15.removeChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        boolean boolean32 = node22.isInstanceOf();
        int int33 = node22.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node35.setJSDocInfo(jSDocInfo53);
        node35.detachChildren();
        node22.addChildToBack(node35);
        node22.setDouble(0.0d);
        node5.addChildToFront(node22);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        boolean boolean69 = node61.isDebugger();
        boolean boolean70 = node61.isTrue();
        boolean boolean71 = node61.isVoid();
        boolean boolean72 = node61.isIf();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int75 = node74.getChildCount();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node78 = node77.removeChildren();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node81 = node80.removeChildren();
        java.lang.String str82 = node77.checkTreeEquals(node80);
        boolean boolean83 = node77.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = node77.getJSDocInfo();
        boolean boolean85 = node77.isDebugger();
        boolean boolean86 = node77.isTrue();
        com.google.javascript.rhino.Node node87 = node74.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node88 = node61.clonePropsFrom(node74);
        boolean boolean89 = node61.isRegExp();
        com.google.javascript.rhino.Node node90 = node5.srcrefTree(node61);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable91 = node5.children();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSDocInfo84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(nodeIterable91);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int18 = node17.getChildCount();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        com.google.javascript.rhino.Node node30 = node17.copyInformationFrom(node20);
        node30.setSourceEncodedPositionForTree((int) (short) 0);
        node30.setLineno((int) ' ');
        boolean boolean35 = node30.isCatch();
        boolean boolean36 = node30.isDebugger();
        com.google.javascript.rhino.Node node37 = node5.srcrefTree(node30);
        boolean boolean38 = node5.isString();
        boolean boolean39 = node5.isQualifiedName();
        boolean boolean40 = node5.isQualifiedName();
        boolean boolean41 = node5.isScript();
        com.google.javascript.rhino.Node node42 = node5.getLastSibling();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("NUMBER 40.0", 36, (int) (short) 100);
        int int47 = node46.getSourceOffset();
        boolean boolean48 = node46.isIn();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, node46);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node50 = node49.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        java.util.Set<java.lang.String> strSet23 = node17.getDirectives();
        int int24 = node4.getIndexOfChild(node17);
        boolean boolean25 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        java.lang.String str35 = node30.checkTreeEquals(node33);
        boolean boolean36 = node30.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node30.getJSDocInfo();
        boolean boolean38 = node30.isDebugger();
        boolean boolean39 = node30.isTrue();
        com.google.javascript.rhino.Node node40 = node27.copyInformationFrom(node30);
        boolean boolean41 = node30.isHook();
        boolean boolean42 = node30.isRegExp();
        boolean boolean43 = node30.isUnscopedQualifiedName();
        boolean boolean44 = node30.isNumber();
        com.google.javascript.rhino.Node node45 = node4.srcref(node30);
        java.lang.String str46 = node30.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER 40.0\n" + "'", str46, "NUMBER 40.0\n");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        node1.setJSType(jSType3);
        boolean boolean5 = node1.isNot();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int9 = node8.getChildCount();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        java.lang.String str16 = node11.checkTreeEquals(node14);
        boolean boolean17 = node11.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node11.getJSDocInfo();
        boolean boolean19 = node11.isDebugger();
        boolean boolean20 = node11.isTrue();
        com.google.javascript.rhino.Node node21 = node8.copyInformationFrom(node11);
        boolean boolean22 = node11.isVoid();
        com.google.javascript.rhino.Node node23 = node11.getParent();
        node4.addChildToFront(node11);
        boolean boolean25 = node4.isSetterDef();
        boolean boolean26 = node4.isContinue();
        com.google.javascript.rhino.Node node27 = node4.getLastChild();
        boolean boolean28 = node4.isWhile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node4.siblings();
        boolean boolean40 = node4.isOptionalArg();
        boolean boolean41 = node4.isIn();
        boolean boolean42 = node4.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        java.util.Set<java.lang.String> strSet23 = node17.getDirectives();
        int int24 = node4.getIndexOfChild(node17);
        int int25 = node17.getSourcePosition();
        boolean boolean26 = node17.isDo();
        boolean boolean27 = node17.isSetterDef();
        boolean boolean28 = node17.hasChildren();
        boolean boolean29 = node17.isContinue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.setSourceEncodedPosition((int) (short) -1);
        boolean boolean18 = node4.isThrow();
        java.util.Set<java.lang.String> strSet19 = node4.getDirectives();
        boolean boolean20 = node4.isDo();
        boolean boolean21 = node4.isVar();
        boolean boolean22 = node4.isOr();
        boolean boolean23 = node4.isTry();
        boolean boolean24 = node4.isVar();
        boolean boolean25 = node4.isDo();
        boolean boolean26 = node4.isCatch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node25 = node1.getLastChild();
        int int26 = node1.getSourcePosition();
        node1.removeProp(38);
        boolean boolean29 = node1.isQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        java.util.Set<java.lang.String> strSet23 = node17.getDirectives();
        int int24 = node4.getIndexOfChild(node17);
        int int25 = node17.getSourcePosition();
        boolean boolean26 = node17.isLabel();
        boolean boolean27 = node17.isNumber();
        boolean boolean28 = node17.isCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.detachChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        double double33 = node22.getDouble();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        java.util.Set<java.lang.String> strSet41 = node35.getDirectives();
        int int42 = node22.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(39, node5, node22);
        boolean boolean44 = node43.isFor();
        node43.setSourceEncodedPositionForTree(41);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 40.0d + "'", double33 == 40.0d);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        boolean boolean20 = node4.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node4.siblings();
        int int22 = node4.getChildCount();
        boolean boolean23 = node4.isBlock();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node42.setJSDocInfo(jSDocInfo53);
        node27.putProp((int) (short) 0, (java.lang.Object) node42);
        com.google.javascript.rhino.Node node56 = node25.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int59 = node58.getChildCount();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        boolean boolean69 = node61.isDebugger();
        boolean boolean70 = node61.isTrue();
        com.google.javascript.rhino.Node node71 = node58.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        com.google.javascript.rhino.Node node75 = node58.useSourceInfoIfMissingFrom(node73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = null;
        node58.setJSDocInfo(jSDocInfo76);
        node58.detachChildren();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean81 = node80.isGetProp();
        boolean boolean82 = node80.isUnscopedQualifiedName();
        boolean boolean83 = node80.isAssignAdd();
        com.google.javascript.rhino.Node node84 = node58.copyInformationFrom(node80);
        com.google.javascript.rhino.Node node85 = node25.srcref(node80);
        com.google.javascript.rhino.Node node86 = node4.copyInformationFrom(node25);
        boolean boolean87 = node86.isObjectLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node4.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor16 = ancestorIterable15.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(nodeItor16);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node4.getAncestors();
        boolean boolean16 = node4.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int10 = node9.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node9.siblings();
        node9.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] { node9 };
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) '#', nodeArray14, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node33.setSourceEncodedPositionForTree((int) (short) 0);
        node33.setLineno((int) ' ');
        boolean boolean38 = node33.isCatch();
        boolean boolean39 = node33.isDebugger();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node57 = node56.removeChildren();
        com.google.javascript.rhino.Node node58 = node41.useSourceInfoIfMissingFrom(node56);
        boolean boolean59 = node41.isTypeOf();
        com.google.javascript.rhino.Node node60 = node33.copyInformationFromForTree(node41);
        node17.putProp((int) (byte) 1, (java.lang.Object) node33);
        boolean boolean62 = node17.isTrue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(42, node2, node17);
        boolean boolean64 = node2.isSetterDef();
        boolean boolean65 = node2.isReturn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        int int39 = node8.getSourcePosition();
        boolean boolean40 = node8.isRegExp();
        node8.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = node8.getParent();
        boolean boolean44 = node43.isFromExterns();
        int int45 = node43.getLineno();
        java.lang.String str46 = node43.getQualifiedName();
        boolean boolean47 = node43.hasOneChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.setSourceEncodedPosition((int) (short) -1);
        boolean boolean18 = node4.isThrow();
        java.util.Set<java.lang.String> strSet19 = node4.getDirectives();
        boolean boolean20 = node4.isDo();
        boolean boolean21 = node4.isVar();
        boolean boolean22 = node4.isOr();
        boolean boolean23 = node4.isFromExterns();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = node4.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 40.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node1.getAncestors();
        boolean boolean14 = node1.isBlock();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags15 = new com.google.javascript.rhino.Node.SideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(sideEffectFlags15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        node1.setSourceFileForTesting("");
        int int7 = node1.getIntProp(53);
        boolean boolean8 = node1.isSyntheticBlock();
        boolean boolean9 = node1.isWith();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        node1.setStaticSourceFile(staticSourceFile10);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        boolean boolean26 = node1.isIf();
        int int28 = node1.getIntProp(0);
        node1.setOptionalArg(false);
        node1.setSourceFileForTesting("NUMBER 40.0");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean25 = node24.isGetProp();
        boolean boolean26 = node24.isUnscopedQualifiedName();
        boolean boolean27 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node28 = node2.copyInformationFrom(node24);
        node24.addSuppression("NUMBER 40.0\n");
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] { node24 };
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(39, nodeArray31, 37, 51);
        boolean boolean35 = node34.isFalse();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node2, 15, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            node6.setDouble((double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        java.util.Set<java.lang.String> strSet9 = node3.getDirectives();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int12 = node11.getChildCount();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        java.lang.String str19 = node14.checkTreeEquals(node17);
        boolean boolean20 = node14.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node14.getJSDocInfo();
        boolean boolean22 = node14.isDebugger();
        boolean boolean23 = node14.isTrue();
        com.google.javascript.rhino.Node node24 = node11.copyInformationFrom(node14);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node28 = node11.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node11.setJSDocInfo(jSDocInfo29);
        node11.detachChildren();
        int int32 = node11.getLength();
        boolean boolean33 = node11.isTry();
        boolean boolean34 = node11.isContinue();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node11.addChildToFront(node36);
        boolean boolean38 = node11.isAnd();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node40.siblings();
        node40.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        java.lang.String str51 = node46.checkTreeEquals(node49);
        boolean boolean52 = node46.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = node46.getJSDocInfo();
        boolean boolean54 = node46.isDebugger();
        boolean boolean55 = node46.isTrue();
        boolean boolean56 = node46.isFromExterns();
        boolean boolean57 = node46.isOptionalArg();
        com.google.javascript.rhino.Node node58 = node40.copyInformationFrom(node46);
        boolean boolean59 = node46.isHook();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        boolean boolean64 = node63.isDebugger();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder65 = node63.new FileLevelJsDocBuilder();
        boolean boolean66 = node63.isLabel();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int69 = node68.getChildCount();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node72 = node71.removeChildren();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        java.lang.String str76 = node71.checkTreeEquals(node74);
        boolean boolean77 = node71.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = node71.getJSDocInfo();
        boolean boolean79 = node71.isDebugger();
        boolean boolean80 = node71.isTrue();
        com.google.javascript.rhino.Node node81 = node68.copyInformationFrom(node71);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node84 = node83.removeChildren();
        com.google.javascript.rhino.Node node85 = node68.useSourceInfoIfMissingFrom(node83);
        node85.putBooleanProp(31, true);
        boolean boolean89 = node85.isBreak();
        boolean boolean90 = node85.isCall();
        boolean boolean91 = node85.isTrue();
        com.google.javascript.rhino.Node[] nodeArray92 = new com.google.javascript.rhino.Node[] { node3, node11, node46, node63, node85 };
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(0, nodeArray92, 32, 29);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: duplicate child");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSDocInfo53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSDocInfo78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(nodeArray92);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.hasMoreThanOneChild();
        boolean boolean30 = node1.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.getJsDocBuilderForNode();
        node1.setIsSyntheticBlock(true);
        boolean boolean5 = node1.isCase();
        com.google.javascript.rhino.Node node6 = node1.getLastChild();
        boolean boolean7 = node1.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        node52.setSourceEncodedPositionForTree((int) (short) 0);
        node52.setLineno((int) ' ');
        boolean boolean57 = node52.isCatch();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        java.lang.String str64 = node59.checkTreeEquals(node62);
        com.google.javascript.rhino.Node node65 = node52.useSourceInfoIfMissingFrom(node59);
        boolean boolean66 = node59.isTrue();
        com.google.javascript.rhino.Node node67 = node2.useSourceInfoIfMissingFrom(node59);
        boolean boolean68 = node59.isComma();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node3.siblings();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) '#', nodeArray8, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        node27.setSourceEncodedPositionForTree((int) (short) 0);
        node27.setLineno((int) ' ');
        boolean boolean32 = node27.isCatch();
        boolean boolean33 = node27.isDebugger();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        boolean boolean53 = node35.isTypeOf();
        com.google.javascript.rhino.Node node54 = node27.copyInformationFromForTree(node35);
        node11.putProp((int) (byte) 1, (java.lang.Object) node27);
        boolean boolean56 = node11.isTrue();
        boolean boolean57 = node11.isGetterDef();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(12, node11);
        boolean boolean59 = node58.isFromExterns();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node60 = node58.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        java.lang.String str18 = node13.checkTreeEquals(node16);
        boolean boolean19 = node13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node13.getJSDocInfo();
        boolean boolean21 = node13.isDebugger();
        boolean boolean22 = node13.isTrue();
        com.google.javascript.rhino.Node node23 = node10.copyInformationFrom(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoIfMissingFrom(node25);
        node27.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        boolean boolean42 = node32.isVoid();
        boolean boolean43 = node32.isIf();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        com.google.javascript.rhino.Node node59 = node32.clonePropsFrom(node45);
        boolean boolean60 = node45.isRegExp();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        java.lang.String str68 = node63.checkTreeEquals(node66);
        boolean boolean69 = node63.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = node63.getJSDocInfo();
        boolean boolean71 = node63.isDebugger();
        boolean boolean72 = node63.isTrue();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int76 = node75.getChildCount();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node79 = node78.removeChildren();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node82 = node81.removeChildren();
        java.lang.String str83 = node78.checkTreeEquals(node81);
        boolean boolean84 = node78.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = node78.getJSDocInfo();
        boolean boolean86 = node78.isDebugger();
        boolean boolean87 = node78.isTrue();
        com.google.javascript.rhino.Node node88 = node75.copyInformationFrom(node78);
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = null;
        node78.setJSDocInfo(jSDocInfo89);
        node63.putProp((int) (short) 0, (java.lang.Object) node78);
        node45.putProp(0, (java.lang.Object) node78);
        boolean boolean93 = node27.isEquivalentToTyped(node45);
        com.google.javascript.rhino.Node node94 = node1.useSourceInfoFrom(node45);
        boolean boolean95 = node1.isName();
        node1.setSourceEncodedPositionForTree(12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable98 = node1.siblings();
        com.google.javascript.rhino.Node node99 = node1.removeFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSDocInfo85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(nodeIterable98);
        org.junit.Assert.assertNull(node99);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node node19 = node18.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node18.new FileLevelJsDocBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node21 = node18.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node4.isGetElem();
        boolean boolean8 = node4.isNull();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isVoid();
        boolean boolean16 = node4.isUnscopedQualifiedName();
        boolean boolean17 = node4.isAdd();
        com.google.javascript.rhino.Node node18 = node4.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setDouble((double) 1.0f);
        node28.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 40.0\n");
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int9 = node8.getChildCount();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        java.lang.String str16 = node11.checkTreeEquals(node14);
        boolean boolean17 = node11.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node11.getJSDocInfo();
        boolean boolean19 = node11.isDebugger();
        boolean boolean20 = node11.isTrue();
        com.google.javascript.rhino.Node node21 = node8.copyInformationFrom(node11);
        double double22 = node11.getDouble();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int25 = node24.getChildCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node37 = node24.copyInformationFrom(node27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = null;
        node27.setJSDocInfo(jSDocInfo38);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 0, node5, node11, node27);
        boolean boolean41 = node11.isAdd();
        int int42 = node11.getSourcePosition();
        boolean boolean43 = node11.isRegExp();
        node11.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = node11.getParent();
        boolean boolean47 = node46.isFromExterns();
        int int48 = node46.getLineno();
        node1.addChildToBack(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        java.lang.String str56 = node51.checkTreeEquals(node54);
        boolean boolean57 = node54.isAdd();
        boolean boolean58 = node54.isNE();
        java.lang.String str59 = node54.toStringTree();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node60 = node1.removeChildAfter(node54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "STRING NUMBER 40.0\n" + "'", str2, "STRING NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 40.0d + "'", double22 == 40.0d);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER 40.0\n" + "'", str59, "NUMBER 40.0\n");
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node31 = node14.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = null;
        node14.setJSDocInfo(jSDocInfo32);
        node14.detachChildren();
        node1.addChildToBack(node14);
        node14.putIntProp(53, 41);
        node14.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 40.0\n    NUMBER 40.0\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 40.0\n    NUMBER 40.0\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node14.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(jSDocInfo41);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        int int21 = node14.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType22 = node14.getJSType();
        boolean boolean23 = node14.isCall();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        double double39 = node28.getDouble();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        java.util.Set<java.lang.String> strSet47 = node41.getDirectives();
        int int48 = node28.getIndexOfChild(node41);
        int int49 = node41.getSourcePosition();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        boolean boolean65 = node54.isNE();
        node54.detachChildren();
        int int67 = node54.getLength();
        node54.setWasEmptyNode(true);
        node41.addChildrenToFront(node54);
        boolean boolean71 = node14.isEquivalentToTyped(node41);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 40.0d + "'", double39 == 40.0d);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        double double20 = node9.getDouble();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = null;
        node25.setJSDocInfo(jSDocInfo36);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 0, node3, node9, node25);
        java.lang.String str39 = node9.toStringTree();
        double double40 = node9.getDouble();
        com.google.javascript.rhino.Node node41 = node9.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(46, node9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 40.0d + "'", double20 == 40.0d);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 40.0\n" + "'", str39, "NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 40.0d + "'", double40 == 40.0d);
        org.junit.Assert.assertNull(node41);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        int int39 = node8.getSourcePosition();
        boolean boolean40 = node8.isRegExp();
        node8.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = node8.getParent();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        node58.setSourceEncodedPositionForTree((int) (short) 0);
        node58.setLineno((int) ' ');
        boolean boolean63 = node58.isNew();
        com.google.javascript.rhino.Node node64 = node43.copyInformationFromForTree(node58);
        boolean boolean65 = node58.isFalse();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 10L, 46, (int) '#');
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        boolean boolean50 = node49.isComma();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean53 = node52.isGetProp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        node68.setSourceEncodedPositionForTree((int) (short) 0);
        int int72 = node68.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node73 = node52.useSourceInfoFromForTree(node68);
        boolean boolean74 = node73.isContinue();
        com.google.javascript.rhino.Node node75 = node49.srcref(node73);
        com.google.javascript.rhino.Node node76 = node4.useSourceInfoFrom(node49);
        node76.setVarArgs(true);
        com.google.javascript.rhino.Node node79 = node76.removeFirstChild();
        node76.setCharno(48);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((-1.0d), (int) '#', 15);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        node18.setSourceEncodedPositionForTree((int) (short) 0);
        int int22 = node18.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node18.setStaticSourceFile(staticSourceFile23);
        int int25 = node18.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType26 = node18.getJSType();
        boolean boolean27 = node18.isNoSideEffectsCall();
        boolean boolean28 = node18.isAdd();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node29 = node3.getChildBefore(node18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(52);
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        boolean boolean18 = node4.isScript();
        boolean boolean19 = node4.isBlock();
        boolean boolean20 = node4.isIn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(16, 0, 53);
        boolean boolean4 = node3.isQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean24 = node23.isGetProp();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        boolean boolean26 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node27 = node1.copyInformationFrom(node23);
        boolean boolean28 = node23.isNE();
        boolean boolean29 = node23.isAssign();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean32 = node31.isGetProp();
        boolean boolean33 = node31.isUnscopedQualifiedName();
        boolean boolean34 = node31.isAssignAdd();
        java.lang.String str35 = node31.toString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node54 = node37.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node55 = node31.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node56 = node55.cloneNode();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        boolean boolean68 = node58.isVoid();
        boolean boolean69 = node58.isCall();
        int int70 = node58.getSourcePosition();
        boolean boolean71 = node58.isAnd();
        com.google.javascript.rhino.Node node72 = node56.useSourceInfoIfMissingFrom(node58);
        com.google.javascript.rhino.Node node73 = node23.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int76 = node75.getChildCount();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node79 = node78.removeChildren();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node82 = node81.removeChildren();
        java.lang.String str83 = node78.checkTreeEquals(node81);
        boolean boolean84 = node78.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = node78.getJSDocInfo();
        boolean boolean86 = node78.isDebugger();
        boolean boolean87 = node78.isTrue();
        com.google.javascript.rhino.Node node88 = node75.copyInformationFrom(node78);
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node91 = node90.removeChildren();
        com.google.javascript.rhino.Node node92 = node75.useSourceInfoIfMissingFrom(node90);
        node92.putBooleanProp(31, true);
        boolean boolean96 = node92.isBreak();
        boolean boolean97 = node92.isCall();
        com.google.javascript.rhino.Node node98 = node58.copyInformationFrom(node92);
        boolean boolean99 = node98.isNull();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 40.0" + "'", str35, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSDocInfo85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        boolean boolean31 = node1.isReturn();
        int int32 = node1.getCharno();
        int int33 = node1.getLineno();
        boolean boolean34 = node1.isFunction();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isCatch();
        boolean boolean20 = node14.isDebugger();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoIfMissingFrom(node37);
        boolean boolean40 = node22.isTypeOf();
        com.google.javascript.rhino.Node node41 = node14.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node44 = node42.useSourceInfoIfMissingFromForTree(node43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node26 = node25.cloneNode();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean29 = node28.isFalse();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        java.lang.String str36 = node31.checkTreeEquals(node34);
        boolean boolean37 = node31.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node31.getJSDocInfo();
        boolean boolean39 = node31.isDebugger();
        boolean boolean40 = node31.isTrue();
        boolean boolean41 = node31.isVoid();
        boolean boolean42 = node31.isIf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node58 = node31.clonePropsFrom(node44);
        com.google.javascript.rhino.jstype.JSType jSType59 = node44.getJSType();
        boolean boolean60 = node44.isVar();
        com.google.javascript.rhino.Node node61 = node44.getLastSibling();
        boolean boolean62 = node61.isNew();
        com.google.javascript.rhino.Node node63 = node28.useSourceInfoFrom(node61);
        boolean boolean64 = node63.isWith();
        node26.addChildToBack(node63);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node63.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator67 = nodeIterable66.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertNotNull(nodeSpliterator67);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        boolean boolean28 = node18.isVoid();
        boolean boolean29 = node18.isIf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node45 = node18.clonePropsFrom(node31);
        com.google.javascript.rhino.jstype.JSType jSType46 = node31.getJSType();
        boolean boolean47 = node31.isVar();
        com.google.javascript.rhino.Node node48 = node31.getLastSibling();
        boolean boolean49 = node31.isGetElem();
        com.google.javascript.rhino.Node node50 = node4.useSourceInfoFrom(node31);
        boolean boolean51 = node31.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node6.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node6.addChildrenToBack(node33);
        boolean boolean35 = node6.isComma();
        boolean boolean36 = node6.isGetProp();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray37, 4, 0);
        com.google.javascript.rhino.Node node41 = null;
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        boolean boolean58 = node47.isVoid();
        com.google.javascript.rhino.Node node59 = node47.getParent();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 100, node47, (int) (byte) 10, 10);
        boolean boolean63 = node62.isSetterDef();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(29, node40, node41, node62, 52, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.detachChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        double double33 = node22.getDouble();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        java.util.Set<java.lang.String> strSet41 = node35.getDirectives();
        int int42 = node22.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(39, node5, node22);
        com.google.javascript.rhino.Node node44 = null;
        // The following exception was thrown during execution in test generation
        try {
            node5.removeChild(node44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 40.0d + "'", double33 == 40.0d);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        boolean boolean24 = node22.isString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node22.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        int int17 = node4.getType();
        java.lang.String str21 = node4.toString(false, true, false);
        boolean boolean22 = node4.hasOneChild();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int27 = node26.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node26.siblings();
        node26.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] { node26 };
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) '#', nodeArray31, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        node50.setSourceEncodedPositionForTree((int) (short) 0);
        node50.setLineno((int) ' ');
        boolean boolean55 = node50.isCatch();
        boolean boolean56 = node50.isDebugger();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int59 = node58.getChildCount();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        boolean boolean69 = node61.isDebugger();
        boolean boolean70 = node61.isTrue();
        com.google.javascript.rhino.Node node71 = node58.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        com.google.javascript.rhino.Node node75 = node58.useSourceInfoIfMissingFrom(node73);
        boolean boolean76 = node58.isTypeOf();
        com.google.javascript.rhino.Node node77 = node50.copyInformationFromForTree(node58);
        node34.putProp((int) (byte) 1, (java.lang.Object) node50);
        boolean boolean79 = node34.isTrue();
        boolean boolean80 = node34.isGetterDef();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(12, node34);
        int int82 = node4.getIndexOfChild(node81);
        com.google.javascript.rhino.InputId inputId83 = node4.getInputId();
        boolean boolean84 = node4.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 39 + "'", int17 == 39);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER 40.0" + "'", str21, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNull(inputId83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 16);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        node16.setSourceEncodedPositionForTree((int) (short) 0);
        node16.setLineno((int) ' ');
        boolean boolean21 = node16.isCatch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        com.google.javascript.rhino.Node node29 = node16.useSourceInfoIfMissingFrom(node23);
        node23.putIntProp(51, 8);
        int int33 = node1.getIndexOfChild(node23);
        java.lang.Appendable appendable34 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        boolean boolean4 = node3.isDebugger();
        boolean boolean5 = node3.isDelProp();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        boolean boolean21 = node20.isComma();
        node20.putIntProp(37, 36);
        com.google.javascript.rhino.Node node25 = node3.useSourceInfoIfMissingFromForTree(node20);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 16, 0);
        java.lang.String str4 = node3.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "STRING hi! 16\n" + "'", str4, "STRING hi! 16\n");
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        boolean boolean28 = node27.isDefaultCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        node1.setVarArgs(false);
        boolean boolean12 = node1.isParamList();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int30 = node29.getChildCount();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        com.google.javascript.rhino.Node node42 = node29.copyInformationFrom(node32);
        node42.setSourceEncodedPositionForTree((int) (short) 0);
        node42.setLineno((int) ' ');
        boolean boolean47 = node42.isCatch();
        boolean boolean48 = node42.isDebugger();
        com.google.javascript.rhino.Node node49 = node17.srcrefTree(node42);
        boolean boolean50 = node17.isString();
        boolean boolean51 = node17.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node17.siblings();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(40, node55, 100, 100);
        boolean boolean59 = node17.hasChild(node55);
        com.google.javascript.rhino.Node node60 = node1.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean61 = node60.isInc();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        boolean boolean6 = node1.isSyntheticBlock();
        com.google.javascript.rhino.Node node7 = node1.cloneNode();
        node7.putBooleanProp((int) (byte) 0, true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        double double49 = node38.getDouble();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = null;
        node54.setJSDocInfo(jSDocInfo65);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 0, node32, node38, node54);
        boolean boolean68 = node38.isAdd();
        int int69 = node38.getSourcePosition();
        boolean boolean70 = node38.isRegExp();
        node38.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node73 = node38.getParent();
        boolean boolean74 = node73.isFromExterns();
        node26.putProp(46, (java.lang.Object) node73);
        boolean boolean76 = node73.isTrue();
        node73.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 40.0d + "'", double49 == 40.0d);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 31);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        double double18 = node7.getDouble();
        boolean boolean19 = node7.isNull();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        boolean boolean35 = node24.isNE();
        node24.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean40 = node39.isGetProp();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int43 = node42.getChildCount();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        java.lang.String str50 = node45.checkTreeEquals(node48);
        boolean boolean51 = node45.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = node45.getJSDocInfo();
        boolean boolean53 = node45.isDebugger();
        boolean boolean54 = node45.isTrue();
        com.google.javascript.rhino.Node node55 = node42.copyInformationFrom(node45);
        node55.setSourceEncodedPositionForTree((int) (short) 0);
        int int59 = node55.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node60 = node39.useSourceInfoFromForTree(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        java.lang.String str67 = node62.checkTreeEquals(node65);
        boolean boolean68 = node62.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node62.getJSDocInfo();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 100, node7, node24, node55, node62, 46, (int) (byte) 1);
        int int73 = node24.getType();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node78 = node77.cloneNode();
        boolean boolean79 = node77.isTry();
        com.google.javascript.rhino.Node node80 = node24.clonePropsFrom(node77);
        boolean boolean81 = node77.isVoid();
        com.google.javascript.rhino.Node node82 = node77.cloneTree();
        boolean boolean83 = node1.hasChild(node82);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 40.0d + "'", double18 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 39 + "'", int73 == 39);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = null;
        node47.setJSDocInfo(jSDocInfo58);
        node32.putProp((int) (short) 0, (java.lang.Object) node47);
        node14.putProp(0, (java.lang.Object) node47);
        com.google.javascript.rhino.Node node62 = node14.getLastChild();
        com.google.javascript.rhino.Node node63 = node14.getNext();
        // The following exception was thrown during execution in test generation
        try {
            int int64 = node63.getChildCount();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(node63);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        boolean boolean14 = node4.isFromExterns();
        boolean boolean15 = node4.isOptionalArg();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        boolean boolean27 = node17.isInstanceOf();
        int int28 = node17.getType();
        boolean boolean29 = node17.isAssignAdd();
        int int30 = node4.getIndexOfChild(node17);
        boolean boolean31 = node17.isFunction();
        com.google.javascript.rhino.Node node32 = node1.copyInformationFromForTree(node17);
        node32.setSourceEncodedPosition(44);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        boolean boolean46 = node36.isFromExterns();
        boolean boolean47 = node36.isOptionalArg();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        java.lang.String str54 = node49.checkTreeEquals(node52);
        boolean boolean55 = node49.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node49.getJSDocInfo();
        boolean boolean57 = node49.isDebugger();
        boolean boolean58 = node49.isTrue();
        boolean boolean59 = node49.isInstanceOf();
        int int60 = node49.getType();
        boolean boolean61 = node49.isAssignAdd();
        int int62 = node36.getIndexOfChild(node49);
        boolean boolean63 = node36.isThis();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int66 = node65.getChildCount();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node69 = node68.removeChildren();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node72 = node71.removeChildren();
        java.lang.String str73 = node68.checkTreeEquals(node71);
        boolean boolean74 = node68.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = node68.getJSDocInfo();
        boolean boolean76 = node68.isDebugger();
        boolean boolean77 = node68.isTrue();
        com.google.javascript.rhino.Node node78 = node65.copyInformationFrom(node68);
        boolean boolean79 = node68.isHook();
        boolean boolean80 = node68.isCall();
        java.lang.String str81 = node68.toStringTree();
        boolean boolean82 = node68.isNE();
        // The following exception was thrown during execution in test generation
        try {
            node32.addChildBefore(node36, node68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 39 + "'", int28 == 39);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 39 + "'", int60 == 39);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSDocInfo75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "NUMBER 40.0\n" + "'", str81, "NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node4.siblings();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(40, node42, 100, 100);
        boolean boolean46 = node4.hasChild(node42);
        node4.putIntProp((int) 'a', 44);
        boolean boolean50 = node4.isLabel();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        node4.putBooleanProp(38, false);
        boolean boolean36 = node4.isSetterDef();
        boolean boolean37 = node4.isSetterDef();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        boolean boolean49 = node39.isVoid();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        node64.setSourceEncodedPositionForTree((int) (short) 0);
        int int68 = node64.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = null;
        node64.setStaticSourceFile(staticSourceFile69);
        boolean boolean71 = node64.isNot();
        boolean boolean72 = node64.isQuotedString();
        com.google.javascript.rhino.Node node73 = node39.useSourceInfoIfMissingFromForTree(node64);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            node4.replaceChild(node39, node75);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isCall();
        node4.setSourceFileForTesting("");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node1.getJsDocBuilderForNode();
        boolean boolean31 = node1.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node1.getJSDocInfo();
        node1.setVarArgs(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean24 = node23.isGetProp();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        boolean boolean26 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node27 = node1.copyInformationFrom(node23);
        boolean boolean28 = node27.isTrue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node4.siblings();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(40, node42, 100, 100);
        boolean boolean46 = node4.hasChild(node42);
        node4.putIntProp((int) 'a', 44);
        boolean boolean50 = node4.isIn();
        node4.setType(10);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 48);
        boolean boolean2 = node1.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        boolean boolean4 = node3.isDebugger();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node3.new FileLevelJsDocBuilder();
        boolean boolean6 = node3.isLabel();
        node3.putBooleanProp(40, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        boolean boolean28 = node18.isVoid();
        boolean boolean29 = node18.isIf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node45 = node18.clonePropsFrom(node31);
        com.google.javascript.rhino.jstype.JSType jSType46 = node31.getJSType();
        boolean boolean47 = node31.isVar();
        com.google.javascript.rhino.Node node48 = node31.getLastSibling();
        boolean boolean49 = node31.isGetElem();
        com.google.javascript.rhino.Node node50 = node4.useSourceInfoFrom(node31);
        node31.setDouble((double) (short) 0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        boolean boolean30 = node15.isRegExp();
        boolean boolean31 = node15.isQualifiedName();
        boolean boolean32 = node15.hasMoreThanOneChild();
        node15.setWasEmptyNode(false);
        boolean boolean35 = node15.isIf();
        com.google.javascript.rhino.Node node36 = node15.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(31, node36, 32, 44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.setSourceEncodedPosition((int) (short) -1);
        boolean boolean19 = node5.isThrow();
        java.util.Set<java.lang.String> strSet20 = node5.getDirectives();
        boolean boolean21 = node5.isIn();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(48, node5, 36, (-1));
        int int25 = node24.getCharno();
        boolean boolean26 = node24.isNew();
        boolean boolean27 = node24.isExprResult();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        boolean boolean19 = node8.isNE();
        node1.putProp(31, (java.lang.Object) boolean19);
        boolean boolean21 = node1.isAnd();
        boolean boolean22 = node1.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int10 = node9.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node9.siblings();
        node9.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] { node9 };
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) '#', nodeArray14, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node33.setSourceEncodedPositionForTree((int) (short) 0);
        node33.setLineno((int) ' ');
        boolean boolean38 = node33.isCatch();
        boolean boolean39 = node33.isDebugger();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node57 = node56.removeChildren();
        com.google.javascript.rhino.Node node58 = node41.useSourceInfoIfMissingFrom(node56);
        boolean boolean59 = node41.isTypeOf();
        com.google.javascript.rhino.Node node60 = node33.copyInformationFromForTree(node41);
        node17.putProp((int) (byte) 1, (java.lang.Object) node33);
        boolean boolean62 = node17.isTrue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(42, node2, node17);
        boolean boolean64 = node2.isSetterDef();
        boolean boolean65 = node2.isBlock();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isCatch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        com.google.javascript.rhino.Node node27 = node14.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        java.lang.String str34 = node29.checkTreeEquals(node32);
        boolean boolean35 = node29.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node29.getJSDocInfo();
        boolean boolean37 = node29.isDebugger();
        boolean boolean38 = node29.isTrue();
        boolean boolean39 = node29.isInstanceOf();
        int int40 = node29.getType();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int43 = node42.getChildCount();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        java.lang.String str50 = node45.checkTreeEquals(node48);
        boolean boolean51 = node45.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = node45.getJSDocInfo();
        boolean boolean53 = node45.isDebugger();
        boolean boolean54 = node45.isTrue();
        com.google.javascript.rhino.Node node55 = node42.copyInformationFrom(node45);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        com.google.javascript.rhino.Node node59 = node42.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = null;
        node42.setJSDocInfo(jSDocInfo60);
        node42.detachChildren();
        node29.addChildToBack(node42);
        node29.setDouble(0.0d);
        int int66 = node21.getIndexOfChild(node29);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int69 = node68.getChildCount();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node72 = node71.removeChildren();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        java.lang.String str76 = node71.checkTreeEquals(node74);
        boolean boolean77 = node71.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = node71.getJSDocInfo();
        boolean boolean79 = node71.isDebugger();
        boolean boolean80 = node71.isTrue();
        com.google.javascript.rhino.Node node81 = node68.copyInformationFrom(node71);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node84 = node83.removeChildren();
        com.google.javascript.rhino.Node node85 = node68.useSourceInfoIfMissingFrom(node83);
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = null;
        node68.setJSDocInfo(jSDocInfo86);
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean90 = node68.hasChild(node89);
        node68.addSuppression("Node tree inequality:\nTree1:\nNULL\n\n\nTree2:\nSTRING STRING  10\n\n\nSubtree1: NULL\n\n\nSubtree2: STRING STRING  10\n");
        com.google.javascript.rhino.Node node93 = node29.srcrefTree(node68);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 39 + "'", int40 == 39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSDocInfo78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        boolean boolean18 = node7.isNE();
        node7.setSourceEncodedPosition((int) (short) -1);
        boolean boolean21 = node7.isThrow();
        java.util.Set<java.lang.String> strSet22 = node7.getDirectives();
        boolean boolean23 = node7.isIn();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(48, node7, 36, (-1));
        com.google.javascript.rhino.Node node27 = node1.useSourceInfoIfMissingFrom(node26);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        double double17 = node4.getDouble();
        boolean boolean18 = node4.isWith();
        boolean boolean19 = node4.isParamList();
        boolean boolean20 = node4.isThrow();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 40.0d + "'", double17 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        node36.detachChildren();
        boolean boolean38 = node36.isEmpty();
        com.google.javascript.rhino.Node node39 = node36.getParent();
        int int40 = node36.getChildCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node56 = node39.useSourceInfoIfMissingFrom(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = null;
        node39.setJSDocInfo(jSDocInfo57);
        node39.detachChildren();
        int int60 = node39.getLength();
        node39.putIntProp(1, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = node37.useSourceInfoIfMissingFrom(node39);
        boolean boolean65 = node39.isSyntheticBlock();
        node39.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setDouble((double) 1.0f);
        int int31 = node28.getSourceOffset();
        boolean boolean32 = node28.isUnscopedQualifiedName();
        boolean boolean33 = node28.isQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        int int6 = sideEffectFlags0.valueOf();
        sideEffectFlags0.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, (int) (byte) 10, (int) '#');
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        int int4 = node1.getLength();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        java.lang.String str6 = node1.toString();
        java.util.Set<java.lang.String> strSet7 = node1.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "NUMBER 1.0" + "'", str6, "NUMBER 1.0");
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node25 = node1.getLastChild();
        int int26 = node1.getSourcePosition();
        boolean boolean27 = node1.isFunction();
        boolean boolean28 = node1.isLabel();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isOptionalArg();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        java.lang.String str19 = node14.checkTreeEquals(node17);
        boolean boolean20 = node14.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node14.getJSDocInfo();
        boolean boolean22 = node14.isDebugger();
        boolean boolean23 = node14.isTrue();
        boolean boolean24 = node14.isInstanceOf();
        int int25 = node14.getType();
        boolean boolean26 = node14.isAssignAdd();
        int int27 = node1.getIndexOfChild(node14);
        boolean boolean28 = node14.isFunction();
        boolean boolean29 = node14.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 39 + "'", int25 == 39);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node node3 = node1.getAncestor(46);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        boolean boolean22 = node18.isHook();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node18.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = node18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 31");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node26 = node25.cloneNode();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean29 = node28.isFalse();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        java.lang.String str36 = node31.checkTreeEquals(node34);
        boolean boolean37 = node31.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node31.getJSDocInfo();
        boolean boolean39 = node31.isDebugger();
        boolean boolean40 = node31.isTrue();
        boolean boolean41 = node31.isVoid();
        boolean boolean42 = node31.isIf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node58 = node31.clonePropsFrom(node44);
        com.google.javascript.rhino.jstype.JSType jSType59 = node44.getJSType();
        boolean boolean60 = node44.isVar();
        com.google.javascript.rhino.Node node61 = node44.getLastSibling();
        boolean boolean62 = node61.isNew();
        com.google.javascript.rhino.Node node63 = node28.useSourceInfoFrom(node61);
        boolean boolean64 = node63.isWith();
        node26.addChildToBack(node63);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node63.siblings();
        boolean boolean67 = node63.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isThis();
        node1.setType((int) '4');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "NUMBER 1.0\n", (int) '4', 29);
        boolean boolean5 = node4.isGetElem();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        boolean boolean22 = node20.getBooleanProp(4);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isDebugger();
        boolean boolean12 = node3.isTrue();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node18.setJSDocInfo(jSDocInfo29);
        node3.putProp((int) (short) 0, (java.lang.Object) node18);
        com.google.javascript.rhino.Node node32 = node1.copyInformationFrom(node3);
        int int33 = node32.getType();
        boolean boolean34 = node32.wasEmptyNode();
        node32.setSourceEncodedPosition(37);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        java.lang.String str18 = node13.checkTreeEquals(node16);
        boolean boolean19 = node13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node13.getJSDocInfo();
        boolean boolean21 = node13.isDebugger();
        boolean boolean22 = node13.isTrue();
        com.google.javascript.rhino.Node node23 = node10.copyInformationFrom(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoIfMissingFrom(node25);
        node27.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node31 = node1.useSourceInfoIfMissingFrom(node27);
        boolean boolean32 = node27.isGetProp();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean56 = node34.hasChild(node55);
        node34.setLineno(0);
        boolean boolean59 = node34.isAssign();
        com.google.javascript.rhino.Node node60 = node27.useSourceInfoFromForTree(node34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = node60.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 31");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isCatch();
        boolean boolean20 = node14.isDebugger();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoIfMissingFrom(node37);
        boolean boolean40 = node22.isTypeOf();
        com.google.javascript.rhino.Node node41 = node14.copyInformationFromForTree(node22);
        boolean boolean42 = node22.isDo();
        boolean boolean43 = node22.isIn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        node16.setSourceEncodedPositionForTree((int) (short) 0);
        node16.setLineno((int) ' ');
        boolean boolean21 = node16.isCatch();
        boolean boolean22 = node16.isDebugger();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int25 = node24.getChildCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node37 = node24.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoIfMissingFrom(node39);
        boolean boolean42 = node24.isTypeOf();
        com.google.javascript.rhino.Node node43 = node16.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] { node16 };
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(47, nodeArray44, 39, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '4', nodeArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray44);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        int int37 = node36.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node30 = node14.getLastSibling();
        node14.setSourceFileForTesting("");
        boolean boolean33 = node14.isCatch();
        // The following exception was thrown during execution in test generation
        try {
            node14.setString("NUMBER 1.0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 40.0 [source_file: ] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(16);
        boolean boolean2 = node1.isContinue();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node22 = node5.useSourceInfoIfMissingFrom(node20);
        node22.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(40, node28, 100, 100);
        boolean boolean32 = node22.isEquivalentToTyped(node28);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        node51.putBooleanProp(31, true);
        boolean boolean55 = node51.isHook();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        java.lang.String str62 = node57.checkTreeEquals(node60);
        boolean boolean63 = node57.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = node57.getJSDocInfo();
        boolean boolean65 = node57.isDebugger();
        boolean boolean66 = node57.isTrue();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int70 = node69.getChildCount();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node76 = node75.removeChildren();
        java.lang.String str77 = node72.checkTreeEquals(node75);
        boolean boolean78 = node72.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = node72.getJSDocInfo();
        boolean boolean80 = node72.isDebugger();
        boolean boolean81 = node72.isTrue();
        com.google.javascript.rhino.Node node82 = node69.copyInformationFrom(node72);
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        node72.setJSDocInfo(jSDocInfo83);
        node57.putProp((int) (short) 0, (java.lang.Object) node72);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(100, node22, node51, node57, 0, 15);
        boolean boolean89 = node51.isDebugger();
        boolean boolean90 = node1.hasChild(node51);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSDocInfo64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSDocInfo79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node31 = node14.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = null;
        node14.setJSDocInfo(jSDocInfo32);
        node14.detachChildren();
        node1.addChildToBack(node14);
        int int36 = node14.getLineno();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        boolean boolean47 = node41.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node41.getJSDocInfo();
        boolean boolean49 = node41.isDebugger();
        boolean boolean50 = node41.isTrue();
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node41);
        com.google.javascript.rhino.Node node52 = null;
        int int53 = node51.getIndexOfChild(node52);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int71 = node70.getChildCount();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node77 = node76.removeChildren();
        java.lang.String str78 = node73.checkTreeEquals(node76);
        boolean boolean79 = node73.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = node73.getJSDocInfo();
        boolean boolean81 = node73.isDebugger();
        boolean boolean82 = node73.isTrue();
        com.google.javascript.rhino.Node node83 = node70.copyInformationFrom(node73);
        node83.setSourceEncodedPositionForTree((int) (short) 0);
        node83.setLineno((int) ' ');
        boolean boolean88 = node83.isCatch();
        boolean boolean89 = node83.isDebugger();
        com.google.javascript.rhino.Node node90 = node58.srcrefTree(node83);
        boolean boolean91 = node58.isString();
        boolean boolean92 = node58.isQualifiedName();
        boolean boolean93 = node58.isQualifiedName();
        com.google.javascript.rhino.Node node94 = node51.useSourceInfoFromForTree(node58);
        com.google.javascript.rhino.Node node95 = node14.useSourceInfoIfMissingFrom(node58);
        boolean boolean96 = node95.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSDocInfo80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '#');
        com.google.javascript.rhino.Node node2 = node1.removeFirstChild();
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(30);
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node1.isQuotedString();
        boolean boolean20 = node1.isNumber();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(44, 37, 35);
        boolean boolean4 = node3.isSwitch();
        boolean boolean5 = node3.isCase();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 36);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node7.new FileLevelJsDocBuilder();
        boolean boolean9 = node7.isSyntheticBlock();
        node7.setWasEmptyNode(true);
        boolean boolean12 = node7.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node13 = node7.getLastSibling();
        node3.addChildrenToFront(node7);
        boolean boolean15 = node7.isBlock();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node6.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node6.addChildrenToBack(node33);
        boolean boolean35 = node6.isComma();
        boolean boolean36 = node6.isGetProp();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray37, 4, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(4095, nodeArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(40, node40, 100, 100);
        boolean boolean44 = node43.hasChildren();
        node4.addChildToFront(node43);
        boolean boolean46 = node4.isSwitch();
        boolean boolean47 = node4.isBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node31 = node14.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = null;
        node14.setJSDocInfo(jSDocInfo32);
        node14.detachChildren();
        node1.addChildToBack(node14);
        int int36 = node14.getLineno();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        boolean boolean47 = node41.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node41.getJSDocInfo();
        boolean boolean49 = node41.isDebugger();
        boolean boolean50 = node41.isTrue();
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node41);
        com.google.javascript.rhino.Node node52 = null;
        int int53 = node51.getIndexOfChild(node52);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int71 = node70.getChildCount();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node77 = node76.removeChildren();
        java.lang.String str78 = node73.checkTreeEquals(node76);
        boolean boolean79 = node73.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = node73.getJSDocInfo();
        boolean boolean81 = node73.isDebugger();
        boolean boolean82 = node73.isTrue();
        com.google.javascript.rhino.Node node83 = node70.copyInformationFrom(node73);
        node83.setSourceEncodedPositionForTree((int) (short) 0);
        node83.setLineno((int) ' ');
        boolean boolean88 = node83.isCatch();
        boolean boolean89 = node83.isDebugger();
        com.google.javascript.rhino.Node node90 = node58.srcrefTree(node83);
        boolean boolean91 = node58.isString();
        boolean boolean92 = node58.isQualifiedName();
        boolean boolean93 = node58.isQualifiedName();
        com.google.javascript.rhino.Node node94 = node51.useSourceInfoFromForTree(node58);
        com.google.javascript.rhino.Node node95 = node14.useSourceInfoIfMissingFrom(node58);
        boolean boolean96 = node95.isComma();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSDocInfo80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        node4.setSourceEncodedPosition(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        boolean boolean13 = node1.isString();
        boolean boolean14 = node1.isFromExterns();
        node1.addSuppression("NUMBER 1.0");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isCatch();
        boolean boolean20 = node14.isDebugger();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoIfMissingFrom(node37);
        boolean boolean40 = node22.isTypeOf();
        com.google.javascript.rhino.Node node41 = node14.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = node42.isArrayLit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node26 = node25.cloneNode();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags27 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags27.clearSideEffectFlags();
        sideEffectFlags27.setAllFlags();
        sideEffectFlags27.setReturnsTainted();
        // The following exception was thrown during execution in test generation
        try {
            node26.setSideEffectFlags(sideEffectFlags27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isNot();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        boolean boolean33 = node23.isFromExterns();
        boolean boolean34 = node23.isOptionalArg();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        boolean boolean46 = node36.isInstanceOf();
        int int47 = node36.getType();
        boolean boolean48 = node36.isAssignAdd();
        int int49 = node23.getIndexOfChild(node36);
        node23.setOptionalArg(true);
        java.util.Set<java.lang.String> strSet52 = node23.getDirectives();
        boolean boolean53 = node14.hasChild(node23);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        boolean boolean69 = node68.isComma();
        boolean boolean70 = node68.isComma();
        com.google.javascript.rhino.Node node71 = node68.cloneTree();
        node23.addChildToFront(node71);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 39 + "'", int47 == 39);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.isQualifiedName();
        node18.putIntProp((int) 'a', (int) (short) 1);
        boolean boolean23 = node18.isFromExterns();
        boolean boolean24 = node18.isRegExp();
        boolean boolean25 = node18.isInc();
        boolean boolean26 = node18.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 48, 159748, 4);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node1.isTypeOf();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = null;
        node21.setJSDocInfo(jSDocInfo39);
        node21.detachChildren();
        int int42 = node21.getLength();
        boolean boolean43 = node21.isTry();
        boolean boolean44 = node21.isContinue();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node21.addChildToFront(node46);
        boolean boolean48 = node21.isDebugger();
        com.google.javascript.rhino.Node node49 = node1.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        com.google.javascript.rhino.Node node68 = node51.useSourceInfoIfMissingFrom(node66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = null;
        node51.setJSDocInfo(jSDocInfo69);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean73 = node51.hasChild(node72);
        com.google.javascript.rhino.Node node74 = node21.srcref(node72);
        boolean boolean75 = node74.isArrayLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node3 = node1.getLastChild();
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isHook();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean24 = node23.isGetProp();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        boolean boolean26 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node27 = node1.copyInformationFrom(node23);
        node27.setVarArgs(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node27.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder30.append("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 40.0\n    NUMBER 40.0\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 40.0\n    NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        java.util.Set<java.lang.String> strSet7 = node1.getDirectives();
        node1.setIsSyntheticBlock(true);
        boolean boolean10 = node1.isQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        node19.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(40, node25, 100, 100);
        boolean boolean29 = node19.isEquivalentToTyped(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node48 = node31.useSourceInfoIfMissingFrom(node46);
        node48.putBooleanProp(31, true);
        boolean boolean52 = node48.isHook();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int67 = node66.getChildCount();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node70 = node69.removeChildren();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        java.lang.String str74 = node69.checkTreeEquals(node72);
        boolean boolean75 = node69.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = node69.getJSDocInfo();
        boolean boolean77 = node69.isDebugger();
        boolean boolean78 = node69.isTrue();
        com.google.javascript.rhino.Node node79 = node66.copyInformationFrom(node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = null;
        node69.setJSDocInfo(jSDocInfo80);
        node54.putProp((int) (short) 0, (java.lang.Object) node69);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100, node19, node48, node54, 0, 15);
        boolean boolean86 = node54.isContinue();
        boolean boolean87 = node54.isBlock();
        node54.setSourceEncodedPositionForTree(0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, 39, 4);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node23 = node6.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = null;
        node6.setJSDocInfo(jSDocInfo24);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean28 = node6.hasChild(node27);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(54, node4, node27, node30);
        boolean boolean32 = node31.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node31.cloneTree();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean24 = node2.hasChild(node23);
        boolean boolean25 = node2.isObjectLit();
        node2.setSourceEncodedPositionForTree(47);
        node2.setLength(50);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(42, node2);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(47, "NUMBER 40.0", 53, 48);
        boolean boolean36 = node35.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        boolean boolean40 = node38.isThrow();
        node38.setSourceEncodedPositionForTree(35);
        // The following exception was thrown during execution in test generation
        try {
            node30.addChildBefore(node35, node38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isCall();
        java.lang.String str17 = node4.toStringTree();
        node4.setLineno(53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node4.setJSDocInfo(jSDocInfo20);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 40.0\n" + "'", str17, "NUMBER 40.0\n");
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean3 = node2.isFalse();
        boolean boolean4 = node2.isRegExp();
        com.google.javascript.rhino.Node node5 = node2.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = null;
        node10.setStaticSourceFile(staticSourceFile21);
        java.lang.String str23 = node10.getSourceFileName();
        boolean boolean24 = node10.isEmpty();
        boolean boolean25 = node10.isLabelName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable26 = node10.getAncestors();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 16, 30);
        com.google.javascript.rhino.Node node31 = node10.srcrefTree(node30);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean34 = node33.isGetProp();
        boolean boolean35 = node33.isUnscopedQualifiedName();
        boolean boolean36 = node33.isAssignAdd();
        java.lang.String str37 = node33.toString();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node56 = node39.useSourceInfoIfMissingFrom(node54);
        com.google.javascript.rhino.Node node57 = node33.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node58 = node57.cloneNode();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        boolean boolean68 = node60.isDebugger();
        boolean boolean69 = node60.isTrue();
        boolean boolean70 = node60.isVoid();
        boolean boolean71 = node60.isIf();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int74 = node73.getChildCount();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node77 = node76.removeChildren();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node80 = node79.removeChildren();
        java.lang.String str81 = node76.checkTreeEquals(node79);
        boolean boolean82 = node76.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = node76.getJSDocInfo();
        boolean boolean84 = node76.isDebugger();
        boolean boolean85 = node76.isTrue();
        com.google.javascript.rhino.Node node86 = node73.copyInformationFrom(node76);
        com.google.javascript.rhino.Node node87 = node60.clonePropsFrom(node73);
        com.google.javascript.rhino.jstype.JSType jSType88 = node73.getJSType();
        boolean boolean89 = node73.isVar();
        boolean boolean90 = node73.isDelProp();
        boolean boolean91 = node73.isOr();
        boolean boolean92 = node73.isSwitch();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((-1), node5, node10, node58, node73, 16, 36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ancestorIterable26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER 40.0" + "'", str37, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.isName();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node23 = node21.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node24 = node18.useSourceInfoFromForTree(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, 37, (int) (byte) 1);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 42);
        com.google.javascript.rhino.Node node6 = node3.useSourceInfoFromForTree(node5);
        node5.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node9 = node5.getLastSibling();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        boolean boolean39 = node4.isQualifiedName();
        boolean boolean40 = node4.isScript();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(35);
        com.google.javascript.rhino.Node node43 = node4.copyInformationFromForTree(node42);
        boolean boolean44 = node4.isVar();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 100);
        com.google.javascript.rhino.Node node2 = node1.removeFirstChild();
        boolean boolean3 = node1.isTrue();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean18 = node17.isGetProp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node33.setSourceEncodedPositionForTree((int) (short) 0);
        int int37 = node33.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node38 = node17.useSourceInfoFromForTree(node33);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node14.srcref(node38);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node38.getJSDocInfo();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) '4', 47, (int) (byte) 10);
        node38.addChildrenToBack(node45);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(jSDocInfo41);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        boolean boolean19 = node14.isInstanceOf();
        boolean boolean20 = node14.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.isSwitch();
        boolean boolean20 = node18.isArrayLit();
        com.google.javascript.rhino.InputId inputId21 = node18.getInputId();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoIfMissingFrom(node38);
        node40.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(40, node46, 100, 100);
        boolean boolean50 = node40.isEquivalentToTyped(node46);
        boolean boolean51 = node46.isWhile();
        boolean boolean52 = node18.isEquivalentTo(node46);
        boolean boolean53 = node18.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node4.siblings();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(40, node42, 100, 100);
        boolean boolean46 = node4.hasChild(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int58 = node57.getChildCount();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        boolean boolean68 = node60.isDebugger();
        boolean boolean69 = node60.isTrue();
        com.google.javascript.rhino.Node node70 = node57.copyInformationFrom(node60);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        com.google.javascript.rhino.Node node74 = node57.useSourceInfoIfMissingFrom(node72);
        node74.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node78 = node48.useSourceInfoIfMissingFrom(node74);
        boolean boolean79 = node74.isGetProp();
        int int81 = node74.getIntProp((-1));
        node42.addChildToFront(node74);
        boolean boolean83 = node42.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node15.isComma();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean19 = node18.isGetProp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        node34.setSourceEncodedPositionForTree((int) (short) 0);
        int int38 = node34.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node39 = node18.useSourceInfoFromForTree(node34);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node15.srcref(node39);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node39.getJSDocInfo();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node61 = node44.useSourceInfoIfMissingFrom(node59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = null;
        node44.setJSDocInfo(jSDocInfo62);
        node44.detachChildren();
        int int65 = node44.getLength();
        node44.putIntProp(1, (int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(45, node39, node44, 0, (int) ' ');
        node71.putBooleanProp(16, false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, 37, (int) (short) 10);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder2.append("NUMBER 1.0");
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        boolean boolean28 = node2.isOnlyModifiesThisCall();
        com.google.javascript.rhino.InputId inputId29 = null;
        node2.setInputId(inputId29);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node49 = node32.useSourceInfoIfMissingFrom(node47);
        node49.putBooleanProp(31, true);
        boolean boolean53 = node49.isBreak();
        boolean boolean54 = node49.isOptionalArg();
        com.google.javascript.rhino.Node node55 = node2.copyInformationFrom(node49);
        java.lang.Appendable appendable56 = null;
        // The following exception was thrown during execution in test generation
        try {
            node49.appendStringTree(appendable56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 31");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setCharno(1);
        boolean boolean32 = node28.getBooleanProp((int) (short) -1);
        boolean boolean33 = node28.isName();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        node48.setSourceEncodedPositionForTree((int) (short) 0);
        int int52 = node48.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node48.setStaticSourceFile(staticSourceFile53);
        int int55 = node48.getSourceOffset();
        boolean boolean56 = node28.hasChild(node48);
        boolean boolean57 = node28.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean3 = node2.isInc();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(46, node2, (int) (byte) -1, 36);
        boolean boolean7 = node6.isGetProp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        java.lang.String str18 = node13.checkTreeEquals(node16);
        boolean boolean19 = node13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node13.getJSDocInfo();
        boolean boolean21 = node13.isDebugger();
        boolean boolean22 = node13.isTrue();
        com.google.javascript.rhino.Node node23 = node10.copyInformationFrom(node13);
        node23.setSourceEncodedPositionForTree((int) (short) 0);
        node23.setLineno((int) ' ');
        boolean boolean28 = node23.isAnd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int31 = node30.getChildCount();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        java.lang.String str38 = node33.checkTreeEquals(node36);
        boolean boolean39 = node33.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node33.getJSDocInfo();
        boolean boolean41 = node33.isDebugger();
        boolean boolean42 = node33.isTrue();
        com.google.javascript.rhino.Node node43 = node30.copyInformationFrom(node33);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        node58.setSourceEncodedPositionForTree((int) (short) 0);
        node58.setLineno((int) ' ');
        boolean boolean63 = node58.isCatch();
        boolean boolean64 = node58.isDebugger();
        com.google.javascript.rhino.Node node65 = node33.srcrefTree(node58);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node71 = node70.removeChildren();
        java.lang.String str72 = node67.checkTreeEquals(node70);
        boolean boolean73 = node67.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = node67.getJSDocInfo();
        boolean boolean75 = node67.isDebugger();
        boolean boolean76 = node67.isTrue();
        boolean boolean77 = node67.isFromExterns();
        boolean boolean78 = node67.isOptionalArg();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(10, node23, node65, node67, 15, 4095);
        com.google.javascript.rhino.Node node82 = node67.detachFromParent();
        com.google.javascript.rhino.Node node83 = node6.useSourceInfoFrom(node67);
        boolean boolean84 = node6.isComma();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSDocInfo74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node36.isIf();
        java.lang.String str38 = node36.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = node36.getExistingIntProp((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 97");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean2 = node1.isFalse();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        boolean boolean18 = node7.isNE();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        boolean boolean30 = node20.isVoid();
        boolean boolean31 = node20.isIf();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node47 = node20.clonePropsFrom(node33);
        boolean boolean48 = node20.isRegExp();
        boolean boolean49 = node20.isCall();
        java.lang.String str50 = node20.toString();
        boolean boolean51 = node7.isEquivalentToTyped(node20);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node52 = node1.removeChildAfter(node7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER 40.0" + "'", str50, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        node1.setSourceFileForTesting("");
        int int7 = node1.getIntProp(53);
        boolean boolean8 = node1.isSyntheticBlock();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node1.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator10 = ancestorIterable9.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isCall();
        boolean boolean17 = node4.isContinue();
        boolean boolean18 = node4.isNull();
        boolean boolean19 = node4.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        node46.setSourceEncodedPositionForTree((int) (short) 0);
        node46.setLineno((int) ' ');
        boolean boolean51 = node46.isCatch();
        boolean boolean52 = node46.isDebugger();
        com.google.javascript.rhino.Node node53 = node21.srcrefTree(node46);
        boolean boolean54 = node21.isString();
        boolean boolean55 = node21.isQualifiedName();
        boolean boolean56 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node57 = node14.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node58 = node57.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = node58.isComma();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        int int4 = node1.getLength();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        node19.setSourceEncodedPositionForTree((int) (short) 0);
        node19.setLineno((int) ' ');
        boolean boolean24 = node19.isAnd();
        boolean boolean25 = node19.isHook();
        com.google.javascript.rhino.Node node26 = node1.srcref(node19);
        boolean boolean27 = node26.isObjectLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        boolean boolean31 = node1.isReturn();
        int int32 = node1.getCharno();
        int int33 = node1.getLineno();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node49 = node1.useSourceInfoIfMissingFromForTree(node35);
        boolean boolean50 = node49.isNE();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node49.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        node17.setSourceEncodedPositionForTree((int) (short) 0);
        int int21 = node17.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        boolean boolean34 = node24.isVoid();
        boolean boolean35 = node24.isIf();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node51 = node24.clonePropsFrom(node37);
        boolean boolean52 = node37.isRegExp();
        com.google.javascript.rhino.Node node53 = node37.getLastSibling();
        java.lang.String str54 = node53.toStringTree();
        java.lang.Object obj56 = node53.getProp(35);
        com.google.javascript.rhino.Node node57 = node17.useSourceInfoIfMissingFromForTree(node53);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER 40.0\n" + "'", str54, "NUMBER 40.0\n");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setCharno(1);
        boolean boolean32 = node28.getBooleanProp((int) (short) -1);
        boolean boolean33 = node28.isName();
        boolean boolean34 = node28.isNE();
        com.google.javascript.rhino.InputId inputId35 = null;
        node28.setInputId(inputId35);
        boolean boolean37 = node28.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        int int17 = node4.getType();
        java.lang.String str21 = node4.toString(false, true, false);
        boolean boolean22 = node4.hasOneChild();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int27 = node26.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node26.siblings();
        node26.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] { node26 };
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) '#', nodeArray31, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        node50.setSourceEncodedPositionForTree((int) (short) 0);
        node50.setLineno((int) ' ');
        boolean boolean55 = node50.isCatch();
        boolean boolean56 = node50.isDebugger();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int59 = node58.getChildCount();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        boolean boolean69 = node61.isDebugger();
        boolean boolean70 = node61.isTrue();
        com.google.javascript.rhino.Node node71 = node58.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        com.google.javascript.rhino.Node node75 = node58.useSourceInfoIfMissingFrom(node73);
        boolean boolean76 = node58.isTypeOf();
        com.google.javascript.rhino.Node node77 = node50.copyInformationFromForTree(node58);
        node34.putProp((int) (byte) 1, (java.lang.Object) node50);
        boolean boolean79 = node34.isTrue();
        boolean boolean80 = node34.isGetterDef();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(12, node34);
        int int82 = node4.getIndexOfChild(node81);
        com.google.javascript.rhino.InputId inputId83 = node4.getInputId();
        boolean boolean84 = node4.isTypeOf();
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newNumber(1.0d, 37, (int) (byte) 1);
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newNumber((double) 42);
        com.google.javascript.rhino.Node node91 = node88.useSourceInfoFromForTree(node90);
        // The following exception was thrown during execution in test generation
        try {
            node4.removeChild(node91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 39 + "'", int17 == 39);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER 40.0" + "'", str21, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNull(inputId83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isNot();
        node14.setDouble((double) 10L);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        node38.setSourceEncodedPositionForTree((int) (short) 0);
        node38.setLineno((int) ' ');
        boolean boolean43 = node38.isCatch();
        boolean boolean44 = node38.isDebugger();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int47 = node46.getChildCount();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        java.lang.String str54 = node49.checkTreeEquals(node52);
        boolean boolean55 = node49.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node49.getJSDocInfo();
        boolean boolean57 = node49.isDebugger();
        boolean boolean58 = node49.isTrue();
        com.google.javascript.rhino.Node node59 = node46.copyInformationFrom(node49);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node63 = node46.useSourceInfoIfMissingFrom(node61);
        boolean boolean64 = node46.isTypeOf();
        com.google.javascript.rhino.Node node65 = node38.copyInformationFromForTree(node46);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node71 = node70.removeChildren();
        java.lang.String str72 = node67.checkTreeEquals(node70);
        boolean boolean73 = node67.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = node67.getJSDocInfo();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        node67.setDirectives((java.util.Set<java.lang.String>) strSet78);
        node65.setDirectives((java.util.Set<java.lang.String>) strSet78);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet78);
        boolean boolean83 = node14.isGetterDef();
        boolean boolean84 = node14.isScript();
        java.lang.String str85 = node14.getQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSDocInfo74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isTry();
        boolean boolean25 = node2.isContinue();
        com.google.javascript.rhino.Node node26 = node2.getLastChild();
        int int27 = node2.getSourcePosition();
        com.google.javascript.rhino.Node node28 = node2.cloneNode();
        boolean boolean29 = node2.isDebugger();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, 37, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 42);
        com.google.javascript.rhino.Node node36 = node33.useSourceInfoFromForTree(node35);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        boolean boolean47 = node41.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node41.getJSDocInfo();
        boolean boolean49 = node41.isDebugger();
        boolean boolean50 = node41.isTrue();
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node41);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node54 = node53.removeChildren();
        com.google.javascript.rhino.Node node55 = node38.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = null;
        node38.setJSDocInfo(jSDocInfo56);
        node38.detachChildren();
        int int59 = node38.getLength();
        boolean boolean60 = node38.isTry();
        boolean boolean61 = node38.isContinue();
        com.google.javascript.rhino.Node node62 = node38.getLastChild();
        int int63 = node38.getSourcePosition();
        boolean boolean64 = node38.isFunction();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int67 = node66.getChildCount();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node70 = node69.removeChildren();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        java.lang.String str74 = node69.checkTreeEquals(node72);
        boolean boolean75 = node69.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = node69.getJSDocInfo();
        boolean boolean77 = node69.isDebugger();
        boolean boolean78 = node69.isTrue();
        com.google.javascript.rhino.Node node79 = node66.copyInformationFrom(node69);
        boolean boolean80 = node69.isHook();
        boolean boolean81 = node69.isRegExp();
        boolean boolean82 = node69.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable83 = node69.getAncestors();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(51, node2, node35, node38, node69, 51, 45);
        java.lang.Appendable appendable87 = null;
        // The following exception was thrown during execution in test generation
        try {
            node35.appendStringTree(appendable87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(ancestorIterable83);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        int int17 = node4.getType();
        java.lang.String str21 = node4.toString(false, true, false);
        boolean boolean22 = node4.hasOneChild();
        com.google.javascript.rhino.Node node23 = node4.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node25 = node23.getChildAtIndex(29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 39 + "'", int17 == 39);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER 40.0" + "'", str21, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node26 = node25.cloneNode();
        boolean boolean27 = node25.isInc();
        double double28 = node25.getDouble();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 40.0d + "'", double28 == 40.0d);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isNull();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node16 = node15.removeChildren();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        java.lang.String str20 = node15.checkTreeEquals(node18);
        boolean boolean21 = node15.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = node15.getJSDocInfo();
        boolean boolean23 = node15.isDebugger();
        boolean boolean24 = node15.isTrue();
        boolean boolean25 = node15.isVoid();
        boolean boolean26 = node15.isIf();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int29 = node28.getChildCount();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        java.lang.String str36 = node31.checkTreeEquals(node34);
        boolean boolean37 = node31.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node31.getJSDocInfo();
        boolean boolean39 = node31.isDebugger();
        boolean boolean40 = node31.isTrue();
        com.google.javascript.rhino.Node node41 = node28.copyInformationFrom(node31);
        com.google.javascript.rhino.Node node42 = node15.clonePropsFrom(node28);
        boolean boolean43 = node15.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder44 = node15.getJsDocBuilderForNode();
        boolean boolean45 = node15.isInstanceOf();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(48, node15);
        boolean boolean47 = node46.isWith();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = node1.checkTreeEquals(node46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 48");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        boolean boolean19 = node14.isDefaultCase();
        boolean boolean20 = node14.isNot();
        boolean boolean21 = node14.isLabel();
        java.lang.Object obj23 = node14.getProp(15);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        node15.setSourceEncodedPositionForTree((int) (short) 0);
        int int19 = node15.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node15.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node15.isNot();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        boolean boolean34 = node24.isFromExterns();
        boolean boolean35 = node24.isOptionalArg();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        boolean boolean47 = node37.isInstanceOf();
        int int48 = node37.getType();
        boolean boolean49 = node37.isAssignAdd();
        int int50 = node24.getIndexOfChild(node37);
        node24.setOptionalArg(true);
        java.util.Set<java.lang.String> strSet53 = node24.getDirectives();
        boolean boolean54 = node15.hasChild(node24);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int57 = node56.getChildCount();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        java.lang.String str64 = node59.checkTreeEquals(node62);
        boolean boolean65 = node59.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = node59.getJSDocInfo();
        boolean boolean67 = node59.isDebugger();
        boolean boolean68 = node59.isTrue();
        com.google.javascript.rhino.Node node69 = node56.copyInformationFrom(node59);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node72 = node71.removeChildren();
        com.google.javascript.rhino.Node node73 = node56.useSourceInfoIfMissingFrom(node71);
        node73.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(40, node79, 100, 100);
        boolean boolean83 = node73.isEquivalentToTyped(node79);
        boolean boolean84 = node79.isWhile();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 0, node24, node79, 32, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 39 + "'", int48 == 39);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        boolean boolean16 = node4.isTypeOf();
        boolean boolean17 = node4.isInstanceOf();
        boolean boolean18 = node4.isEmpty();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        boolean boolean28 = node18.isVoid();
        boolean boolean29 = node18.isIf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node45 = node18.clonePropsFrom(node31);
        com.google.javascript.rhino.jstype.JSType jSType46 = node31.getJSType();
        boolean boolean47 = node31.isVar();
        com.google.javascript.rhino.Node node48 = node31.getLastSibling();
        boolean boolean49 = node31.isGetElem();
        com.google.javascript.rhino.Node node50 = node4.useSourceInfoFrom(node31);
        boolean boolean51 = node4.isTypeOf();
        boolean boolean52 = node4.isIn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node3 = node1.removeFirstChild();
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags5.clearSideEffectFlags();
        sideEffectFlags5.setAllFlags();
        boolean boolean8 = sideEffectFlags5.areAllFlagsSet();
        sideEffectFlags5.setReturnsTainted();
        sideEffectFlags5.setReturnsTainted();
        sideEffectFlags5.setThrows();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(sideEffectFlags5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        node1.setVarArgs(false);
        boolean boolean12 = node1.isParamList();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int30 = node29.getChildCount();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        com.google.javascript.rhino.Node node42 = node29.copyInformationFrom(node32);
        node42.setSourceEncodedPositionForTree((int) (short) 0);
        node42.setLineno((int) ' ');
        boolean boolean47 = node42.isCatch();
        boolean boolean48 = node42.isDebugger();
        com.google.javascript.rhino.Node node49 = node17.srcrefTree(node42);
        boolean boolean50 = node17.isString();
        boolean boolean51 = node17.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node17.siblings();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(40, node55, 100, 100);
        boolean boolean59 = node17.hasChild(node55);
        com.google.javascript.rhino.Node node60 = node1.useSourceInfoIfMissingFromForTree(node55);
        com.google.javascript.rhino.Node node61 = node1.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node31 = node14.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = null;
        node14.setJSDocInfo(jSDocInfo32);
        node14.detachChildren();
        node1.addChildToBack(node14);
        int int36 = node14.getSideEffectFlags();
        boolean boolean37 = node14.isComma();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        boolean boolean3 = node1.isThrow();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        double double20 = node9.getDouble();
        boolean boolean21 = node9.isNull();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        boolean boolean37 = node26.isNE();
        node26.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean42 = node41.isGetProp();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        node57.setSourceEncodedPositionForTree((int) (short) 0);
        int int61 = node57.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node62 = node41.useSourceInfoFromForTree(node57);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        java.lang.String str69 = node64.checkTreeEquals(node67);
        boolean boolean70 = node64.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = node64.getJSDocInfo();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (byte) 100, node9, node26, node57, node64, 46, (int) (byte) 1);
        boolean boolean75 = node26.isIn();
        com.google.javascript.rhino.Node node76 = node1.copyInformationFrom(node26);
        node1.setLineno(4);
        int int79 = node1.getSourceOffset();
        boolean boolean80 = node1.isLabel();
        boolean boolean81 = node1.isContinue();
        node1.addSuppression("NUMBER 1.0");
        boolean boolean84 = node1.isNot();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 40.0d + "'", double20 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSDocInfo71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        boolean boolean24 = node1.isObjectLit();
        boolean boolean25 = node1.isDefaultCase();
        boolean boolean26 = node1.isLabel();
        java.lang.String[] strArray38 = new java.lang.String[] { "NUMBER 40.0 32", "STRING NUMBER 40.0\n", "Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 40.0\n    NUMBER 40.0\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 40.0\n    NUMBER 40.0\n", "NUMBER 40.0\n", "STRING NUMBER 40.0\n", "NUMBER 1.0\n", "NUMBER 1.0", "NUMBER 1.0", "hi!", "", "NUMBER 40.0 32" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet39);
        boolean boolean42 = node1.isFor();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isReturn();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(0, "NUMBER 1.0\n");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoIfMissingFrom(node36);
        node38.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(40, node44, 100, 100);
        boolean boolean48 = node38.isEquivalentToTyped(node44);
        com.google.javascript.rhino.Node node49 = node19.srcref(node38);
        node4.addChildrenToBack(node38);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean24 = node23.isGetProp();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        boolean boolean26 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node27 = node1.copyInformationFrom(node23);
        boolean boolean28 = node23.isNE();
        boolean boolean29 = node23.isAssign();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean32 = node31.isGetProp();
        boolean boolean33 = node31.isUnscopedQualifiedName();
        boolean boolean34 = node31.isAssignAdd();
        java.lang.String str35 = node31.toString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node54 = node37.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node55 = node31.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node56 = node55.cloneNode();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        boolean boolean68 = node58.isVoid();
        boolean boolean69 = node58.isCall();
        int int70 = node58.getSourcePosition();
        boolean boolean71 = node58.isAnd();
        com.google.javascript.rhino.Node node72 = node56.useSourceInfoIfMissingFrom(node58);
        com.google.javascript.rhino.Node node73 = node23.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int76 = node75.getChildCount();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node79 = node78.removeChildren();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node82 = node81.removeChildren();
        java.lang.String str83 = node78.checkTreeEquals(node81);
        boolean boolean84 = node78.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = node78.getJSDocInfo();
        boolean boolean86 = node78.isDebugger();
        boolean boolean87 = node78.isTrue();
        com.google.javascript.rhino.Node node88 = node75.copyInformationFrom(node78);
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node91 = node90.removeChildren();
        com.google.javascript.rhino.Node node92 = node75.useSourceInfoIfMissingFrom(node90);
        node92.putBooleanProp(31, true);
        boolean boolean96 = node92.isBreak();
        boolean boolean97 = node92.isCall();
        com.google.javascript.rhino.Node node98 = node58.copyInformationFrom(node92);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder99 = node92.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 40.0" + "'", str35, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSDocInfo85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder99);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(35, "Node tree inequality:\nTree1:\nNUMBER 16.0\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: NUMBER 16.0\n\n\nSubtree2: NUMBER 40.0\n", (int) (short) -1, 4095);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        boolean boolean30 = node14.isQualifiedName();
        boolean boolean31 = node14.hasMoreThanOneChild();
        int int33 = node14.getIntProp(47);
        boolean boolean34 = node14.isName();
        node14.setDouble((double) 30);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        double double17 = node6.getDouble();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        java.util.Set<java.lang.String> strSet25 = node19.getDirectives();
        int int26 = node6.getIndexOfChild(node19);
        int int27 = node19.getSourcePosition();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(31, node19, (int) (short) 0, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(40, node33, 100, 100);
        int int37 = node33.getLineno();
        boolean boolean38 = node33.isFunction();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        node68.setSourceEncodedPositionForTree((int) (short) 0);
        node68.setLineno((int) ' ');
        boolean boolean73 = node68.isCatch();
        boolean boolean74 = node68.isDebugger();
        com.google.javascript.rhino.Node node75 = node43.srcrefTree(node68);
        boolean boolean76 = node75.isNE();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int79 = node78.getChildCount();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node82 = node81.removeChildren();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node85 = node84.removeChildren();
        java.lang.String str86 = node81.checkTreeEquals(node84);
        boolean boolean87 = node81.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node81.getJSDocInfo();
        boolean boolean89 = node81.isDebugger();
        boolean boolean90 = node81.isTrue();
        com.google.javascript.rhino.Node node91 = node78.copyInformationFrom(node81);
        boolean boolean92 = node81.isHook();
        boolean boolean93 = node81.isCall();
        java.lang.String str94 = node81.toStringTree();
        boolean boolean95 = node81.isNE();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(12, node30, node33, node75, node81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 40.0d + "'", double17 == 40.0d);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "NUMBER 40.0\n" + "'", str94, "NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        node4.putBooleanProp(38, false);
        node4.setVarArgs(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node25 = node1.getLastChild();
        int int26 = node1.getSourcePosition();
        com.google.javascript.rhino.Node node27 = node1.cloneNode();
        boolean boolean28 = node27.isFunction();
        boolean boolean29 = node27.isComma();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node16.isFalse();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node24.setStaticSourceFile(staticSourceFile35);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        boolean boolean47 = node41.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node41.getJSDocInfo();
        boolean boolean49 = node41.isDebugger();
        boolean boolean50 = node41.isTrue();
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node41);
        node24.addChildrenToBack(node51);
        boolean boolean53 = node24.isComma();
        int int54 = node24.getCharno();
        boolean boolean55 = node24.isDec();
        boolean boolean56 = node24.isNew();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean60 = node59.isFalse();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100, node59, 4, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            node16.replaceChildAfter(node24, node63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node36.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        int int32 = node1.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node1.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        boolean boolean16 = node4.isTypeOf();
        boolean boolean17 = node4.isSwitch();
        boolean boolean18 = node4.isCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isComma();
        node4.setCharno((int) (short) 1);
        com.google.javascript.rhino.Node node36 = node4.getLastSibling();
        int int37 = node36.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node25 = node1.getLastChild();
        int int26 = node1.getSourcePosition();
        node1.removeProp(38);
        int int29 = node1.getSourceOffset();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        double double49 = node38.getDouble();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = null;
        node54.setJSDocInfo(jSDocInfo65);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 0, node32, node38, node54);
        boolean boolean68 = node1.isEquivalentTo(node38);
        boolean boolean69 = node1.isWith();
        boolean boolean70 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node71 = node1.getFirstChild();
        node1.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 40.0d + "'", double49 == 40.0d);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        java.util.Set<java.lang.String> strSet23 = node17.getDirectives();
        int int24 = node4.getIndexOfChild(node17);
        boolean boolean25 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        java.lang.String str35 = node30.checkTreeEquals(node33);
        boolean boolean36 = node30.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node30.getJSDocInfo();
        boolean boolean38 = node30.isDebugger();
        boolean boolean39 = node30.isTrue();
        com.google.javascript.rhino.Node node40 = node27.copyInformationFrom(node30);
        boolean boolean41 = node30.isHook();
        boolean boolean42 = node30.isRegExp();
        boolean boolean43 = node30.isUnscopedQualifiedName();
        boolean boolean44 = node30.isNumber();
        com.google.javascript.rhino.Node node45 = node4.srcref(node30);
        // The following exception was thrown during execution in test generation
        try {
            node45.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        int int4 = node1.getIntProp(45);
        boolean boolean5 = node1.isOnlyModifiesThisCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterable6);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.putIntProp((-1), (int) (byte) -1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        java.lang.String str38 = node33.checkTreeEquals(node36);
        com.google.javascript.rhino.Node node39 = node28.useSourceInfoFromForTree(node36);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node28.getAncestors();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("NUMBER 40.0\n");
        java.lang.String str43 = node42.toString();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int47 = node46.getChildCount();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int50 = node49.getChildCount();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        java.lang.String str57 = node52.checkTreeEquals(node55);
        boolean boolean58 = node52.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = node52.getJSDocInfo();
        boolean boolean60 = node52.isDebugger();
        boolean boolean61 = node52.isTrue();
        com.google.javascript.rhino.Node node62 = node49.copyInformationFrom(node52);
        double double63 = node52.getDouble();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int66 = node65.getChildCount();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node69 = node68.removeChildren();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node72 = node71.removeChildren();
        java.lang.String str73 = node68.checkTreeEquals(node71);
        boolean boolean74 = node68.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = node68.getJSDocInfo();
        boolean boolean76 = node68.isDebugger();
        boolean boolean77 = node68.isTrue();
        com.google.javascript.rhino.Node node78 = node65.copyInformationFrom(node68);
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = null;
        node68.setJSDocInfo(jSDocInfo79);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (byte) 0, node46, node52, node68);
        boolean boolean82 = node52.isAdd();
        int int83 = node52.getSourcePosition();
        boolean boolean84 = node52.isRegExp();
        node52.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node87 = node52.getParent();
        boolean boolean88 = node87.isFromExterns();
        int int89 = node87.getLineno();
        node42.addChildToBack(node87);
        boolean boolean91 = node87.isCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node92 = node28.clonePropsFrom(node87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Node has existing properties.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "STRING NUMBER 40.0\n" + "'", str43, "STRING NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSDocInfo59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 40.0d + "'", double63 == 40.0d);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSDocInfo75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        boolean boolean24 = node1.isObjectLit();
        node1.setSourceEncodedPositionForTree(47);
        node1.setLength(50);
        boolean boolean29 = node1.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        node52.setSourceEncodedPositionForTree((int) (short) 0);
        node52.setLineno((int) ' ');
        boolean boolean57 = node52.isCatch();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        java.lang.String str64 = node59.checkTreeEquals(node62);
        com.google.javascript.rhino.Node node65 = node52.useSourceInfoIfMissingFrom(node59);
        boolean boolean66 = node59.isTrue();
        com.google.javascript.rhino.Node node67 = node2.useSourceInfoIfMissingFrom(node59);
        node2.putIntProp(23, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = node2.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 23");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node30 = node14.getLastSibling();
        boolean boolean31 = node14.isQuotedString();
        boolean boolean32 = node14.isCall();
        com.google.javascript.rhino.InputId inputId33 = null;
        node14.setInputId(inputId33);
        node14.setCharno(42);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.setSourceEncodedPosition((int) (short) -1);
        boolean boolean19 = node5.isThrow();
        java.util.Set<java.lang.String> strSet20 = node5.getDirectives();
        boolean boolean21 = node5.isIn();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(48, node5, 36, (-1));
        int int25 = node24.getCharno();
        // The following exception was thrown during execution in test generation
        try {
            node24.setSideEffectFlags(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 48");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        boolean boolean50 = node49.isComma();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean53 = node52.isGetProp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        node68.setSourceEncodedPositionForTree((int) (short) 0);
        int int72 = node68.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node73 = node52.useSourceInfoFromForTree(node68);
        boolean boolean74 = node73.isContinue();
        com.google.javascript.rhino.Node node75 = node49.srcref(node73);
        com.google.javascript.rhino.Node node76 = node4.useSourceInfoFrom(node49);
        boolean boolean77 = node49.isTypeOf();
        int int78 = node49.getLineno();
        node49.setSourceEncodedPositionForTree(37);
        boolean boolean81 = node49.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node4 = node3.cloneNode();
        boolean boolean5 = node3.isTry();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        boolean boolean7 = node6.isContinue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING ", 1, 8);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder4 = node3.new FileLevelJsDocBuilder();
        boolean boolean5 = node3.isFromExterns();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setThrows();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node1.siblings();
        boolean boolean25 = node1.isCall();
        boolean boolean26 = node1.isExprResult();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoIfMissingFrom(node36);
        node38.putBooleanProp(31, true);
        boolean boolean42 = node38.isBreak();
        boolean boolean43 = node38.isOptionalArg();
        com.google.javascript.rhino.Node node44 = node18.useSourceInfoFromForTree(node38);
        boolean boolean45 = node44.isInc();
        boolean boolean46 = node44.isFromExterns();
        node44.addSuppression("Node tree inequality:\nTree1:\nNUMBER 16.0\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: NUMBER 16.0\n\n\nSubtree2: NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        node52.setSourceEncodedPositionForTree((int) (short) 0);
        node52.setLineno((int) ' ');
        boolean boolean57 = node52.isCatch();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        java.lang.String str64 = node59.checkTreeEquals(node62);
        com.google.javascript.rhino.Node node65 = node52.useSourceInfoIfMissingFrom(node59);
        boolean boolean66 = node59.isTrue();
        com.google.javascript.rhino.Node node67 = node2.useSourceInfoIfMissingFrom(node59);
        boolean boolean68 = node59.isNew();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node69 = node59.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean3 = node2.isTrue();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 0, node2);
        node4.setType(31);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        int int3 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearAllFlags();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        node46.setSourceEncodedPositionForTree((int) (short) 0);
        node46.setLineno((int) ' ');
        boolean boolean51 = node46.isCatch();
        boolean boolean52 = node46.isDebugger();
        com.google.javascript.rhino.Node node53 = node21.srcrefTree(node46);
        boolean boolean54 = node21.isString();
        boolean boolean55 = node21.isQualifiedName();
        boolean boolean56 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node57 = node14.useSourceInfoFromForTree(node21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = node21.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 40.0 32 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        node4.setVarArgs(false);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        double double55 = node44.getDouble();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int58 = node57.getChildCount();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        boolean boolean68 = node60.isDebugger();
        boolean boolean69 = node60.isTrue();
        com.google.javascript.rhino.Node node70 = node57.copyInformationFrom(node60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        node60.setJSDocInfo(jSDocInfo71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 0, node38, node44, node60);
        java.lang.String str74 = node44.toStringTree();
        com.google.javascript.rhino.Node node75 = node4.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean76 = node44.isString();
        boolean boolean77 = node44.isBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 40.0d + "'", double55 == 40.0d);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER 40.0\n" + "'", str74, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.setSourceEncodedPosition((int) (short) -1);
        boolean boolean18 = node4.isThrow();
        java.util.Set<java.lang.String> strSet19 = node4.getDirectives();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node4.getStaticSourceFile();
        boolean boolean21 = node4.isVar();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        boolean boolean39 = node4.isQualifiedName();
        boolean boolean40 = node4.isScript();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(35);
        com.google.javascript.rhino.Node node43 = node4.copyInformationFromForTree(node42);
        boolean boolean44 = node4.isDec();
        int int45 = node4.getSourcePosition();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        boolean boolean13 = node1.isAssignAdd();
        node1.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int18 = node17.getChildCount();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        com.google.javascript.rhino.Node node30 = node17.copyInformationFrom(node20);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        node45.setSourceEncodedPositionForTree((int) (short) 0);
        node45.setLineno((int) ' ');
        boolean boolean50 = node45.isCatch();
        boolean boolean51 = node45.isDebugger();
        com.google.javascript.rhino.Node node52 = node20.srcrefTree(node45);
        boolean boolean53 = node20.isString();
        boolean boolean54 = node20.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node20.siblings();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(40, node58, 100, 100);
        boolean boolean62 = node20.hasChild(node58);
        boolean boolean63 = node1.hasChild(node58);
        node58.addSuppression("");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node25 = node1.getLastChild();
        int int26 = node1.getSourcePosition();
        com.google.javascript.rhino.Node node27 = node1.cloneNode();
        boolean boolean28 = node1.isAssign();
        boolean boolean29 = node1.isBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        int int7 = sideEffectFlags0.valueOf();
        int int8 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setThrows();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(40, "STRING NUMBER 40.0\n", 4, 52);
        boolean boolean5 = node4.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isDefaultCase();
        boolean boolean22 = node14.isThrow();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        node28.setStaticSourceFile(staticSourceFile39);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int43 = node42.getChildCount();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        java.lang.String str50 = node45.checkTreeEquals(node48);
        boolean boolean51 = node45.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = node45.getJSDocInfo();
        boolean boolean53 = node45.isDebugger();
        boolean boolean54 = node45.isTrue();
        com.google.javascript.rhino.Node node55 = node42.copyInformationFrom(node45);
        node28.addChildrenToBack(node55);
        boolean boolean57 = node28.isComma();
        int int58 = node28.getCharno();
        node14.putProp(51, (java.lang.Object) node28);
        node28.setVarArgs(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        boolean boolean35 = node4.isRegExp();
        // The following exception was thrown during execution in test generation
        try {
            node4.setString("NUMBER 0.0\n    NUMBER 40.0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 40.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        node1.setLineno((int) (byte) 10);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node25 = node1.getLastChild();
        int int26 = node1.getSourcePosition();
        boolean boolean27 = node1.isFunction();
        node1.setVarArgs(false);
        int int30 = node1.getChildCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '#', nodeArray7, (int) (short) 1, 1);
        boolean boolean11 = node10.isInc();
        com.google.javascript.rhino.InputId inputId12 = node10.getInputId();
        boolean boolean13 = node10.isVarArgs();
        boolean boolean14 = node10.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node10.getJSDocInfo();
        boolean boolean16 = node10.isWith();
        java.lang.String str17 = node10.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GETELEM 1" + "'", str17, "GETELEM 1");
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.isQualifiedName();
        node18.putIntProp((int) 'a', (int) (short) 1);
        boolean boolean23 = node18.isFromExterns();
        boolean boolean24 = node18.isRegExp();
        boolean boolean25 = node18.isFromExterns();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        boolean boolean37 = node27.isVoid();
        boolean boolean38 = node27.isIf();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        com.google.javascript.rhino.Node node54 = node27.clonePropsFrom(node40);
        com.google.javascript.rhino.Node node55 = node18.srcref(node40);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = node4.getExistingIntProp(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 31");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        boolean boolean29 = node1.isTrue();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        boolean boolean45 = node31.wasEmptyNode();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int49 = node48.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node48.siblings();
        node48.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] { node48 };
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) '#', nodeArray53, (int) (short) 1, 1);
        boolean boolean57 = node56.isInc();
        node31.addChildrenToFront(node56);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int61 = node60.getChildCount();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        java.lang.String str68 = node63.checkTreeEquals(node66);
        boolean boolean69 = node63.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = node63.getJSDocInfo();
        boolean boolean71 = node63.isDebugger();
        boolean boolean72 = node63.isTrue();
        com.google.javascript.rhino.Node node73 = node60.copyInformationFrom(node63);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int76 = node75.getChildCount();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node79 = node78.removeChildren();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node82 = node81.removeChildren();
        java.lang.String str83 = node78.checkTreeEquals(node81);
        boolean boolean84 = node78.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = node78.getJSDocInfo();
        boolean boolean86 = node78.isDebugger();
        boolean boolean87 = node78.isTrue();
        com.google.javascript.rhino.Node node88 = node75.copyInformationFrom(node78);
        node88.setSourceEncodedPositionForTree((int) (short) 0);
        node88.setLineno((int) ' ');
        boolean boolean93 = node88.isCatch();
        boolean boolean94 = node88.isDebugger();
        com.google.javascript.rhino.Node node95 = node63.srcrefTree(node88);
        node56.addChildrenToFront(node88);
        com.google.javascript.rhino.Node node97 = node1.clonePropsFrom(node88);
        boolean boolean98 = node1.isCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSDocInfo85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        boolean boolean39 = node4.isQualifiedName();
        boolean boolean40 = node4.isScript();
        com.google.javascript.rhino.Node node41 = node4.getLastSibling();
        com.google.javascript.rhino.Node node42 = node41.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = node42.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node26 = node25.cloneNode();
        node25.setCharno(159748);
        node25.setDouble((double) 100.0f);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        boolean boolean28 = node2.isOnlyModifiesThisCall();
        boolean boolean29 = node2.isDec();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean32 = node31.isFalse();
        boolean boolean33 = node31.isVarArgs();
        node2.addChildrenToFront(node31);
        node31.putIntProp(0, 0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        int int71 = node22.getType();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node76 = node75.cloneNode();
        boolean boolean77 = node75.isTry();
        com.google.javascript.rhino.Node node78 = node22.clonePropsFrom(node75);
        node75.putBooleanProp((-1), true);
        com.google.javascript.rhino.Node node82 = null;
        boolean boolean83 = node75.hasChild(node82);
        node75.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 39 + "'", int71 == 39);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        int int71 = node22.getType();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node76 = node75.cloneNode();
        boolean boolean77 = node75.isTry();
        com.google.javascript.rhino.Node node78 = node22.clonePropsFrom(node75);
        boolean boolean79 = node78.isInc();
        boolean boolean80 = node78.isNew();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile81 = null;
        node78.setStaticSourceFile(staticSourceFile81);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 39 + "'", int71 == 39);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isDebugger();
        boolean boolean12 = node3.isTrue();
        boolean boolean13 = node3.isVoid();
        boolean boolean14 = node3.isIf();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node30 = node3.clonePropsFrom(node16);
        boolean boolean31 = node3.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node3.getJsDocBuilderForNode();
        boolean boolean33 = node3.isInstanceOf();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(48, node3);
        boolean boolean35 = node34.isWith();
        boolean boolean36 = node34.isCase();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(43, node34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = node34.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 48");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("STRING ", 10, (int) (short) 100);
        com.google.javascript.rhino.Node node24 = node4.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node25 = node23.cloneTree();
        com.google.javascript.rhino.Node node27 = node23.getAncestor(16);
        // The following exception was thrown during execution in test generation
        try {
            node27.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER 40.0 [length: 39]\n\n\nTree2:\nSHEQ\n\n\nSubtree1: NUMBER 40.0 [length: 39]\n\n\nSubtree2: SHEQ\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        boolean boolean33 = node1.isEmpty();
        boolean boolean34 = node1.isParamList();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node30 = node14.getLastSibling();
        java.lang.String str31 = node30.toStringTree();
        boolean boolean32 = node30.isSwitch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 40.0\n" + "'", str31, "NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        node2.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 42, 32, 4095);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        int int55 = node34.getLength();
        boolean boolean56 = node34.isLabel();
        com.google.javascript.rhino.Node node57 = node1.copyInformationFrom(node34);
        boolean boolean58 = node57.isGetProp();
        boolean boolean59 = node57.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node6.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node6.addChildrenToBack(node33);
        boolean boolean35 = node6.isComma();
        boolean boolean36 = node6.isGetProp();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray37, 4, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray37, 38, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "STRING NUMBER 40.0\n");
        node2.setLineno((int) (byte) 100);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node27.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int31 = node30.getChildCount();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        java.lang.String str38 = node33.checkTreeEquals(node36);
        boolean boolean39 = node33.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node33.getJSDocInfo();
        boolean boolean41 = node33.isDebugger();
        boolean boolean42 = node33.isTrue();
        com.google.javascript.rhino.Node node43 = node30.copyInformationFrom(node33);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        com.google.javascript.rhino.Node node47 = node30.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = null;
        node30.setJSDocInfo(jSDocInfo48);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean52 = node30.hasChild(node51);
        com.google.javascript.rhino.Node node53 = node27.srcref(node51);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int18 = node17.getChildCount();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        com.google.javascript.rhino.Node node30 = node17.copyInformationFrom(node20);
        node30.setSourceEncodedPositionForTree((int) (short) 0);
        node30.setLineno((int) ' ');
        boolean boolean35 = node30.isCatch();
        boolean boolean36 = node30.isDebugger();
        com.google.javascript.rhino.Node node37 = node5.srcrefTree(node30);
        boolean boolean38 = node5.isString();
        boolean boolean39 = node5.isQualifiedName();
        boolean boolean40 = node5.isQualifiedName();
        boolean boolean41 = node5.isScript();
        com.google.javascript.rhino.Node node42 = node5.getLastSibling();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("NUMBER 40.0", 36, (int) (short) 100);
        int int47 = node46.getSourceOffset();
        boolean boolean48 = node46.isIn();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, node46);
        boolean boolean50 = node49.isContinue();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(40, node24, 100, 100);
        boolean boolean28 = node18.isEquivalentToTyped(node24);
        boolean boolean29 = node18.isCatch();
        boolean boolean30 = node18.isSwitch();
        boolean boolean31 = node18.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        int int55 = node34.getLength();
        boolean boolean56 = node34.isLabel();
        com.google.javascript.rhino.Node node57 = node1.copyInformationFrom(node34);
        java.lang.String str58 = node57.getSourceFileName();
        boolean boolean59 = node57.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        boolean boolean19 = node8.isNE();
        node1.putProp(31, (java.lang.Object) boolean19);
        boolean boolean21 = node1.isAnd();
        com.google.javascript.rhino.Node node22 = node1.getFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.isName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node18.getJsDocBuilderForNode();
        java.lang.Class<?> wildcardClass21 = fileLevelJsDocBuilder20.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 40.0", 36, (int) (short) 100);
        com.google.javascript.rhino.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        boolean boolean20 = node19.isComma();
        boolean boolean21 = node19.isComma();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        boolean boolean25 = node23.isThrow();
        node23.setSourceEncodedPositionForTree(35);
        boolean boolean28 = node23.isCase();
        node19.addChildToBack(node23);
        com.google.javascript.rhino.Node node30 = node3.useSourceInfoIfMissingFromForTree(node23);
        boolean boolean31 = node30.isNoSideEffectsCall();
        java.lang.String str32 = node30.getSourceFileName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "hi!");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = null;
        node7.setJSDocInfo(jSDocInfo18);
        int int20 = node7.getLength();
        node2.addChildToFront(node7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = node2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 48");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        int int2 = sideEffectFlags1.valueOf();
        int int3 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        node46.setSourceEncodedPositionForTree((int) (short) 0);
        node46.setLineno((int) ' ');
        boolean boolean51 = node46.isCatch();
        boolean boolean52 = node46.isDebugger();
        com.google.javascript.rhino.Node node53 = node21.srcrefTree(node46);
        boolean boolean54 = node21.isString();
        boolean boolean55 = node21.isQualifiedName();
        boolean boolean56 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node57 = node14.useSourceInfoFromForTree(node21);
        node21.putIntProp(10, (int) (byte) 10);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "hi!");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = null;
        node7.setJSDocInfo(jSDocInfo18);
        int int20 = node7.getLength();
        node2.addChildToFront(node7);
        int int22 = node7.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        boolean boolean16 = node4.isArrayLit();
        boolean boolean17 = node4.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node4.setJSType(jSType18);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean18 = node17.isGetProp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node33.setSourceEncodedPositionForTree((int) (short) 0);
        int int37 = node33.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node38 = node17.useSourceInfoFromForTree(node33);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node14.srcref(node38);
        java.lang.String str41 = node40.getSourceFileName();
        boolean boolean42 = node40.isOr();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isAnd();
        boolean boolean20 = node14.hasMoreThanOneChild();
        boolean boolean21 = node14.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int9 = node8.getChildCount();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        java.lang.String str16 = node11.checkTreeEquals(node14);
        boolean boolean17 = node11.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node11.getJSDocInfo();
        boolean boolean19 = node11.isDebugger();
        boolean boolean20 = node11.isTrue();
        com.google.javascript.rhino.Node node21 = node8.copyInformationFrom(node11);
        boolean boolean22 = node11.isVoid();
        com.google.javascript.rhino.Node node23 = node11.getParent();
        node4.addChildToFront(node11);
        boolean boolean25 = node11.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        java.lang.String str35 = node30.checkTreeEquals(node33);
        boolean boolean36 = node30.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node30.getJSDocInfo();
        boolean boolean38 = node30.isDebugger();
        boolean boolean39 = node30.isTrue();
        com.google.javascript.rhino.Node node40 = node27.copyInformationFrom(node30);
        boolean boolean41 = node30.isVoid();
        boolean boolean42 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node43 = node11.srcrefTree(node30);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        node1.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        com.google.javascript.rhino.jstype.JSType jSType29 = node14.getJSType();
        boolean boolean30 = node14.isVar();
        java.lang.String str34 = node14.toString(false, false, false);
        boolean boolean35 = node14.isSwitch();
        node14.setIsSyntheticBlock(true);
        node14.detachChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER 40.0" + "'", str34, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        int int55 = node34.getLength();
        boolean boolean56 = node34.isLabel();
        com.google.javascript.rhino.Node node57 = node1.copyInformationFrom(node34);
        boolean boolean58 = node57.isGetProp();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int70 = node69.getChildCount();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node76 = node75.removeChildren();
        java.lang.String str77 = node72.checkTreeEquals(node75);
        boolean boolean78 = node72.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = node72.getJSDocInfo();
        boolean boolean80 = node72.isDebugger();
        boolean boolean81 = node72.isTrue();
        com.google.javascript.rhino.Node node82 = node69.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node85 = node84.removeChildren();
        com.google.javascript.rhino.Node node86 = node69.useSourceInfoIfMissingFrom(node84);
        node86.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node90 = node60.useSourceInfoIfMissingFrom(node86);
        boolean boolean91 = node86.isGetProp();
        com.google.javascript.rhino.Node node92 = node57.srcrefTree(node86);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSDocInfo79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node37.isCatch();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        boolean boolean47 = node40.isNull();
        boolean boolean48 = node40.isIn();
        com.google.javascript.rhino.Node node49 = node37.copyInformationFromForTree(node40);
        boolean boolean50 = node40.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        node1.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        boolean boolean17 = node7.isFromExterns();
        boolean boolean18 = node7.isOptionalArg();
        com.google.javascript.rhino.Node node19 = node1.copyInformationFrom(node7);
        boolean boolean20 = node7.isHook();
        boolean boolean21 = node7.isFromExterns();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        boolean boolean33 = node23.isVoid();
        boolean boolean34 = node23.isIf();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node50 = node23.clonePropsFrom(node36);
        node50.setCharno(1);
        boolean boolean54 = node50.getBooleanProp((int) (short) -1);
        boolean boolean55 = node50.isName();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int58 = node57.getChildCount();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        boolean boolean68 = node60.isDebugger();
        boolean boolean69 = node60.isTrue();
        com.google.javascript.rhino.Node node70 = node57.copyInformationFrom(node60);
        node70.setSourceEncodedPositionForTree((int) (short) 0);
        int int74 = node70.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = null;
        node70.setStaticSourceFile(staticSourceFile75);
        int int77 = node70.getSourceOffset();
        boolean boolean78 = node50.hasChild(node70);
        node7.addChildToFront(node70);
        boolean boolean80 = node7.isGetElem();
        com.google.javascript.rhino.jstype.JSType jSType81 = null;
        node7.setJSType(jSType81);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        boolean boolean30 = node14.isTry();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        boolean boolean42 = node32.isVoid();
        boolean boolean43 = node32.isIf();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        com.google.javascript.rhino.Node node59 = node32.clonePropsFrom(node45);
        boolean boolean60 = node45.isRegExp();
        java.lang.String str61 = node45.toString();
        com.google.javascript.rhino.InputId inputId62 = null;
        node45.setInputId(inputId62);
        com.google.javascript.rhino.Node node64 = node14.srcref(node45);
        int int65 = node14.getChildCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "NUMBER 40.0" + "'", str61, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, 37, (int) (byte) 1);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 42);
        com.google.javascript.rhino.Node node6 = node3.useSourceInfoFromForTree(node5);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = null;
        node5.setStaticSourceFile(staticSourceFile7);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node26 = node25.cloneNode();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean29 = node28.isFalse();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        java.lang.String str36 = node31.checkTreeEquals(node34);
        boolean boolean37 = node31.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node31.getJSDocInfo();
        boolean boolean39 = node31.isDebugger();
        boolean boolean40 = node31.isTrue();
        boolean boolean41 = node31.isVoid();
        boolean boolean42 = node31.isIf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node58 = node31.clonePropsFrom(node44);
        com.google.javascript.rhino.jstype.JSType jSType59 = node44.getJSType();
        boolean boolean60 = node44.isVar();
        com.google.javascript.rhino.Node node61 = node44.getLastSibling();
        boolean boolean62 = node61.isNew();
        com.google.javascript.rhino.Node node63 = node28.useSourceInfoFrom(node61);
        boolean boolean64 = node63.isWith();
        node26.addChildToBack(node63);
        // The following exception was thrown during execution in test generation
        try {
            node63.setString("NUMBER 40.0");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 36.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(29, 39, 4);
        int int4 = node3.getSourcePosition();
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.appendStringTree(appendable5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 159748 + "'", int4 == 159748);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "hi!");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = null;
        node7.setJSDocInfo(jSDocInfo18);
        int int20 = node7.getLength();
        node2.addChildToFront(node7);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(32, "NUMBER 40.0\n    NUMBER 40.0\n");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        boolean boolean36 = node26.isVoid();
        boolean boolean37 = node26.isIf();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node53 = node26.clonePropsFrom(node39);
        node53.putIntProp((-1), (int) (byte) -1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        com.google.javascript.rhino.Node node64 = node53.useSourceInfoFromForTree(node61);
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChildAfter(node24, node61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        java.lang.String str17 = node4.getSourceFileName();
        boolean boolean18 = node4.isEmpty();
        boolean boolean19 = node4.isLabelName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node4.getAncestors();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 16, 30);
        com.google.javascript.rhino.Node node25 = node4.srcrefTree(node24);
        boolean boolean26 = node24.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(16, 0, 53);
        boolean boolean4 = node3.isScript();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        node52.setSourceEncodedPositionForTree((int) (short) 0);
        node52.setLineno((int) ' ');
        boolean boolean57 = node52.isAnd();
        int int58 = node52.getChildCount();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int63 = node62.getChildCount();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node69 = node68.removeChildren();
        java.lang.String str70 = node65.checkTreeEquals(node68);
        boolean boolean71 = node65.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = node65.getJSDocInfo();
        boolean boolean73 = node65.isDebugger();
        boolean boolean74 = node65.isTrue();
        com.google.javascript.rhino.Node node75 = node62.copyInformationFrom(node65);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node78 = node77.removeChildren();
        com.google.javascript.rhino.Node node79 = node62.useSourceInfoIfMissingFrom(node77);
        node52.addChildrenToBack(node77);
        boolean boolean81 = node8.isEquivalentToTyped(node52);
        com.google.javascript.rhino.jstype.JSType jSType82 = null;
        node52.setJSType(jSType82);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        node15.setSourceEncodedPositionForTree((int) (short) 0);
        int int19 = node15.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node15.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node15.isNot();
        node15.setDouble((double) 10L);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int27 = node26.getChildCount();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        java.lang.String str34 = node29.checkTreeEquals(node32);
        boolean boolean35 = node29.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node29.getJSDocInfo();
        boolean boolean37 = node29.isDebugger();
        boolean boolean38 = node29.isTrue();
        com.google.javascript.rhino.Node node39 = node26.copyInformationFrom(node29);
        node39.setSourceEncodedPositionForTree((int) (short) 0);
        node39.setLineno((int) ' ');
        boolean boolean44 = node39.isCatch();
        boolean boolean45 = node39.isDebugger();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int48 = node47.getChildCount();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node54 = node53.removeChildren();
        java.lang.String str55 = node50.checkTreeEquals(node53);
        boolean boolean56 = node50.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = node50.getJSDocInfo();
        boolean boolean58 = node50.isDebugger();
        boolean boolean59 = node50.isTrue();
        com.google.javascript.rhino.Node node60 = node47.copyInformationFrom(node50);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node64 = node47.useSourceInfoIfMissingFrom(node62);
        boolean boolean65 = node47.isTypeOf();
        com.google.javascript.rhino.Node node66 = node39.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node69 = node68.removeChildren();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node72 = node71.removeChildren();
        java.lang.String str73 = node68.checkTreeEquals(node71);
        boolean boolean74 = node68.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = node68.getJSDocInfo();
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        node68.setDirectives((java.util.Set<java.lang.String>) strSet79);
        node66.setDirectives((java.util.Set<java.lang.String>) strSet79);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet79);
        boolean boolean84 = node15.isCatch();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(159748, node15, 100, (int) (byte) 10);
        int int88 = node15.getSourceOffset();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSDocInfo57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSDocInfo75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(40, node2, 100, 100);
        boolean boolean6 = node5.isComma();
        node5.setCharno(35);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int12 = node11.getChildCount();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        double double28 = node17.getDouble();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int31 = node30.getChildCount();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        java.lang.String str38 = node33.checkTreeEquals(node36);
        boolean boolean39 = node33.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node33.getJSDocInfo();
        boolean boolean41 = node33.isDebugger();
        boolean boolean42 = node33.isTrue();
        com.google.javascript.rhino.Node node43 = node30.copyInformationFrom(node33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = null;
        node33.setJSDocInfo(jSDocInfo44);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 0, node11, node17, node33);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int49 = node48.getChildCount();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        java.lang.String str56 = node51.checkTreeEquals(node54);
        boolean boolean57 = node51.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = node51.getJSDocInfo();
        boolean boolean59 = node51.isDebugger();
        boolean boolean60 = node51.isTrue();
        com.google.javascript.rhino.Node node61 = node48.copyInformationFrom(node51);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node65 = node48.useSourceInfoIfMissingFrom(node63);
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = null;
        node48.setJSDocInfo(jSDocInfo66);
        node48.detachChildren();
        int int69 = node48.getLength();
        node48.putIntProp(1, (int) (byte) -1);
        com.google.javascript.rhino.Node node73 = node46.useSourceInfoIfMissingFrom(node48);
        boolean boolean74 = node48.isSyntheticBlock();
        node5.addChildrenToFront(node48);
        boolean boolean76 = node5.isFromExterns();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable77 = node5.children();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 40.0d + "'", double28 == 40.0d);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSDocInfo58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(nodeIterable77);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        node15.setSourceEncodedPositionForTree((int) (short) 0);
        node15.setLineno((int) ' ');
        boolean boolean20 = node15.isCatch();
        boolean boolean21 = node15.isDebugger();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoIfMissingFrom(node38);
        boolean boolean41 = node23.isTypeOf();
        com.google.javascript.rhino.Node node42 = node15.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] { node15 };
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(47, nodeArray43, 39, (int) (byte) 1);
        boolean boolean47 = node46.isNE();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isDebugger();
        boolean boolean12 = node3.isTrue();
        boolean boolean13 = node3.isVoid();
        boolean boolean14 = node3.isIf();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node30 = node3.clonePropsFrom(node16);
        com.google.javascript.rhino.jstype.JSType jSType31 = node16.getJSType();
        com.google.javascript.rhino.Node node32 = node1.srcref(node16);
        boolean boolean33 = node32.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        int int4 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        boolean boolean7 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        com.google.javascript.rhino.Node node21 = node14.getParent();
        boolean boolean22 = node14.isLocalResultCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        int int55 = node34.getLength();
        boolean boolean56 = node34.isLabel();
        com.google.javascript.rhino.Node node57 = node1.copyInformationFrom(node34);
        int int58 = node34.getChildCount();
        boolean boolean59 = node34.isLabelName();
        boolean boolean60 = node34.isNot();
        node34.putBooleanProp((int) (byte) -1, false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        boolean boolean21 = node1.isNot();
        node1.setSourceEncodedPositionForTree(4);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node27.siblings();
        node27.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] { node27 };
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) '#', nodeArray32, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        boolean boolean47 = node41.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node41.getJSDocInfo();
        boolean boolean49 = node41.isDebugger();
        boolean boolean50 = node41.isTrue();
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node41);
        node51.setSourceEncodedPositionForTree((int) (short) 0);
        node51.setLineno((int) ' ');
        boolean boolean56 = node51.isCatch();
        boolean boolean57 = node51.isDebugger();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int60 = node59.getChildCount();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        java.lang.String str67 = node62.checkTreeEquals(node65);
        boolean boolean68 = node62.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node62.getJSDocInfo();
        boolean boolean70 = node62.isDebugger();
        boolean boolean71 = node62.isTrue();
        com.google.javascript.rhino.Node node72 = node59.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        com.google.javascript.rhino.Node node76 = node59.useSourceInfoIfMissingFrom(node74);
        boolean boolean77 = node59.isTypeOf();
        com.google.javascript.rhino.Node node78 = node51.copyInformationFromForTree(node59);
        node35.putProp((int) (byte) 1, (java.lang.Object) node51);
        boolean boolean80 = node35.isTrue();
        boolean boolean81 = node35.isGetterDef();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(12, node35);
        com.google.javascript.rhino.Node node83 = node1.useSourceInfoFromForTree(node82);
        int int84 = node82.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setMutatesArguments();
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        node1.setType(159748);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        boolean boolean24 = node1.isObjectLit();
        node1.setSourceEncodedPositionForTree(47);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node54 = node37.useSourceInfoIfMissingFrom(node52);
        node54.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node58 = node28.useSourceInfoIfMissingFrom(node54);
        node1.addChildToBack(node28);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(48, "hi!");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int65 = node64.getChildCount();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node71 = node70.removeChildren();
        java.lang.String str72 = node67.checkTreeEquals(node70);
        boolean boolean73 = node67.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = node67.getJSDocInfo();
        boolean boolean75 = node67.isDebugger();
        boolean boolean76 = node67.isTrue();
        com.google.javascript.rhino.Node node77 = node64.copyInformationFrom(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = null;
        node67.setJSDocInfo(jSDocInfo78);
        int int80 = node67.getLength();
        node62.addChildToFront(node67);
        com.google.javascript.rhino.Node node82 = node67.cloneTree();
        boolean boolean83 = node67.isFromExterns();
        com.google.javascript.rhino.Node node84 = node28.copyInformationFrom(node67);
        com.google.javascript.rhino.InputId inputId85 = node67.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSDocInfo74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(inputId85);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isDebugger();
        boolean boolean12 = node3.isTrue();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node18.setJSDocInfo(jSDocInfo29);
        node3.putProp((int) (short) 0, (java.lang.Object) node18);
        com.google.javascript.rhino.Node node32 = node1.copyInformationFrom(node3);
        com.google.javascript.rhino.InputId inputId33 = node3.getInputId();
        boolean boolean34 = node3.isWhile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        boolean boolean17 = node16.isComma();
        node16.putIntProp(37, 36);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(0, node16);
        int int22 = node21.getSideEffectFlags();
        boolean boolean23 = node21.isObjectLit();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder26 = node25.getJsDocBuilderForNode();
        boolean boolean27 = node25.isQualifiedName();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        java.lang.String str34 = node29.checkTreeEquals(node32);
        boolean boolean35 = node29.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node29.getJSDocInfo();
        boolean boolean37 = node29.isDebugger();
        boolean boolean38 = node29.isTrue();
        boolean boolean39 = node29.isVoid();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        node54.setSourceEncodedPositionForTree((int) (short) 0);
        int int58 = node54.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        node54.setStaticSourceFile(staticSourceFile59);
        boolean boolean61 = node54.isNot();
        boolean boolean62 = node54.isQuotedString();
        com.google.javascript.rhino.Node node63 = node29.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 16);
        com.google.javascript.rhino.Node node66 = node65.getLastSibling();
        boolean boolean67 = node66.isTry();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(38, node21, node25, node54, node66, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            node66.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(12);
        boolean boolean2 = node1.isFor();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = node1.getExistingIntProp(41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 41");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 36);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        boolean boolean3 = node1.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        node1.setJSType(jSType4);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable6 = node1.getAncestors();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ancestorIterable6);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 4, 30);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((-1), node4, (int) (short) -1, 36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node7.children();
        boolean boolean9 = node7.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node1.getJSDocInfo();
        boolean boolean30 = node1.isParamList();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getLength();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        boolean boolean29 = node19.isVoid();
        boolean boolean30 = node4.isEquivalentTo(node19);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        node15.setSourceEncodedPositionForTree((int) (short) 0);
        node15.setLineno((int) ' ');
        boolean boolean20 = node15.isCatch();
        boolean boolean21 = node15.isDebugger();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoIfMissingFrom(node38);
        boolean boolean41 = node23.isTypeOf();
        com.google.javascript.rhino.Node node42 = node15.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] { node15 };
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(47, nodeArray43, 39, (int) (byte) 1);
        boolean boolean47 = node46.isGetElem();
        node46.setLength((int) (short) 0);
        node46.setSourceEncodedPositionForTree(54);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        com.google.javascript.rhino.Node node31 = node1.getAncestor((int) (short) 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("NUMBER 40.0\n");
        java.lang.String str34 = node33.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node35 = node31.srcrefTree(node33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "STRING NUMBER 40.0\n" + "'", str34, "STRING NUMBER 40.0\n");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        boolean boolean20 = node4.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node4.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator22 = nodeIterable21.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator23 = nodeIterable21.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(nodeSpliterator22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        boolean boolean22 = node18.isHook();
        boolean boolean23 = node18.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 4, 30);
        boolean boolean4 = node3.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setThrows();
        int int4 = sideEffectFlags0.valueOf();
        int int5 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 48);
        com.google.javascript.rhino.Node node2 = node1.getParent();
        boolean boolean3 = node1.isReturn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        double double17 = node6.getDouble();
        boolean boolean18 = node6.isNull();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        boolean boolean34 = node23.isNE();
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean39 = node38.isGetProp();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        node54.setSourceEncodedPositionForTree((int) (short) 0);
        int int58 = node54.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node59 = node38.useSourceInfoFromForTree(node54);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 100, node6, node23, node54, node61, 46, (int) (byte) 1);
        int int72 = node23.getType();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node77 = node76.cloneNode();
        boolean boolean78 = node76.isTry();
        com.google.javascript.rhino.Node node79 = node23.clonePropsFrom(node76);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node76);
        boolean boolean81 = node76.isGetElem();
        com.google.javascript.rhino.Node node82 = node76.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 40.0d + "'", double17 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 39 + "'", int72 == 39);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        boolean boolean30 = node14.isQualifiedName();
        boolean boolean31 = node14.hasMoreThanOneChild();
        node14.setWasEmptyNode(false);
        node14.setLength((int) (byte) -1);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node14.children();
        node14.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        java.lang.String str18 = node13.checkTreeEquals(node16);
        boolean boolean19 = node13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node13.getJSDocInfo();
        boolean boolean21 = node13.isDebugger();
        boolean boolean22 = node13.isTrue();
        com.google.javascript.rhino.Node node23 = node10.copyInformationFrom(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoIfMissingFrom(node25);
        node27.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        boolean boolean42 = node32.isVoid();
        boolean boolean43 = node32.isIf();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        com.google.javascript.rhino.Node node59 = node32.clonePropsFrom(node45);
        boolean boolean60 = node45.isRegExp();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        java.lang.String str68 = node63.checkTreeEquals(node66);
        boolean boolean69 = node63.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = node63.getJSDocInfo();
        boolean boolean71 = node63.isDebugger();
        boolean boolean72 = node63.isTrue();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int76 = node75.getChildCount();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node79 = node78.removeChildren();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node82 = node81.removeChildren();
        java.lang.String str83 = node78.checkTreeEquals(node81);
        boolean boolean84 = node78.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = node78.getJSDocInfo();
        boolean boolean86 = node78.isDebugger();
        boolean boolean87 = node78.isTrue();
        com.google.javascript.rhino.Node node88 = node75.copyInformationFrom(node78);
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = null;
        node78.setJSDocInfo(jSDocInfo89);
        node63.putProp((int) (short) 0, (java.lang.Object) node78);
        node45.putProp(0, (java.lang.Object) node78);
        boolean boolean93 = node27.isEquivalentToTyped(node45);
        com.google.javascript.rhino.Node node94 = node1.useSourceInfoFrom(node45);
        boolean boolean95 = node94.isUnscopedQualifiedName();
        int int96 = node94.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSDocInfo85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        java.util.Set<java.lang.String> strSet23 = node17.getDirectives();
        int int24 = node4.getIndexOfChild(node17);
        int int25 = node17.getSourcePosition();
        boolean boolean26 = node17.isDo();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int30 = node29.getChildCount();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        double double46 = node35.getDouble();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int49 = node48.getChildCount();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        java.lang.String str56 = node51.checkTreeEquals(node54);
        boolean boolean57 = node51.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = node51.getJSDocInfo();
        boolean boolean59 = node51.isDebugger();
        boolean boolean60 = node51.isTrue();
        com.google.javascript.rhino.Node node61 = node48.copyInformationFrom(node51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = null;
        node51.setJSDocInfo(jSDocInfo62);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 0, node29, node35, node51);
        boolean boolean65 = node17.hasChild(node29);
        com.google.javascript.rhino.Node node66 = node29.cloneNode();
        boolean boolean67 = node29.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 40.0d + "'", double46 == 40.0d);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSDocInfo58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        int int4 = node1.getIntProp(36);
        boolean boolean5 = node1.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        int int32 = node1.getIntProp((int) (byte) 100);
        node1.setType(54);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        boolean boolean38 = node36.isThrow();
        boolean boolean39 = node1.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node node40 = node36.cloneTree();
        boolean boolean41 = node40.isWhile();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int44 = node43.getChildCount();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        java.lang.String str51 = node46.checkTreeEquals(node49);
        boolean boolean52 = node46.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = node46.getJSDocInfo();
        boolean boolean54 = node46.isDebugger();
        boolean boolean55 = node46.isTrue();
        com.google.javascript.rhino.Node node56 = node43.copyInformationFrom(node46);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node60 = node43.useSourceInfoIfMissingFrom(node58);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = null;
        node43.setJSDocInfo(jSDocInfo61);
        node43.detachChildren();
        int int64 = node43.getLength();
        boolean boolean65 = node43.isTry();
        boolean boolean66 = node43.isContinue();
        com.google.javascript.rhino.Node node67 = node43.getLastChild();
        int int68 = node43.getSourcePosition();
        node43.removeProp(38);
        int int71 = node43.getSourceOffset();
        node40.addChildToFront(node43);
        boolean boolean73 = node43.isInstanceOf();
        node43.setOptionalArg(false);
        node43.putIntProp(0, 100);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSDocInfo53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(40, node2, 100, 100);
        boolean boolean6 = node5.hasChildren();
        boolean boolean7 = node5.isQuotedString();
        boolean boolean8 = node5.isIn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setReturnsTainted();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isVoid();
        java.lang.String str16 = node4.getSourceFileName();
        boolean boolean17 = node4.isContinue();
        int int18 = node4.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 100);
        boolean boolean2 = node1.isLabel();
        com.google.javascript.rhino.Node node3 = node1.getLastSibling();
        java.lang.String str4 = node3.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 100.0\n" + "'", str4, "NUMBER 100.0\n");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node3.siblings();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) '#', nodeArray8, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        node27.setSourceEncodedPositionForTree((int) (short) 0);
        node27.setLineno((int) ' ');
        boolean boolean32 = node27.isCatch();
        boolean boolean33 = node27.isDebugger();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        boolean boolean53 = node35.isTypeOf();
        com.google.javascript.rhino.Node node54 = node27.copyInformationFromForTree(node35);
        node11.putProp((int) (byte) 1, (java.lang.Object) node27);
        boolean boolean56 = node11.isTrue();
        boolean boolean57 = node11.isGetterDef();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(12, node11);
        node58.putIntProp(0, 23);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node58.setJSType(jSType62);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node1.addChildToFront(node26);
        boolean boolean28 = node1.isDebugger();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node29 = node1.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean24 = node2.hasChild(node23);
        boolean boolean25 = node2.isObjectLit();
        node2.setSourceEncodedPositionForTree(47);
        node2.setLength(50);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(42, node2);
        boolean boolean31 = node30.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 36, 1, 4095);
        com.google.javascript.rhino.InputId inputId4 = node3.getInputId();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(inputId4);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        boolean boolean4 = node1.isReturn();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        boolean boolean16 = node6.isFromExterns();
        boolean boolean17 = node6.isOptionalArg();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        boolean boolean29 = node19.isInstanceOf();
        int int30 = node19.getType();
        boolean boolean31 = node19.isAssignAdd();
        int int32 = node6.getIndexOfChild(node19);
        node6.setOptionalArg(true);
        com.google.javascript.rhino.Node node35 = node1.copyInformationFrom(node6);
        boolean boolean36 = node1.isQuotedString();
        com.google.javascript.rhino.Node node38 = node1.getAncestor((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 39 + "'", int30 == 39);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean3 = node2.isFalse();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100, node2, 4, (int) (short) 100);
        boolean boolean7 = node6.isParamList();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = null;
        node3.setJSDocInfo(jSDocInfo21);
        node3.detachChildren();
        int int24 = node3.getLength();
        boolean boolean25 = node3.isLabel();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(51, node3, 12, 38);
        boolean boolean29 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        java.lang.String str36 = node31.checkTreeEquals(node34);
        boolean boolean37 = node31.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node31.getJSDocInfo();
        boolean boolean39 = node31.isDebugger();
        boolean boolean40 = node31.isTrue();
        boolean boolean41 = node31.isVoid();
        boolean boolean42 = node31.isIf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node58 = node31.clonePropsFrom(node44);
        node58.setCharno(1);
        boolean boolean62 = node58.getBooleanProp((int) (short) -1);
        boolean boolean63 = node58.isName();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int66 = node65.getChildCount();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node69 = node68.removeChildren();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node72 = node71.removeChildren();
        java.lang.String str73 = node68.checkTreeEquals(node71);
        boolean boolean74 = node68.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = node68.getJSDocInfo();
        boolean boolean76 = node68.isDebugger();
        boolean boolean77 = node68.isTrue();
        com.google.javascript.rhino.Node node78 = node65.copyInformationFrom(node68);
        boolean boolean79 = node68.isHook();
        com.google.javascript.rhino.Node node80 = node58.copyInformationFrom(node68);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(46, node3, node68, 46, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSDocInfo75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 52);
        boolean boolean2 = node1.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        boolean boolean20 = node4.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node4.siblings();
        int int22 = node4.getChildCount();
        boolean boolean23 = node4.isBlock();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        java.util.Set<java.lang.String> strSet31 = node25.getDirectives();
        node25.setIsSyntheticBlock(true);
        boolean boolean34 = node25.isFalse();
        boolean boolean35 = node25.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.useSourceInfoFromForTree(node25);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isOptionalArg();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        java.lang.String str19 = node14.checkTreeEquals(node17);
        boolean boolean20 = node14.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node14.getJSDocInfo();
        boolean boolean22 = node14.isDebugger();
        boolean boolean23 = node14.isTrue();
        boolean boolean24 = node14.isVoid();
        boolean boolean25 = node14.isIf();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        java.lang.String str35 = node30.checkTreeEquals(node33);
        boolean boolean36 = node30.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node30.getJSDocInfo();
        boolean boolean38 = node30.isDebugger();
        boolean boolean39 = node30.isTrue();
        com.google.javascript.rhino.Node node40 = node27.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node41 = node14.clonePropsFrom(node27);
        boolean boolean42 = node27.isRegExp();
        boolean boolean43 = node27.isTry();
        node1.addChildrenToFront(node27);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        java.lang.String str35 = node4.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 40.0\n    NUMBER 40.0\n" + "'", str35, "NUMBER 40.0\n    NUMBER 40.0\n");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node1.addChildToFront(node26);
        boolean boolean28 = node1.hasChildren();
        boolean boolean29 = node1.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node30 = node1.cloneNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        java.lang.String str17 = node14.getSourceFileName();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean20 = node19.isGetProp();
        boolean boolean21 = node19.isUnscopedQualifiedName();
        boolean boolean22 = node19.isAssignAdd();
        java.lang.String str23 = node19.toString();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node node43 = node19.copyInformationFrom(node25);
        boolean boolean44 = node19.isRegExp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node19.getJSDocInfo();
        com.google.javascript.rhino.Node node46 = node14.copyInformationFrom(node19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = null;
        node14.setJSDocInfo(jSDocInfo47);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 40.0" + "'", str23, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        int int71 = node22.getType();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node76 = node75.cloneNode();
        boolean boolean77 = node75.isTry();
        com.google.javascript.rhino.Node node78 = node22.clonePropsFrom(node75);
        boolean boolean79 = node75.isVoid();
        java.lang.String str83 = node75.toString(false, true, true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 39 + "'", int71 == 39);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "BITXOR" + "'", str83, "BITXOR");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node30 = node14.getLastSibling();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node30.setJSType(jSType31);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        java.lang.String str18 = node13.checkTreeEquals(node16);
        boolean boolean19 = node13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node13.getJSDocInfo();
        boolean boolean21 = node13.isDebugger();
        boolean boolean22 = node13.isTrue();
        com.google.javascript.rhino.Node node23 = node10.copyInformationFrom(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoIfMissingFrom(node25);
        node27.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        boolean boolean42 = node32.isVoid();
        boolean boolean43 = node32.isIf();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        com.google.javascript.rhino.Node node59 = node32.clonePropsFrom(node45);
        boolean boolean60 = node45.isRegExp();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        java.lang.String str68 = node63.checkTreeEquals(node66);
        boolean boolean69 = node63.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = node63.getJSDocInfo();
        boolean boolean71 = node63.isDebugger();
        boolean boolean72 = node63.isTrue();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int76 = node75.getChildCount();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node79 = node78.removeChildren();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node82 = node81.removeChildren();
        java.lang.String str83 = node78.checkTreeEquals(node81);
        boolean boolean84 = node78.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = node78.getJSDocInfo();
        boolean boolean86 = node78.isDebugger();
        boolean boolean87 = node78.isTrue();
        com.google.javascript.rhino.Node node88 = node75.copyInformationFrom(node78);
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = null;
        node78.setJSDocInfo(jSDocInfo89);
        node63.putProp((int) (short) 0, (java.lang.Object) node78);
        node45.putProp(0, (java.lang.Object) node78);
        boolean boolean93 = node27.isEquivalentToTyped(node45);
        com.google.javascript.rhino.Node node94 = node1.useSourceInfoFrom(node45);
        boolean boolean95 = node1.isName();
        int int96 = node1.getLineno();
        boolean boolean97 = node1.isLabelName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSDocInfo85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        java.lang.String str18 = node13.checkTreeEquals(node16);
        boolean boolean19 = node13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node13.getJSDocInfo();
        boolean boolean21 = node13.isDebugger();
        boolean boolean22 = node13.isTrue();
        com.google.javascript.rhino.Node node23 = node10.copyInformationFrom(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoIfMissingFrom(node25);
        node27.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node31 = node1.useSourceInfoIfMissingFrom(node27);
        boolean boolean32 = node27.isGetProp();
        int int34 = node27.getIntProp((-1));
        boolean boolean35 = node27.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        int int55 = node34.getLength();
        boolean boolean56 = node34.isLabel();
        com.google.javascript.rhino.Node node57 = node1.copyInformationFrom(node34);
        boolean boolean58 = node57.isGetProp();
        boolean boolean59 = node57.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.putIntProp((-1), (int) (byte) -1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        java.lang.String str38 = node33.checkTreeEquals(node36);
        com.google.javascript.rhino.Node node39 = node28.useSourceInfoFromForTree(node36);
        boolean boolean40 = node39.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        boolean boolean28 = node18.isVoid();
        boolean boolean29 = node18.isIf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node45 = node18.clonePropsFrom(node31);
        com.google.javascript.rhino.jstype.JSType jSType46 = node31.getJSType();
        boolean boolean47 = node31.isVar();
        com.google.javascript.rhino.Node node48 = node31.getLastSibling();
        boolean boolean49 = node31.isGetElem();
        com.google.javascript.rhino.Node node50 = node4.useSourceInfoFrom(node31);
        boolean boolean51 = node4.isTypeOf();
        // The following exception was thrown during execution in test generation
        try {
            node4.setString("STRING hi! 16\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 40.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node6.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node6.addChildrenToBack(node33);
        boolean boolean35 = node6.isComma();
        boolean boolean36 = node6.isGetProp();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray37, 4, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(2, nodeArray37, 8, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node1.getJSDocInfo();
        com.google.javascript.rhino.InputId inputId31 = null;
        node1.setInputId(inputId31);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isNull();
        node1.setLineno(36);
        com.google.javascript.rhino.Node node34 = node1.getChildAtIndex((int) (byte) 0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        node19.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(40, node25, 100, 100);
        boolean boolean29 = node19.isEquivalentToTyped(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node48 = node31.useSourceInfoIfMissingFrom(node46);
        node48.putBooleanProp(31, true);
        boolean boolean52 = node48.isHook();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int67 = node66.getChildCount();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node70 = node69.removeChildren();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        java.lang.String str74 = node69.checkTreeEquals(node72);
        boolean boolean75 = node69.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = node69.getJSDocInfo();
        boolean boolean77 = node69.isDebugger();
        boolean boolean78 = node69.isTrue();
        com.google.javascript.rhino.Node node79 = node66.copyInformationFrom(node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = null;
        node69.setJSDocInfo(jSDocInfo80);
        node54.putProp((int) (short) 0, (java.lang.Object) node69);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100, node19, node48, node54, 0, 15);
        boolean boolean86 = node19.isGetElem();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node15.isComma();
        node15.putIntProp(37, 36);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(0, node15);
        int int21 = node20.getSideEffectFlags();
        boolean boolean22 = node20.isObjectLit();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int25 = node24.getChildCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node37 = node24.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node38 = null;
        int int39 = node37.getIndexOfChild(node38);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int57 = node56.getChildCount();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        java.lang.String str64 = node59.checkTreeEquals(node62);
        boolean boolean65 = node59.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = node59.getJSDocInfo();
        boolean boolean67 = node59.isDebugger();
        boolean boolean68 = node59.isTrue();
        com.google.javascript.rhino.Node node69 = node56.copyInformationFrom(node59);
        node69.setSourceEncodedPositionForTree((int) (short) 0);
        node69.setLineno((int) ' ');
        boolean boolean74 = node69.isCatch();
        boolean boolean75 = node69.isDebugger();
        com.google.javascript.rhino.Node node76 = node44.srcrefTree(node69);
        boolean boolean77 = node44.isString();
        boolean boolean78 = node44.isQualifiedName();
        boolean boolean79 = node44.isQualifiedName();
        com.google.javascript.rhino.Node node80 = node37.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node83 = node82.removeChildren();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node86 = node85.removeChildren();
        java.lang.String str87 = node82.checkTreeEquals(node85);
        java.util.Set<java.lang.String> strSet88 = node82.getDirectives();
        node82.setIsSyntheticBlock(true);
        boolean boolean91 = node82.isFalse();
        boolean boolean92 = node82.isDebugger();
        boolean boolean93 = node82.isDefaultCase();
        int int94 = node82.getSourceOffset();
        // The following exception was thrown during execution in test generation
        try {
            node20.addChildAfter(node80, node82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(strSet88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        int int4 = node1.getLength();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        node19.setSourceEncodedPositionForTree((int) (short) 0);
        node19.setLineno((int) ' ');
        boolean boolean24 = node19.isAnd();
        boolean boolean25 = node19.isHook();
        com.google.javascript.rhino.Node node26 = node1.srcref(node19);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = null;
        node43.setJSDocInfo(jSDocInfo54);
        node28.putProp((int) (short) 0, (java.lang.Object) node43);
        boolean boolean57 = node28.isIf();
        int int59 = node28.getIntProp((int) (byte) 100);
        int int60 = node28.getSideEffectFlags();
        java.lang.String str61 = node19.checkTreeEquals(node28);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.setSourceEncodedPosition((int) (short) -1);
        boolean boolean18 = node4.isThrow();
        java.util.Set<java.lang.String> strSet19 = node4.getDirectives();
        boolean boolean20 = node4.isDo();
        boolean boolean21 = node4.isVar();
        boolean boolean22 = node4.isOr();
        boolean boolean23 = node4.isTry();
        boolean boolean24 = node4.isVar();
        boolean boolean25 = node4.isDo();
        java.lang.String str26 = node4.getSourceFileName();
        node4.setVarArgs(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        boolean boolean4 = node1.isReturn();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        boolean boolean16 = node6.isFromExterns();
        boolean boolean17 = node6.isOptionalArg();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        boolean boolean29 = node19.isInstanceOf();
        int int30 = node19.getType();
        boolean boolean31 = node19.isAssignAdd();
        int int32 = node6.getIndexOfChild(node19);
        node6.setOptionalArg(true);
        com.google.javascript.rhino.Node node35 = node1.copyInformationFrom(node6);
        com.google.javascript.rhino.InputId inputId36 = node1.getInputId();
        boolean boolean37 = node1.isParamList();
        boolean boolean38 = node1.isFromExterns();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean41 = node40.isGetProp();
        boolean boolean42 = node40.isUnscopedQualifiedName();
        boolean boolean43 = node40.isAssignAdd();
        java.lang.String str44 = node40.toString();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int47 = node46.getChildCount();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        java.lang.String str54 = node49.checkTreeEquals(node52);
        boolean boolean55 = node49.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node49.getJSDocInfo();
        boolean boolean57 = node49.isDebugger();
        boolean boolean58 = node49.isTrue();
        com.google.javascript.rhino.Node node59 = node46.copyInformationFrom(node49);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node63 = node46.useSourceInfoIfMissingFrom(node61);
        com.google.javascript.rhino.Node node64 = node40.copyInformationFrom(node46);
        boolean boolean65 = node40.isIf();
        node1.addChildToFront(node40);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 39 + "'", int30 == 39);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(inputId36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER 40.0" + "'", str44, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        boolean boolean50 = node49.isComma();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean53 = node52.isGetProp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        node68.setSourceEncodedPositionForTree((int) (short) 0);
        int int72 = node68.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node73 = node52.useSourceInfoFromForTree(node68);
        boolean boolean74 = node73.isContinue();
        com.google.javascript.rhino.Node node75 = node49.srcref(node73);
        com.google.javascript.rhino.Node node76 = node4.useSourceInfoFrom(node49);
        boolean boolean77 = node49.isTypeOf();
        int int78 = node49.getLineno();
        boolean boolean79 = node49.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean18 = node17.isGetProp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node33.setSourceEncodedPositionForTree((int) (short) 0);
        int int37 = node33.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node38 = node17.useSourceInfoFromForTree(node33);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node14.srcref(node38);
        boolean boolean41 = node14.isIn();
        java.lang.String str45 = node14.toString(false, false, false);
        com.google.javascript.rhino.Node node46 = node14.getLastChild();
        boolean boolean47 = node14.isGetElem();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 40.0" + "'", str45, "NUMBER 40.0");
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor16 = ancestorIterable15.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(nodeItor16);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean25 = node24.isGetProp();
        boolean boolean26 = node24.isUnscopedQualifiedName();
        boolean boolean27 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node28 = node2.copyInformationFrom(node24);
        boolean boolean29 = node24.isNE();
        com.google.javascript.rhino.Node node30 = node24.getLastChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        boolean boolean42 = node32.isInstanceOf();
        int int43 = node32.getType();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node62 = node45.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = null;
        node45.setJSDocInfo(jSDocInfo63);
        node45.detachChildren();
        node32.addChildToBack(node45);
        node32.setDouble(0.0d);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node32.getJSDocInfo();
        java.lang.String str70 = node32.toStringTree();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 42, 32, 4095);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(2, node30, node32, node74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 39 + "'", int43 == 39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "NUMBER 0.0\n    NUMBER 40.0\n" + "'", str70, "NUMBER 0.0\n    NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node74);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isHook();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node31 = node14.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = null;
        node14.setJSDocInfo(jSDocInfo32);
        node14.detachChildren();
        node1.addChildToBack(node14);
        node1.setDouble(0.0d);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node42.setStaticSourceFile(staticSourceFile53);
        java.lang.String str55 = node42.getSourceFileName();
        boolean boolean56 = node42.isEmpty();
        boolean boolean57 = node42.isLocalResultCall();
        int int58 = node42.getSourcePosition();
        boolean boolean59 = node42.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int62 = node61.getChildCount();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        java.lang.String str69 = node64.checkTreeEquals(node67);
        boolean boolean70 = node64.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = node64.getJSDocInfo();
        boolean boolean72 = node64.isDebugger();
        boolean boolean73 = node64.isTrue();
        com.google.javascript.rhino.Node node74 = node61.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node77 = node76.removeChildren();
        com.google.javascript.rhino.Node node78 = node61.useSourceInfoIfMissingFrom(node76);
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = null;
        node61.setJSDocInfo(jSDocInfo79);
        node61.detachChildren();
        int int82 = node61.getLength();
        boolean boolean83 = node61.isTry();
        boolean boolean84 = node61.isContinue();
        com.google.javascript.rhino.Node node85 = node61.getLastChild();
        int int86 = node61.getSourcePosition();
        com.google.javascript.rhino.Node node87 = node61.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenAfter(node42, node61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSDocInfo71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        java.lang.String str17 = node4.getSourceFileName();
        boolean boolean18 = node4.isEmpty();
        boolean boolean19 = node4.isLabelName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node4.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor21 = ancestorIterable20.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertNotNull(nodeItor21);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        boolean boolean8 = node1.isWhile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(47, "NUMBER 40.0", 53, 48);
        node4.setLineno(8);
        boolean boolean7 = node4.isQuotedString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 16);
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable3 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor4 = ancestorIterable3.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(ancestorIterable3);
        org.junit.Assert.assertNotNull(nodeItor4);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        boolean boolean30 = node2.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node2.getJsDocBuilderForNode();
        boolean boolean32 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node2);
        java.lang.String str34 = node2.toStringTree();
        com.google.javascript.rhino.InputId inputId35 = null;
        node2.setInputId(inputId35);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER 40.0\n" + "'", str34, "NUMBER 40.0\n");
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        java.util.Set<java.lang.String> strSet9 = node3.getDirectives();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int12 = node11.getChildCount();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        java.lang.String str19 = node14.checkTreeEquals(node17);
        boolean boolean20 = node14.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node14.getJSDocInfo();
        boolean boolean22 = node14.isDebugger();
        boolean boolean23 = node14.isTrue();
        com.google.javascript.rhino.Node node24 = node11.copyInformationFrom(node14);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node28 = node11.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node11.setJSDocInfo(jSDocInfo29);
        node11.detachChildren();
        int int32 = node11.getLength();
        boolean boolean33 = node11.isTry();
        boolean boolean34 = node11.isContinue();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node11.addChildToFront(node36);
        boolean boolean38 = node11.isAnd();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node40.siblings();
        node40.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        java.lang.String str51 = node46.checkTreeEquals(node49);
        boolean boolean52 = node46.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = node46.getJSDocInfo();
        boolean boolean54 = node46.isDebugger();
        boolean boolean55 = node46.isTrue();
        boolean boolean56 = node46.isFromExterns();
        boolean boolean57 = node46.isOptionalArg();
        com.google.javascript.rhino.Node node58 = node40.copyInformationFrom(node46);
        boolean boolean59 = node46.isHook();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        boolean boolean64 = node63.isDebugger();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder65 = node63.new FileLevelJsDocBuilder();
        boolean boolean66 = node63.isLabel();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int69 = node68.getChildCount();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node72 = node71.removeChildren();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        java.lang.String str76 = node71.checkTreeEquals(node74);
        boolean boolean77 = node71.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = node71.getJSDocInfo();
        boolean boolean79 = node71.isDebugger();
        boolean boolean80 = node71.isTrue();
        com.google.javascript.rhino.Node node81 = node68.copyInformationFrom(node71);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node84 = node83.removeChildren();
        com.google.javascript.rhino.Node node85 = node68.useSourceInfoIfMissingFrom(node83);
        node85.putBooleanProp(31, true);
        boolean boolean89 = node85.isBreak();
        boolean boolean90 = node85.isCall();
        boolean boolean91 = node85.isTrue();
        com.google.javascript.rhino.Node[] nodeArray92 = new com.google.javascript.rhino.Node[] { node3, node11, node46, node63, node85 };
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(0, nodeArray92, 32, 29);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(46, nodeArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: duplicate child");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSDocInfo53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSDocInfo78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(nodeArray92);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        node1.addSuppression("Node tree inequality:\nTree1:\nNULL\n\n\nTree2:\nSTRING STRING  10\n\n\nSubtree1: NULL\n\n\nSubtree2: STRING STRING  10\n");
        com.google.javascript.rhino.Node node26 = node1.getFirstChild();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(40, node29, 100, 100);
        int int33 = node29.getLineno();
        boolean boolean34 = node29.isFalse();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node35 = node26.useSourceInfoFromForTree(node29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        boolean boolean6 = node1.isSyntheticBlock();
        com.google.javascript.rhino.Node node7 = node1.cloneNode();
        boolean boolean8 = node7.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node30 = node14.getLastSibling();
        java.lang.String str31 = node30.toStringTree();
        java.lang.Object obj33 = node30.getProp(35);
        boolean boolean34 = node30.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 40.0\n" + "'", str31, "NUMBER 40.0\n");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setThrows();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setCharno(1);
        boolean boolean32 = node28.getBooleanProp((int) (short) -1);
        boolean boolean33 = node28.isName();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        boolean boolean49 = node38.isHook();
        com.google.javascript.rhino.Node node50 = node28.copyInformationFrom(node38);
        boolean boolean51 = node38.isBlock();
        boolean boolean52 = node38.isThrow();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isDebugger();
        boolean boolean12 = node3.isTrue();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node18.setJSDocInfo(jSDocInfo29);
        node3.putProp((int) (short) 0, (java.lang.Object) node18);
        com.google.javascript.rhino.Node node32 = node1.copyInformationFrom(node3);
        com.google.javascript.rhino.InputId inputId33 = node3.getInputId();
        boolean boolean34 = node3.isDefaultCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING ", 10, (int) (short) 100);
        com.google.javascript.rhino.InputId inputId4 = node3.getInputId();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(inputId4);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        boolean boolean8 = node1.isNull();
        boolean boolean9 = node1.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        boolean boolean30 = node15.isRegExp();
        java.lang.String str31 = node15.toString();
        com.google.javascript.rhino.InputId inputId32 = null;
        node15.setInputId(inputId32);
        node15.setSourceFileForTesting("NUMBER 1.0\n");
        com.google.javascript.rhino.Node node36 = node15.getNext();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(44, node15, (int) (short) 0, 49);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node15.setStaticSourceFile(staticSourceFile40);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 40.0" + "'", str31, "NUMBER 40.0");
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        boolean boolean28 = node2.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node30 = node2.getAncestor(46);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int18 = node17.getChildCount();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        com.google.javascript.rhino.Node node30 = node17.copyInformationFrom(node20);
        node30.setSourceEncodedPositionForTree((int) (short) 0);
        node30.setLineno((int) ' ');
        boolean boolean35 = node30.isCatch();
        boolean boolean36 = node30.isDebugger();
        com.google.javascript.rhino.Node node37 = node5.srcrefTree(node30);
        boolean boolean38 = node5.isString();
        boolean boolean39 = node5.isQualifiedName();
        boolean boolean40 = node5.isQualifiedName();
        boolean boolean41 = node5.isScript();
        com.google.javascript.rhino.Node node42 = node5.getLastSibling();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("NUMBER 40.0", 36, (int) (short) 100);
        int int47 = node46.getSourceOffset();
        boolean boolean48 = node46.isIn();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, node46);
        boolean boolean50 = node42.isAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(45);
        boolean boolean2 = node1.isNot();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        boolean boolean18 = node7.isNE();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        boolean boolean30 = node20.isVoid();
        boolean boolean31 = node20.isIf();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node47 = node20.clonePropsFrom(node33);
        boolean boolean48 = node20.isRegExp();
        boolean boolean49 = node20.isCall();
        java.lang.String str50 = node20.toString();
        boolean boolean51 = node7.isEquivalentToTyped(node20);
        java.lang.String str52 = node20.toStringTree();
        com.google.javascript.rhino.Node node53 = node1.copyInformationFrom(node20);
        node1.putBooleanProp(51, true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER 40.0" + "'", str50, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER 40.0\n" + "'", str52, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        int int39 = node8.getSourcePosition();
        boolean boolean40 = node8.isRegExp();
        node8.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = node8.getParent();
        boolean boolean44 = node43.isFromExterns();
        boolean boolean45 = node43.isAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        node8.setType(41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node8.getJSDocInfo();
        node8.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(jSDocInfo40);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.setSourceEncodedPosition((int) (short) -1);
        boolean boolean18 = node4.isThrow();
        java.util.Set<java.lang.String> strSet19 = node4.getDirectives();
        boolean boolean20 = node4.isIn();
        boolean boolean21 = node4.isFromExterns();
        boolean boolean22 = node4.isNot();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        node1.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        boolean boolean17 = node7.isFromExterns();
        boolean boolean18 = node7.isOptionalArg();
        com.google.javascript.rhino.Node node19 = node1.copyInformationFrom(node7);
        node1.setVarArgs(false);
        boolean boolean22 = node1.isWhile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.isQualifiedName();
        node18.putIntProp((int) 'a', (int) (short) 1);
        boolean boolean23 = node18.isFromExterns();
        boolean boolean24 = node18.isRegExp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean18 = node17.isGetProp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node33.setSourceEncodedPositionForTree((int) (short) 0);
        int int37 = node33.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node38 = node17.useSourceInfoFromForTree(node33);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node14.srcref(node38);
        java.lang.String str41 = node40.getSourceFileName();
        node40.setIsSyntheticBlock(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(47, "NUMBER 40.0", 53, 48);
        boolean boolean5 = node4.isLocalResultCall();
        boolean boolean6 = node4.isArrayLit();
        boolean boolean7 = node4.isComma();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node4.siblings();
        node4.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) '#', nodeArray9, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        node28.setSourceEncodedPositionForTree((int) (short) 0);
        node28.setLineno((int) ' ');
        boolean boolean33 = node28.isCatch();
        boolean boolean34 = node28.isDebugger();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        com.google.javascript.rhino.Node node53 = node36.useSourceInfoIfMissingFrom(node51);
        boolean boolean54 = node36.isTypeOf();
        com.google.javascript.rhino.Node node55 = node28.copyInformationFromForTree(node36);
        node12.putProp((int) (byte) 1, (java.lang.Object) node28);
        boolean boolean57 = node12.isTrue();
        boolean boolean58 = node12.isGetterDef();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(12, node12);
        boolean boolean60 = node59.isNE();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        node59.setStaticSourceFile(staticSourceFile61);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(31, node59);
        boolean boolean64 = node59.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setThrows();
        int int4 = sideEffectFlags0.valueOf();
        sideEffectFlags0.clearSideEffectFlags();
        boolean boolean6 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean2 = node1.isFalse();
        boolean boolean3 = node1.isVarArgs();
        com.google.javascript.rhino.InputId inputId4 = node1.getInputId();
        java.util.Set<java.lang.String> strSet5 = node1.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(inputId4);
        org.junit.Assert.assertNull(strSet5);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        node22.removeProp(29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = node22.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 1.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = node4.getNext();
        boolean boolean19 = node4.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }
}


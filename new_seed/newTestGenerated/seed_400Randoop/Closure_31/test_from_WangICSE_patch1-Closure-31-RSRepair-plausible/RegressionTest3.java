import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node31 = node14.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = null;
        node14.setJSDocInfo(jSDocInfo32);
        node14.detachChildren();
        node1.addChildToBack(node14);
        node1.setDouble(0.0d);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node39 = node1.getParent();
        node1.setIsSyntheticBlock(false);
        boolean boolean42 = node1.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isQualifiedName();
        boolean boolean25 = node1.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        int int55 = node34.getLength();
        boolean boolean56 = node34.isLabel();
        com.google.javascript.rhino.Node node57 = node1.copyInformationFrom(node34);
        boolean boolean58 = node57.isGetProp();
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        node57.setJSType(jSType59);
        node57.setCharno(24);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesThis();
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        java.lang.String str18 = node13.checkTreeEquals(node16);
        boolean boolean19 = node13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node13.getJSDocInfo();
        boolean boolean21 = node13.isDebugger();
        boolean boolean22 = node13.isTrue();
        com.google.javascript.rhino.Node node23 = node10.copyInformationFrom(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoIfMissingFrom(node25);
        node27.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        boolean boolean42 = node32.isVoid();
        boolean boolean43 = node32.isIf();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        com.google.javascript.rhino.Node node59 = node32.clonePropsFrom(node45);
        boolean boolean60 = node45.isRegExp();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        java.lang.String str68 = node63.checkTreeEquals(node66);
        boolean boolean69 = node63.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = node63.getJSDocInfo();
        boolean boolean71 = node63.isDebugger();
        boolean boolean72 = node63.isTrue();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int76 = node75.getChildCount();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node79 = node78.removeChildren();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node82 = node81.removeChildren();
        java.lang.String str83 = node78.checkTreeEquals(node81);
        boolean boolean84 = node78.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = node78.getJSDocInfo();
        boolean boolean86 = node78.isDebugger();
        boolean boolean87 = node78.isTrue();
        com.google.javascript.rhino.Node node88 = node75.copyInformationFrom(node78);
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = null;
        node78.setJSDocInfo(jSDocInfo89);
        node63.putProp((int) (short) 0, (java.lang.Object) node78);
        node45.putProp(0, (java.lang.Object) node78);
        boolean boolean93 = node27.isEquivalentToTyped(node45);
        com.google.javascript.rhino.Node node94 = node1.useSourceInfoFrom(node45);
        boolean boolean95 = node45.isNumber();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSDocInfo85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        int int4 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean24 = node23.isGetProp();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        boolean boolean26 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node27 = node1.copyInformationFrom(node23);
        boolean boolean28 = node23.isNE();
        com.google.javascript.rhino.Node node29 = node23.getLastChild();
        java.util.Set<java.lang.String> strSet30 = null;
        node23.setDirectives(strSet30);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node29);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node1.isQuotedString();
        boolean boolean20 = node1.isParamList();
        boolean boolean21 = node1.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, (int) (byte) 10, 43);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node3.setStaticSourceFile(staticSourceFile4);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        double double17 = node4.getDouble();
        boolean boolean18 = node4.isWith();
        boolean boolean19 = node4.isParamList();
        node4.setCharno((int) (byte) 0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 40.0d + "'", double17 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        node19.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(40, node25, 100, 100);
        boolean boolean29 = node19.isEquivalentToTyped(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node48 = node31.useSourceInfoIfMissingFrom(node46);
        node48.putBooleanProp(31, true);
        boolean boolean52 = node48.isHook();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int67 = node66.getChildCount();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node70 = node69.removeChildren();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        java.lang.String str74 = node69.checkTreeEquals(node72);
        boolean boolean75 = node69.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = node69.getJSDocInfo();
        boolean boolean77 = node69.isDebugger();
        boolean boolean78 = node69.isTrue();
        com.google.javascript.rhino.Node node79 = node66.copyInformationFrom(node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = null;
        node69.setJSDocInfo(jSDocInfo80);
        node54.putProp((int) (short) 0, (java.lang.Object) node69);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100, node19, node48, node54, 0, 15);
        boolean boolean86 = node54.isDefaultCase();
        boolean boolean87 = node54.isAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        double double17 = node6.getDouble();
        boolean boolean18 = node6.isNull();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        boolean boolean34 = node23.isNE();
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean39 = node38.isGetProp();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        node54.setSourceEncodedPositionForTree((int) (short) 0);
        int int58 = node54.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node59 = node38.useSourceInfoFromForTree(node54);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 100, node6, node23, node54, node61, 46, (int) (byte) 1);
        int int72 = node23.getType();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node77 = node76.cloneNode();
        boolean boolean78 = node76.isTry();
        com.google.javascript.rhino.Node node79 = node23.clonePropsFrom(node76);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node76);
        // The following exception was thrown during execution in test generation
        try {
            node76.setSideEffectFlags(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got BITXOR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 40.0d + "'", double17 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 39 + "'", int72 == 39);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node1.addChildToFront(node26);
        node1.detachChildren();
        java.lang.String str29 = node1.toStringTree();
        com.google.javascript.rhino.Node node30 = node1.getNext();
        java.lang.String str31 = node1.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER 40.0\n" + "'", str29, "NUMBER 40.0\n");
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 40.0" + "'", str31, "NUMBER 40.0");
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        int int71 = node22.getType();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node76 = node75.cloneNode();
        boolean boolean77 = node75.isTry();
        com.google.javascript.rhino.Node node78 = node22.clonePropsFrom(node75);
        boolean boolean79 = node78.isInc();
        boolean boolean80 = node78.isName();
        boolean boolean81 = node78.isQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 39 + "'", int71 == 39);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        boolean boolean32 = node22.isInstanceOf();
        int int33 = node22.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node35.setJSDocInfo(jSDocInfo53);
        node35.detachChildren();
        node22.addChildToBack(node35);
        node22.setDouble(0.0d);
        node5.addChildToFront(node22);
        boolean boolean60 = node22.isTypeOf();
        boolean boolean61 = node22.isCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '#', nodeArray7, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        node26.setSourceEncodedPositionForTree((int) (short) 0);
        node26.setLineno((int) ' ');
        boolean boolean31 = node26.isCatch();
        boolean boolean32 = node26.isDebugger();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        boolean boolean52 = node34.isTypeOf();
        com.google.javascript.rhino.Node node53 = node26.copyInformationFromForTree(node34);
        node10.putProp((int) (byte) 1, (java.lang.Object) node26);
        boolean boolean55 = node10.isBreak();
        boolean boolean56 = node10.isExprResult();
        java.lang.Appendable appendable57 = null;
        // The following exception was thrown during execution in test generation
        try {
            node10.appendStringTree(appendable57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node15.isComma();
        node15.putIntProp(37, 36);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(0, node15);
        boolean boolean21 = node15.isCall();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        boolean boolean37 = node36.isComma();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean40 = node39.isGetProp();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int43 = node42.getChildCount();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        java.lang.String str50 = node45.checkTreeEquals(node48);
        boolean boolean51 = node45.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = node45.getJSDocInfo();
        boolean boolean53 = node45.isDebugger();
        boolean boolean54 = node45.isTrue();
        com.google.javascript.rhino.Node node55 = node42.copyInformationFrom(node45);
        node55.setSourceEncodedPositionForTree((int) (short) 0);
        int int59 = node55.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node60 = node39.useSourceInfoFromForTree(node55);
        boolean boolean61 = node60.isContinue();
        com.google.javascript.rhino.Node node62 = node36.srcref(node60);
        com.google.javascript.rhino.Node node63 = node15.useSourceInfoIfMissingFrom(node36);
        boolean boolean64 = node63.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        boolean boolean4 = sideEffectFlags0.areAllFlagsSet();
        int int5 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node15.isComma();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean19 = node18.isGetProp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        node34.setSourceEncodedPositionForTree((int) (short) 0);
        int int38 = node34.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node39 = node18.useSourceInfoFromForTree(node34);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node15.srcref(node39);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node39.getJSDocInfo();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node61 = node44.useSourceInfoIfMissingFrom(node59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = null;
        node44.setJSDocInfo(jSDocInfo62);
        node44.detachChildren();
        int int65 = node44.getLength();
        node44.putIntProp(1, (int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(45, node39, node44, 0, (int) ' ');
        double double72 = node44.getDouble();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 40.0d + "'", double72 == 40.0d);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "hi!");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = null;
        node7.setJSDocInfo(jSDocInfo18);
        int int20 = node7.getLength();
        node2.addChildToFront(node7);
        com.google.javascript.rhino.Node node22 = node7.cloneTree();
        boolean boolean23 = node7.isFromExterns();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(48, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int30 = node29.getChildCount();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        com.google.javascript.rhino.Node node42 = node29.copyInformationFrom(node32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = null;
        node32.setJSDocInfo(jSDocInfo43);
        int int45 = node32.getLength();
        node27.addChildToFront(node32);
        com.google.javascript.rhino.Node node47 = node32.cloneTree();
        boolean boolean48 = node32.isFromExterns();
        node7.putProp(36, (java.lang.Object) node32);
        boolean boolean50 = node32.isCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isNot();
        node14.setDouble((double) 10L);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        node38.setSourceEncodedPositionForTree((int) (short) 0);
        int int42 = node38.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node38.setStaticSourceFile(staticSourceFile43);
        boolean boolean45 = node38.isNot();
        node14.addChildrenToFront(node38);
        boolean boolean47 = node14.isParamList();
        int int48 = node14.getSourcePosition();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 40.0");
        com.google.javascript.rhino.Node node2 = node1.getNext();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = node2.getCharno();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(37, nodeArray5, (int) (byte) -1, 29);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(15, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(1, nodeArray5);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, (int) (short) 1, 47);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(1, nodeArray5, (int) (short) 0, 32);
        org.junit.Assert.assertNotNull(nodeArray5);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING ", 1, 8);
        java.util.Set<java.lang.String> strSet4 = node3.getDirectives();
        int int6 = node3.getIntProp(50);
        boolean boolean7 = node3.isVar();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        boolean boolean39 = node4.isQualifiedName();
        boolean boolean40 = node4.isScript();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(35);
        com.google.javascript.rhino.Node node43 = node4.copyInformationFromForTree(node42);
        boolean boolean44 = node4.isDec();
        boolean boolean45 = node4.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) -1, "STRING NUMBER 40.0\n");
        com.google.javascript.rhino.Node node3 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.removeChild(node3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING ", 10, (int) (short) 100);
        boolean boolean4 = node3.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setDouble((double) 1.0f);
        boolean boolean31 = node28.isVar();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node28.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node28.getJSDocInfo();
        boolean boolean35 = node28.isAssignAdd();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node28.setJSType(jSType36);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        java.util.Set<java.lang.String> strSet23 = node17.getDirectives();
        int int24 = node4.getIndexOfChild(node17);
        int int25 = node17.getSourcePosition();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        java.lang.String str35 = node30.checkTreeEquals(node33);
        boolean boolean36 = node30.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node30.getJSDocInfo();
        boolean boolean38 = node30.isDebugger();
        boolean boolean39 = node30.isTrue();
        com.google.javascript.rhino.Node node40 = node27.copyInformationFrom(node30);
        boolean boolean41 = node30.isNE();
        node30.detachChildren();
        int int43 = node30.getLength();
        node30.setWasEmptyNode(true);
        node17.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node47 = node30.getFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(node47);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) 'a');
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        double double17 = node6.getDouble();
        boolean boolean18 = node6.isNull();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        boolean boolean34 = node23.isNE();
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean39 = node38.isGetProp();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        node54.setSourceEncodedPositionForTree((int) (short) 0);
        int int58 = node54.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node59 = node38.useSourceInfoFromForTree(node54);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 100, node6, node23, node54, node61, 46, (int) (byte) 1);
        com.google.javascript.rhino.Node node72 = node71.cloneNode();
        node72.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(32, node72);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 40.0d + "'", double17 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        node15.setSourceEncodedPositionForTree((int) (short) 0);
        node15.setLineno((int) ' ');
        boolean boolean20 = node15.isAnd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        node50.setSourceEncodedPositionForTree((int) (short) 0);
        node50.setLineno((int) ' ');
        boolean boolean55 = node50.isCatch();
        boolean boolean56 = node50.isDebugger();
        com.google.javascript.rhino.Node node57 = node25.srcrefTree(node50);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        java.lang.String str64 = node59.checkTreeEquals(node62);
        boolean boolean65 = node59.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = node59.getJSDocInfo();
        boolean boolean67 = node59.isDebugger();
        boolean boolean68 = node59.isTrue();
        boolean boolean69 = node59.isFromExterns();
        boolean boolean70 = node59.isOptionalArg();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(10, node15, node57, node59, 15, 4095);
        com.google.javascript.rhino.Node node74 = node59.detachFromParent();
        node74.setIsSyntheticBlock(true);
        boolean boolean77 = node74.isIn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        int int19 = node16.getLength();
        boolean boolean20 = node16.isDec();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 8);
        java.lang.String str23 = node16.checkTreeEquals(node22);
        java.lang.String str24 = node16.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 8.0\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 8.0\n" + "'", str23, "Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 8.0\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 8.0\n");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER 40.0" + "'", str24, "NUMBER 40.0");
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 8, 0, 35);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        node52.setSourceEncodedPositionForTree((int) (short) 0);
        node52.setLineno((int) ' ');
        boolean boolean57 = node52.isCatch();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        java.lang.String str64 = node59.checkTreeEquals(node62);
        com.google.javascript.rhino.Node node65 = node52.useSourceInfoIfMissingFrom(node59);
        boolean boolean66 = node59.isTrue();
        com.google.javascript.rhino.Node node67 = node2.useSourceInfoIfMissingFrom(node59);
        boolean boolean68 = node59.isFalse();
        boolean boolean69 = node59.isLocalResultCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        node1.detachChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = null;
        node25.setJSDocInfo(jSDocInfo43);
        node25.detachChildren();
        int int46 = node25.getLength();
        boolean boolean47 = node25.isTry();
        boolean boolean48 = node25.isContinue();
        com.google.javascript.rhino.Node node49 = node25.getLastChild();
        int int50 = node25.getSourcePosition();
        com.google.javascript.rhino.Node node51 = node1.useSourceInfoFromForTree(node25);
        boolean boolean52 = node25.isReturn();
        boolean boolean53 = node25.isScript();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(40, "Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 40.0\n    NUMBER 40.0\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 40.0\n    NUMBER 40.0\n", 31, 45);
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isComma();
        node4.setCharno((int) (short) 1);
        boolean boolean36 = node4.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        java.lang.String str2 = node1.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NUMBER 1.0\n" + "'", str2, "NUMBER 1.0\n");
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node1.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator25 = nodeIterable24.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator26 = nodeIterable24.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(nodeSpliterator25);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isWith();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        boolean boolean33 = node31.isThrow();
        int int34 = node31.getSourcePosition();
        com.google.javascript.rhino.Node node35 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.replaceChildAfter(node31, node35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean3 = node2.isGetProp();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        node18.setSourceEncodedPositionForTree((int) (short) 0);
        int int22 = node18.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node23 = node2.useSourceInfoFromForTree(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        boolean boolean39 = node28.isNE();
        node28.setSourceEncodedPosition((int) (short) -1);
        boolean boolean42 = node28.isThis();
        com.google.javascript.rhino.Node node43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) '4', node2, node28, node43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isCatch();
        boolean boolean20 = node14.isDebugger();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoIfMissingFrom(node37);
        boolean boolean40 = node22.isTypeOf();
        com.google.javascript.rhino.Node node41 = node14.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet54);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet54);
        boolean boolean58 = node41.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.setSourceEncodedPosition((int) (short) -1);
        boolean boolean18 = node4.isThrow();
        java.util.Set<java.lang.String> strSet19 = node4.getDirectives();
        boolean boolean20 = node4.isIn();
        boolean boolean21 = node4.isFromExterns();
        boolean boolean22 = node4.isArrayLit();
        boolean boolean23 = node4.isAssignAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node4.isAdd();
        node4.setLength(15);
        boolean boolean10 = node4.isTry();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        node1.setSourceFileForTesting("");
        boolean boolean6 = node1.isComma();
        node1.setSourceFileForTesting("STRING NUMBER 40.0\n");
        boolean boolean9 = node1.isQualifiedName();
        node1.setIsSyntheticBlock(true);
        boolean boolean12 = node1.isParamList();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(53, "SHEQ\n");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(37, nodeArray5, (int) (byte) -1, 29);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(45, nodeArray5, 8, 0);
        node2.addChildrenToFront(node11);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray5);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isRegExp();
        boolean boolean16 = node4.isFor();
        boolean boolean17 = node4.isDo();
        boolean boolean18 = node4.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        boolean boolean24 = node1.isObjectLit();
        node1.setSourceEncodedPositionForTree(47);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node54 = node37.useSourceInfoIfMissingFrom(node52);
        node54.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node58 = node28.useSourceInfoIfMissingFrom(node54);
        node1.addChildToBack(node28);
        node28.setLineno(46);
        node28.setType(10);
        boolean boolean64 = node28.hasChildren();
        boolean boolean65 = node28.isReturn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node1.getAncestors();
        boolean boolean14 = node1.isBlock();
        boolean boolean15 = node1.isFunction();
        boolean boolean16 = node1.isParamList();
        boolean boolean17 = node1.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.detachChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        double double33 = node22.getDouble();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        java.util.Set<java.lang.String> strSet41 = node35.getDirectives();
        int int42 = node22.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(39, node5, node22);
        com.google.javascript.rhino.Node node44 = node22.cloneNode();
        java.lang.String str45 = node22.getSourceFileName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 40.0d + "'", double33 == 40.0d);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        boolean boolean21 = node1.isNot();
        node1.setSourceEncodedPositionForTree(4);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node27.siblings();
        node27.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] { node27 };
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) '#', nodeArray32, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        boolean boolean47 = node41.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node41.getJSDocInfo();
        boolean boolean49 = node41.isDebugger();
        boolean boolean50 = node41.isTrue();
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node41);
        node51.setSourceEncodedPositionForTree((int) (short) 0);
        node51.setLineno((int) ' ');
        boolean boolean56 = node51.isCatch();
        boolean boolean57 = node51.isDebugger();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int60 = node59.getChildCount();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        java.lang.String str67 = node62.checkTreeEquals(node65);
        boolean boolean68 = node62.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node62.getJSDocInfo();
        boolean boolean70 = node62.isDebugger();
        boolean boolean71 = node62.isTrue();
        com.google.javascript.rhino.Node node72 = node59.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        com.google.javascript.rhino.Node node76 = node59.useSourceInfoIfMissingFrom(node74);
        boolean boolean77 = node59.isTypeOf();
        com.google.javascript.rhino.Node node78 = node51.copyInformationFromForTree(node59);
        node35.putProp((int) (byte) 1, (java.lang.Object) node51);
        boolean boolean80 = node35.isTrue();
        boolean boolean81 = node35.isGetterDef();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(12, node35);
        com.google.javascript.rhino.Node node83 = node1.useSourceInfoFromForTree(node82);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable84 = node82.getAncestors();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(ancestorIterable84);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        boolean boolean24 = node1.isObjectLit();
        node1.setSourceEncodedPositionForTree(47);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node54 = node37.useSourceInfoIfMissingFrom(node52);
        node54.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node58 = node28.useSourceInfoIfMissingFrom(node54);
        node1.addChildToBack(node28);
        java.lang.String str60 = node1.toStringTree();
        com.google.javascript.rhino.Node node62 = node1.getAncestor(8);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER 40.0 0\n    NUMBER 40.0\n" + "'", str60, "NUMBER 40.0 0\n    NUMBER 40.0\n");
        org.junit.Assert.assertNull(node62);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        boolean boolean20 = node4.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node4.siblings();
        java.lang.String str22 = node4.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER 40.0 [length: 39]\n" + "'", str22, "NUMBER 40.0 [length: 39]\n");
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean4 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        node17.setSourceEncodedPositionForTree((int) (short) 0);
        int int21 = node17.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFromForTree(node17);
        int int23 = node22.getSideEffectFlags();
        com.google.javascript.rhino.Node node24 = node22.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        int int4 = node1.getLength();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        boolean boolean6 = node5.isOptionalArg();
        node5.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 40.0", 36, (int) (short) 100);
        int int4 = node3.getSourceOffset();
        boolean boolean5 = node3.isReturn();
        boolean boolean6 = node3.isFalse();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isDefaultCase();
        boolean boolean22 = node14.isThrow();
        boolean boolean23 = node14.isFor();
        boolean boolean24 = node14.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean24 = node23.isGetProp();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        boolean boolean26 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node27 = node1.copyInformationFrom(node23);
        node27.setVarArgs(false);
        boolean boolean30 = node27.isComma();
        boolean boolean31 = node27.isFromExterns();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) ' ');
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        node1.putIntProp(1, (int) (byte) -1);
        boolean boolean26 = node1.hasOneChild();
        boolean boolean27 = node1.isObjectLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int30 = node29.getChildCount();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        com.google.javascript.rhino.Node node42 = node29.copyInformationFrom(node32);
        boolean boolean43 = node29.wasEmptyNode();
        com.google.javascript.rhino.Node node44 = node1.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean45 = node29.isInstanceOf();
        boolean boolean46 = node29.isFromExterns();
        com.google.javascript.rhino.Node node48 = node29.getAncestor(49);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node48);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isCatch();
        boolean boolean20 = node14.isDebugger();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoIfMissingFrom(node37);
        boolean boolean40 = node22.isTypeOf();
        com.google.javascript.rhino.Node node41 = node14.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int44 = node43.getChildCount();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        java.lang.String str51 = node46.checkTreeEquals(node49);
        boolean boolean52 = node46.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = node46.getJSDocInfo();
        boolean boolean54 = node46.isDebugger();
        boolean boolean55 = node46.isTrue();
        com.google.javascript.rhino.Node node56 = node43.copyInformationFrom(node46);
        node56.setSourceEncodedPositionForTree((int) (short) 0);
        node56.setLineno((int) ' ');
        boolean boolean61 = node56.isNew();
        boolean boolean62 = node22.isEquivalentToTyped(node56);
        node56.setCharno(38);
        java.lang.Class<?> wildcardClass65 = node56.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSDocInfo53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        node4.setVarArgs(false);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        double double55 = node44.getDouble();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int58 = node57.getChildCount();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        boolean boolean68 = node60.isDebugger();
        boolean boolean69 = node60.isTrue();
        com.google.javascript.rhino.Node node70 = node57.copyInformationFrom(node60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        node60.setJSDocInfo(jSDocInfo71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 0, node38, node44, node60);
        java.lang.String str74 = node44.toStringTree();
        com.google.javascript.rhino.Node node75 = node4.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean76 = node75.hasChildren();
        boolean boolean77 = node75.isNoSideEffectsCall();
        boolean boolean78 = node75.isThrow();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = node75.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 40.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 40.0d + "'", double55 == 40.0d);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER 40.0\n" + "'", str74, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        double double49 = node38.getDouble();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = null;
        node54.setJSDocInfo(jSDocInfo65);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 0, node32, node38, node54);
        boolean boolean68 = node38.isAdd();
        int int69 = node38.getSourcePosition();
        boolean boolean70 = node38.isRegExp();
        node38.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node73 = node38.getParent();
        boolean boolean74 = node73.isFromExterns();
        node26.putProp(46, (java.lang.Object) node73);
        boolean boolean76 = node73.isTrue();
        node73.setType(40);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 40.0d + "'", double49 == 40.0d);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        boolean boolean26 = node1.isIf();
        boolean boolean27 = node1.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node1.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        boolean boolean31 = node1.isReturn();
        int int32 = node1.getCharno();
        int int33 = node1.getLineno();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node49 = node1.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean52 = node51.isGetProp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        boolean boolean69 = node58.isNE();
        node51.putProp(31, (java.lang.Object) boolean69);
        node51.addSuppression("hi!");
        com.google.javascript.rhino.Node node73 = node35.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node74 = node73.cloneNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node15.isComma();
        node15.putIntProp(37, 36);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(0, node15);
        boolean boolean21 = node15.isTry();
        node15.setOptionalArg(true);
        com.google.javascript.rhino.Node node24 = node15.cloneNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        boolean boolean21 = node1.isNot();
        node1.setSourceEncodedPositionForTree(4);
        boolean boolean24 = node1.isTypeOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        int int17 = node4.getType();
        node4.setSourceEncodedPosition(46);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 39 + "'", int17 == 39);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isNot();
        node14.setDouble((double) 10L);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node node43 = node42.cloneTree();
        com.google.javascript.rhino.Node node44 = node14.srcref(node43);
        boolean boolean45 = node14.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int49 = node48.getChildCount();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        double double65 = node54.getDouble();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int68 = node67.getChildCount();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node71 = node70.removeChildren();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        java.lang.String str75 = node70.checkTreeEquals(node73);
        boolean boolean76 = node70.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = node70.getJSDocInfo();
        boolean boolean78 = node70.isDebugger();
        boolean boolean79 = node70.isTrue();
        com.google.javascript.rhino.Node node80 = node67.copyInformationFrom(node70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = null;
        node70.setJSDocInfo(jSDocInfo81);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) 0, node48, node54, node70);
        boolean boolean84 = node54.isAdd();
        int int85 = node54.getSourcePosition();
        boolean boolean86 = node54.isRegExp();
        node54.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node89 = node54.getParent();
        boolean boolean90 = node89.isVarArgs();
        com.google.javascript.rhino.Node node91 = node14.srcrefTree(node89);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 40.0d + "'", double65 == 40.0d);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSDocInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 16, 30);
        node3.detachChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node23 = node6.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = null;
        node6.setJSDocInfo(jSDocInfo24);
        node6.detachChildren();
        int int27 = node6.getLength();
        boolean boolean28 = node6.isTry();
        boolean boolean29 = node6.isContinue();
        com.google.javascript.rhino.Node node30 = node6.getLastChild();
        int int31 = node6.getSourcePosition();
        com.google.javascript.rhino.Node node32 = node6.cloneNode();
        boolean boolean33 = node32.isFunction();
        boolean boolean34 = node32.isSyntheticBlock();
        boolean boolean35 = node3.isEquivalentTo(node32);
        boolean boolean36 = node3.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        boolean boolean31 = node1.isReturn();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isDebugger();
        boolean boolean12 = node3.isTrue();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node18.setJSDocInfo(jSDocInfo29);
        node3.putProp((int) (short) 0, (java.lang.Object) node18);
        com.google.javascript.rhino.Node node32 = node1.copyInformationFrom(node3);
        boolean boolean33 = node3.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(40, node24, 100, 100);
        boolean boolean28 = node18.isEquivalentToTyped(node24);
        boolean boolean29 = node18.isCatch();
        boolean boolean30 = node18.isNumber();
        boolean boolean31 = node18.isComma();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean2 = node1.isFalse();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder3 = node1.getJsDocBuilderForNode();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node1.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder3);
        org.junit.Assert.assertNotNull(nodeIterable4);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        com.google.javascript.rhino.Node node3 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node4 = null;
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(40, node7, 100, 100);
        int int11 = node7.getLineno();
        boolean boolean12 = node7.isOptionalArg();
        node7.setSourceEncodedPosition(53);
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenAfter(node4, node7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node1.getJsDocBuilderForNode();
        fileLevelJsDocBuilder30.append("SHEQ\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder30);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        boolean boolean35 = node4.isRegExp();
        boolean boolean36 = node4.isTypeOf();
        node4.addSuppression("NUMBER 40.0 [length: 39]\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        node1.setVarArgs(false);
        boolean boolean12 = node1.isParamList();
        boolean boolean13 = node1.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 36);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        boolean boolean3 = node1.isSyntheticBlock();
        node1.setWasEmptyNode(true);
        boolean boolean6 = node1.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node7 = node1.getLastSibling();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean10 = node9.isFalse();
        boolean boolean11 = node9.isVarArgs();
        boolean boolean12 = node9.isVarArgs();
        com.google.javascript.rhino.Node node13 = node7.useSourceInfoIfMissingFrom(node9);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(29, "Node tree inequality:\nTree1:\nNULL\n\n\nTree2:\nSTRING STRING  10\n\n\nSubtree1: NULL\n\n\nSubtree2: STRING STRING  10\n");
        boolean boolean3 = node2.isFromExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        java.util.Set<java.lang.String> strSet24 = node18.getDirectives();
        int int25 = node5.getIndexOfChild(node18);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        boolean boolean30 = node29.isDebugger();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node29.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = null;
        node36.setJSDocInfo(jSDocInfo47);
        int int49 = node36.getSourceOffset();
        node36.setLength(39);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("STRING ", 10, (int) (short) 100);
        com.google.javascript.rhino.Node node56 = node36.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        boolean boolean68 = node58.isInstanceOf();
        int int69 = node58.getType();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable70 = node58.getAncestors();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(50, node18, node29, node36, node58);
        boolean boolean72 = node18.isDo();
        boolean boolean73 = node18.isName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 39 + "'", int69 == 39);
        org.junit.Assert.assertNotNull(ancestorIterable70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(24);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        int int21 = node14.getSourceOffset();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        boolean boolean34 = node24.isVoid();
        boolean boolean35 = node24.isIf();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node51 = node24.clonePropsFrom(node37);
        com.google.javascript.rhino.Node node52 = null;
        node14.addChildrenAfter(node37, node52);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setSourceEncodedPositionForTree(30);
        int int20 = node4.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 39 + "'", int20 == 39);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 50, 40);
        boolean boolean4 = node3.isComma();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "NUMBER 1.0\n");
        boolean boolean3 = node2.isAssignAdd();
        node2.setLength(2);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(15);
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        boolean boolean30 = node15.isRegExp();
        boolean boolean31 = node15.isQualifiedName();
        boolean boolean32 = node15.isFor();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(0, node15);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node15.setJSType(jSType34);
        boolean boolean36 = node15.isGetElem();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 1.0\n");
        java.lang.String str2 = node1.getString();
        boolean boolean3 = node1.isNull();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NUMBER 1.0\n" + "'", str2, "NUMBER 1.0\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        boolean boolean28 = node2.isOnlyModifiesThisCall();
        com.google.javascript.rhino.InputId inputId29 = null;
        node2.setInputId(inputId29);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node49 = node32.useSourceInfoIfMissingFrom(node47);
        node49.putBooleanProp(31, true);
        boolean boolean53 = node49.isBreak();
        boolean boolean54 = node49.isOptionalArg();
        com.google.javascript.rhino.Node node55 = node2.copyInformationFrom(node49);
        boolean boolean57 = node49.getBooleanProp(50);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        boolean boolean24 = node1.isObjectLit();
        node1.setSourceEncodedPositionForTree(47);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node54 = node37.useSourceInfoIfMissingFrom(node52);
        node54.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node58 = node28.useSourceInfoIfMissingFrom(node54);
        node1.addChildToBack(node28);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(48, "hi!");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int65 = node64.getChildCount();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node71 = node70.removeChildren();
        java.lang.String str72 = node67.checkTreeEquals(node70);
        boolean boolean73 = node67.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = node67.getJSDocInfo();
        boolean boolean75 = node67.isDebugger();
        boolean boolean76 = node67.isTrue();
        com.google.javascript.rhino.Node node77 = node64.copyInformationFrom(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = null;
        node67.setJSDocInfo(jSDocInfo78);
        int int80 = node67.getLength();
        node62.addChildToFront(node67);
        com.google.javascript.rhino.Node node82 = node67.cloneTree();
        boolean boolean83 = node67.isFromExterns();
        com.google.javascript.rhino.Node node84 = node28.copyInformationFrom(node67);
        boolean boolean85 = node84.isExprResult();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSDocInfo74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 40.0 [directives: [hi!, ]] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isAnd();
        int int20 = node14.getChildCount();
        node14.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int25 = node24.getChildCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node37 = node24.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoIfMissingFrom(node39);
        node14.addChildrenToBack(node39);
        boolean boolean43 = node39.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node15.isComma();
        node15.putIntProp(37, 36);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(0, node15);
        boolean boolean21 = node15.isDebugger();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        node19.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(40, node25, 100, 100);
        boolean boolean29 = node19.isEquivalentToTyped(node25);
        boolean boolean30 = node19.isCatch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        boolean boolean46 = node45.isComma();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean49 = node48.isGetProp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        node64.setSourceEncodedPositionForTree((int) (short) 0);
        int int68 = node64.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node69 = node48.useSourceInfoFromForTree(node64);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node71 = node45.srcref(node69);
        int int72 = node45.getSourcePosition();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(42, node19, node45);
        boolean boolean74 = node19.isGetElem();
        boolean boolean75 = node19.isBreak();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node4 = node3.cloneNode();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        boolean boolean16 = node6.isVoid();
        boolean boolean17 = node6.isIf();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node33 = node6.clonePropsFrom(node19);
        boolean boolean34 = node6.isRegExp();
        boolean boolean35 = node6.isCall();
        boolean boolean36 = node6.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node6.siblings();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node56 = node39.useSourceInfoIfMissingFrom(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = null;
        node39.setJSDocInfo(jSDocInfo57);
        node39.detachChildren();
        int int60 = node39.getLength();
        boolean boolean61 = node39.isLabel();
        com.google.javascript.rhino.Node node62 = node6.copyInformationFrom(node39);
        boolean boolean63 = node6.isSyntheticBlock();
        boolean boolean64 = node6.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node65 = node4.getChildBefore(node6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        java.util.Set<java.lang.String> strSet7 = node1.getDirectives();
        int int8 = node1.getSourceOffset();
        com.google.javascript.rhino.Node node10 = node1.getChildAtIndex((int) (byte) 0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        boolean boolean25 = node1.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isNot();
        node14.setDouble((double) 10L);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        node38.setSourceEncodedPositionForTree((int) (short) 0);
        int int42 = node38.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node38.setStaticSourceFile(staticSourceFile43);
        boolean boolean45 = node38.isNot();
        node14.addChildrenToFront(node38);
        boolean boolean47 = node38.isNumber();
        boolean boolean48 = node38.isFor();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        int int4 = node1.getLength();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        java.lang.String str6 = node1.toString();
        boolean boolean7 = node1.isCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "NUMBER 1.0" + "'", str6, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        boolean boolean71 = node60.isCase();
        boolean boolean72 = node60.isVarArgs();
        com.google.javascript.rhino.Node node73 = node60.getLastChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node73);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.isSwitch();
        boolean boolean20 = node18.isArrayLit();
        com.google.javascript.rhino.InputId inputId21 = node18.getInputId();
        boolean boolean22 = node18.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 16);
        boolean boolean2 = node1.isWhile();
        boolean boolean3 = node1.isEmpty();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isReturn();
        node4.putIntProp(24, 16);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setDouble((double) 1.0f);
        boolean boolean31 = node28.isVar();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node28.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node28.getJSDocInfo();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(2, "");
        boolean boolean38 = node28.isEquivalentToTyped(node37);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        com.google.javascript.rhino.jstype.JSType jSType30 = node15.getJSType();
        boolean boolean31 = node15.isVar();
        com.google.javascript.rhino.Node node32 = node15.getLastSibling();
        boolean boolean33 = node15.isTry();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 42);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        boolean boolean48 = node38.isVoid();
        boolean boolean49 = node38.isIf();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        com.google.javascript.rhino.Node node65 = node38.clonePropsFrom(node51);
        boolean boolean66 = node38.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder67 = node38.getJsDocBuilderForNode();
        boolean boolean68 = node38.isInstanceOf();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(48, node38);
        boolean boolean70 = node69.isEmpty();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int73 = node72.getChildCount();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node76 = node75.removeChildren();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node79 = node78.removeChildren();
        java.lang.String str80 = node75.checkTreeEquals(node78);
        boolean boolean81 = node75.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = node75.getJSDocInfo();
        boolean boolean83 = node75.isDebugger();
        boolean boolean84 = node75.isTrue();
        com.google.javascript.rhino.Node node85 = node72.copyInformationFrom(node75);
        node85.setSourceEncodedPositionForTree((int) (short) 0);
        int int89 = node85.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile90 = null;
        node85.setStaticSourceFile(staticSourceFile90);
        boolean boolean92 = node85.isNot();
        com.google.javascript.rhino.Node node93 = node69.useSourceInfoFrom(node85);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(54, node15, node35, node69);
        boolean boolean95 = node35.isDo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSDocInfo82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node31 = node14.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = null;
        node14.setJSDocInfo(jSDocInfo32);
        node14.detachChildren();
        node1.addChildToBack(node14);
        boolean boolean36 = node1.isGetterDef();
        java.lang.String str37 = node1.toStringTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder38 = node1.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER 40.0\n    NUMBER 40.0\n" + "'", str37, "NUMBER 40.0\n    NUMBER 40.0\n");
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        boolean boolean32 = node22.isInstanceOf();
        int int33 = node22.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node35.setJSDocInfo(jSDocInfo53);
        node35.detachChildren();
        node22.addChildToBack(node35);
        node22.setDouble(0.0d);
        node5.addChildToFront(node22);
        com.google.javascript.rhino.Node node60 = node22.getLastChild();
        boolean boolean61 = node60.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 52, (int) (byte) 10);
        boolean boolean4 = node3.isTrue();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags5.clearSideEffectFlags();
        sideEffectFlags5.setAllFlags();
        boolean boolean8 = sideEffectFlags5.areAllFlagsSet();
        sideEffectFlags5.setReturnsTainted();
        sideEffectFlags5.setAllFlags();
        sideEffectFlags5.setReturnsTainted();
        sideEffectFlags5.setMutatesThis();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(sideEffectFlags5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        int int29 = node26.getCharno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node2.isExprResult();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        double double58 = node47.getDouble();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int61 = node60.getChildCount();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        java.lang.String str68 = node63.checkTreeEquals(node66);
        boolean boolean69 = node63.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = node63.getJSDocInfo();
        boolean boolean71 = node63.isDebugger();
        boolean boolean72 = node63.isTrue();
        com.google.javascript.rhino.Node node73 = node60.copyInformationFrom(node63);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = null;
        node63.setJSDocInfo(jSDocInfo74);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) 0, node41, node47, node63);
        node47.setType(41);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("STRING ", 10, (int) (short) 100);
        java.lang.String str83 = node47.checkTreeEquals(node82);
        com.google.javascript.rhino.Node node84 = node2.copyInformationFromForTree(node82);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node86 = node82.getChildAtIndex(23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 40.0d + "'", double58 == 40.0d);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Node tree inequality:\nTree1:\nNULL\n\n\nTree2:\nSTRING STRING  10\n\n\nSubtree1: NULL\n\n\nSubtree2: STRING STRING  10\n" + "'", str83, "Node tree inequality:\nTree1:\nNULL\n\n\nTree2:\nSTRING STRING  10\n\n\nSubtree1: NULL\n\n\nSubtree2: STRING STRING  10\n");
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(40, node24, 100, 100);
        boolean boolean28 = node18.isEquivalentToTyped(node24);
        boolean boolean29 = node24.isWhile();
        boolean boolean30 = node24.isVarArgs();
        boolean boolean31 = node24.isContinue();
        boolean boolean32 = node24.isDefaultCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "hi!");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = null;
        node7.setJSDocInfo(jSDocInfo18);
        int int20 = node7.getLength();
        node2.addChildToFront(node7);
        com.google.javascript.rhino.Node node22 = node7.cloneTree();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int25 = node24.getChildCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node37 = node24.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoIfMissingFrom(node39);
        boolean boolean42 = node41.isQualifiedName();
        node41.putIntProp((int) 'a', (int) (short) 1);
        boolean boolean46 = node41.isFromExterns();
        boolean boolean47 = node41.isRegExp();
        com.google.javascript.rhino.Node node48 = node7.clonePropsFrom(node41);
        boolean boolean49 = node7.isSwitch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(0, "NUMBER 1.0\n");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 0, node3);
        int int5 = node4.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        java.lang.String str18 = node13.checkTreeEquals(node16);
        boolean boolean19 = node13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node13.getJSDocInfo();
        boolean boolean21 = node13.isDebugger();
        boolean boolean22 = node13.isTrue();
        com.google.javascript.rhino.Node node23 = node10.copyInformationFrom(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoIfMissingFrom(node25);
        node27.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node31 = node1.useSourceInfoIfMissingFrom(node27);
        boolean boolean32 = node27.isLocalResultCall();
        boolean boolean33 = node27.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(100.0d);
        int int2 = node1.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        boolean boolean50 = node49.isComma();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean53 = node52.isGetProp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        node68.setSourceEncodedPositionForTree((int) (short) 0);
        int int72 = node68.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node73 = node52.useSourceInfoFromForTree(node68);
        boolean boolean74 = node73.isContinue();
        com.google.javascript.rhino.Node node75 = node49.srcref(node73);
        com.google.javascript.rhino.Node node76 = node4.useSourceInfoFrom(node49);
        boolean boolean77 = node49.isTypeOf();
        int int78 = node49.getLineno();
        node49.setSourceEncodedPositionForTree(37);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node83 = node82.removeChildren();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node86 = node85.removeChildren();
        java.lang.String str87 = node82.checkTreeEquals(node85);
        boolean boolean88 = node82.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = node82.getJSDocInfo();
        java.lang.String[] strArray92 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet93 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet93, strArray92);
        node82.setDirectives((java.util.Set<java.lang.String>) strSet93);
        node49.setDirectives((java.util.Set<java.lang.String>) strSet93);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSDocInfo89);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 4, 30);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node9.setJSDocInfo(jSDocInfo20);
        double double22 = node9.getDouble();
        boolean boolean23 = node9.isWith();
        boolean boolean24 = node9.isParamList();
        java.lang.String str25 = node3.checkTreeEquals(node9);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 40.0d + "'", double22 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Node tree inequality:\nTree1:\nSTRING hi! 4\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: STRING hi! 4\n\n\nSubtree2: NUMBER 40.0\n" + "'", str25, "Node tree inequality:\nTree1:\nSTRING hi! 4\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: STRING hi! 4\n\n\nSubtree2: NUMBER 40.0\n");
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node40.siblings();
        node40.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] { node40 };
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', nodeArray45, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        node64.setSourceEncodedPositionForTree((int) (short) 0);
        node64.setLineno((int) ' ');
        boolean boolean69 = node64.isCatch();
        boolean boolean70 = node64.isDebugger();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int73 = node72.getChildCount();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node76 = node75.removeChildren();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node79 = node78.removeChildren();
        java.lang.String str80 = node75.checkTreeEquals(node78);
        boolean boolean81 = node75.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = node75.getJSDocInfo();
        boolean boolean83 = node75.isDebugger();
        boolean boolean84 = node75.isTrue();
        com.google.javascript.rhino.Node node85 = node72.copyInformationFrom(node75);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node88 = node87.removeChildren();
        com.google.javascript.rhino.Node node89 = node72.useSourceInfoIfMissingFrom(node87);
        boolean boolean90 = node72.isTypeOf();
        com.google.javascript.rhino.Node node91 = node64.copyInformationFromForTree(node72);
        node48.putProp((int) (byte) 1, (java.lang.Object) node64);
        node29.putProp(40, (java.lang.Object) node64);
        node29.setVarArgs(false);
        boolean boolean96 = node29.isGetProp();
        boolean boolean97 = node29.wasEmptyNode();
        boolean boolean98 = node29.isRegExp();
        boolean boolean99 = node29.isLabelName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSDocInfo82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node37.isGetProp();
        boolean boolean39 = node37.isCase();
        // The following exception was thrown during execution in test generation
        try {
            node37.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        node33.setStaticSourceFile(staticSourceFile34);
        int int36 = node33.getSideEffectFlags();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node39.siblings();
        node39.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] { node39 };
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) '#', nodeArray44, (int) (short) 1, 1);
        node47.setCharno(8);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        java.lang.String str56 = node51.checkTreeEquals(node54);
        boolean boolean57 = node51.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = node51.getJSDocInfo();
        boolean boolean59 = node51.isDebugger();
        boolean boolean60 = node51.isTrue();
        boolean boolean61 = node51.isFromExterns();
        boolean boolean62 = node51.isNull();
        node47.addChildToFront(node51);
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenAfter(node33, node51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSDocInfo58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        boolean boolean30 = node14.isQualifiedName();
        boolean boolean31 = node14.isFor();
        com.google.javascript.rhino.InputId inputId32 = null;
        node14.setInputId(inputId32);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(29, 39, 4);
        int int4 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node5 = node3.getLastSibling();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 159748 + "'", int4 == 159748);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        boolean boolean4 = node3.isDebugger();
        boolean boolean5 = node3.isTry();
        boolean boolean6 = node3.isExprResult();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING hi! 4\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: STRING hi! 4\n\n\nSubtree2: NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(40.0d, 30, (int) ' ');
        boolean boolean4 = node3.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isThis();
        boolean boolean25 = node1.isUnscopedQualifiedName();
        boolean boolean26 = node1.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        java.lang.String str30 = node14.toString();
        com.google.javascript.rhino.InputId inputId31 = null;
        node14.setInputId(inputId31);
        boolean boolean33 = node14.isDelProp();
        int int34 = node14.getLength();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER 40.0" + "'", str30, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(15);
        sideEffectFlags1.clearSideEffectFlags();
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        boolean boolean39 = node4.isQualifiedName();
        boolean boolean40 = node4.isScript();
        int int41 = node4.getLength();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        boolean boolean71 = node22.isBlock();
        boolean boolean72 = node22.hasOneChild();
        int int73 = node22.getSideEffectFlags();
        boolean boolean74 = node22.isCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node1.getJSDocInfo();
        boolean boolean32 = node1.isHook();
        boolean boolean33 = node1.isEmpty();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        boolean boolean16 = node14.isComma();
        node14.putBooleanProp((int) (short) 1, true);
        node14.setLength(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node40.siblings();
        node40.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] { node40 };
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', nodeArray45, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        node64.setSourceEncodedPositionForTree((int) (short) 0);
        node64.setLineno((int) ' ');
        boolean boolean69 = node64.isCatch();
        boolean boolean70 = node64.isDebugger();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int73 = node72.getChildCount();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node76 = node75.removeChildren();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node79 = node78.removeChildren();
        java.lang.String str80 = node75.checkTreeEquals(node78);
        boolean boolean81 = node75.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = node75.getJSDocInfo();
        boolean boolean83 = node75.isDebugger();
        boolean boolean84 = node75.isTrue();
        com.google.javascript.rhino.Node node85 = node72.copyInformationFrom(node75);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node88 = node87.removeChildren();
        com.google.javascript.rhino.Node node89 = node72.useSourceInfoIfMissingFrom(node87);
        boolean boolean90 = node72.isTypeOf();
        com.google.javascript.rhino.Node node91 = node64.copyInformationFromForTree(node72);
        node48.putProp((int) (byte) 1, (java.lang.Object) node64);
        node29.putProp(40, (java.lang.Object) node64);
        node29.setVarArgs(false);
        boolean boolean96 = node29.isGetProp();
        com.google.javascript.rhino.Node node97 = node29.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = node97.isNot();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSDocInfo82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(node97);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        int int16 = node4.getCharno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        com.google.javascript.rhino.jstype.JSType jSType29 = node14.getJSType();
        boolean boolean30 = node14.isVar();
        boolean boolean31 = node14.isDelProp();
        boolean boolean32 = node14.isOr();
        boolean boolean33 = node14.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        boolean boolean20 = node4.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node4.siblings();
        int int22 = node4.getChildCount();
        boolean boolean23 = node4.isBlock();
        boolean boolean24 = node4.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        int int14 = node1.getIntProp(2);
        node1.setIsSyntheticBlock(true);
        boolean boolean17 = node1.isDec();
        boolean boolean18 = node1.isWhile();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node1.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.isSwitch();
        boolean boolean20 = node18.isArrayLit();
        com.google.javascript.rhino.InputId inputId21 = node18.getInputId();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoIfMissingFrom(node38);
        node40.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(40, node46, 100, 100);
        boolean boolean50 = node40.isEquivalentToTyped(node46);
        boolean boolean51 = node46.isWhile();
        boolean boolean52 = node18.isEquivalentTo(node46);
        com.google.javascript.rhino.Node node53 = null;
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        int int58 = node55.getIntProp(45);
        boolean boolean59 = node55.isOnlyModifiesThisCall();
        boolean boolean60 = node55.isFalse();
        // The following exception was thrown during execution in test generation
        try {
            node18.addChildAfter(node53, node55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        int int4 = node1.getLength();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        node19.setSourceEncodedPositionForTree((int) (short) 0);
        node19.setLineno((int) ' ');
        boolean boolean24 = node19.isAnd();
        boolean boolean25 = node19.isHook();
        com.google.javascript.rhino.Node node26 = node1.srcref(node19);
        java.util.Set<java.lang.String> strSet27 = node1.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(strSet27);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node2.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node39 = node2.cloneNode();
        node2.setVarArgs(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setCharno(1);
        boolean boolean32 = node28.getBooleanProp((int) (short) -1);
        int int33 = node28.getSideEffectFlags();
        boolean boolean34 = node28.hasOneChild();
        boolean boolean35 = node28.isFalse();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        java.util.Set<java.lang.String> strSet7 = node1.getDirectives();
        node1.setIsSyntheticBlock(true);
        boolean boolean10 = node1.isFalse();
        boolean boolean11 = node1.isDebugger();
        com.google.javascript.rhino.InputId inputId12 = null;
        node1.setInputId(inputId12);
        boolean boolean14 = node1.isInc();
        int int15 = node1.getCharno();
        boolean boolean17 = node1.getBooleanProp(8);
        boolean boolean18 = node1.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 10);
        node1.removeProp(32);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isCall();
        boolean boolean13 = node1.isNot();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node16 = node15.removeChildren();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        java.lang.String str20 = node15.checkTreeEquals(node18);
        boolean boolean21 = node15.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = node15.getJSDocInfo();
        boolean boolean23 = node15.isDebugger();
        boolean boolean24 = node15.isTrue();
        boolean boolean25 = node15.isInstanceOf();
        int int26 = node15.getType();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int29 = node28.getChildCount();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        java.lang.String str36 = node31.checkTreeEquals(node34);
        boolean boolean37 = node31.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node31.getJSDocInfo();
        boolean boolean39 = node31.isDebugger();
        boolean boolean40 = node31.isTrue();
        com.google.javascript.rhino.Node node41 = node28.copyInformationFrom(node31);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node45 = node28.useSourceInfoIfMissingFrom(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = null;
        node28.setJSDocInfo(jSDocInfo46);
        node28.detachChildren();
        node15.addChildToBack(node28);
        boolean boolean50 = node15.isGetterDef();
        java.lang.String str51 = node15.toStringTree();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node52 = node1.removeChildAfter(node15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 39 + "'", int26 == 39);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER 40.0\n    NUMBER 40.0\n" + "'", str51, "NUMBER 40.0\n    NUMBER 40.0\n");
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setSourceEncodedPositionForTree(30);
        boolean boolean20 = node4.isOr();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        boolean boolean4 = node1.isReturn();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        boolean boolean16 = node6.isFromExterns();
        boolean boolean17 = node6.isOptionalArg();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        boolean boolean29 = node19.isInstanceOf();
        int int30 = node19.getType();
        boolean boolean31 = node19.isAssignAdd();
        int int32 = node6.getIndexOfChild(node19);
        node6.setOptionalArg(true);
        com.google.javascript.rhino.Node node35 = node1.copyInformationFrom(node6);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable36 = node1.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator37 = ancestorIterable36.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator38 = ancestorIterable36.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 39 + "'", int30 == 39);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(ancestorIterable36);
        org.junit.Assert.assertNotNull(nodeSpliterator37);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "hi!");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = null;
        node7.setJSDocInfo(jSDocInfo18);
        int int20 = node7.getLength();
        node2.addChildToFront(node7);
        boolean boolean22 = node2.isWhile();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node4.siblings();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(40, node42, 100, 100);
        boolean boolean46 = node4.hasChild(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int58 = node57.getChildCount();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        boolean boolean68 = node60.isDebugger();
        boolean boolean69 = node60.isTrue();
        com.google.javascript.rhino.Node node70 = node57.copyInformationFrom(node60);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        com.google.javascript.rhino.Node node74 = node57.useSourceInfoIfMissingFrom(node72);
        node74.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node78 = node48.useSourceInfoIfMissingFrom(node74);
        boolean boolean79 = node74.isGetProp();
        int int81 = node74.getIntProp((-1));
        node42.addChildToFront(node74);
        boolean boolean83 = node42.isTypeOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) 0);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        int int32 = node1.getIntProp((int) (byte) 100);
        node1.setType(54);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        boolean boolean38 = node36.isThrow();
        boolean boolean39 = node1.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node node40 = node36.cloneTree();
        boolean boolean41 = node40.isAssignAdd();
        boolean boolean42 = node40.isIn();
        boolean boolean43 = node40.isFromExterns();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isCatch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        com.google.javascript.rhino.Node node27 = node14.useSourceInfoIfMissingFrom(node21);
        boolean boolean28 = node14.isFunction();
        boolean boolean29 = node14.isAssign();
        int int30 = node14.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node1.getJsDocBuilderForNode();
        boolean boolean31 = node1.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node1.getJSDocInfo();
        boolean boolean33 = node1.isLabel();
        boolean boolean34 = node1.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        boolean boolean50 = node49.isComma();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean53 = node52.isGetProp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        node68.setSourceEncodedPositionForTree((int) (short) 0);
        int int72 = node68.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node73 = node52.useSourceInfoFromForTree(node68);
        boolean boolean74 = node73.isContinue();
        com.google.javascript.rhino.Node node75 = node49.srcref(node73);
        com.google.javascript.rhino.Node node76 = node4.useSourceInfoFrom(node49);
        boolean boolean77 = node49.isTypeOf();
        int int78 = node49.getLineno();
        boolean boolean79 = node49.isGetterDef();
        boolean boolean80 = node49.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        boolean boolean30 = node2.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node2.getJsDocBuilderForNode();
        boolean boolean32 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node2);
        boolean boolean34 = node33.isEmpty();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        node49.setSourceEncodedPositionForTree((int) (short) 0);
        int int53 = node49.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node49.setStaticSourceFile(staticSourceFile54);
        boolean boolean56 = node49.isNot();
        com.google.javascript.rhino.Node node57 = node33.useSourceInfoFrom(node49);
        boolean boolean58 = node57.isSwitch();
        int int59 = node57.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        boolean boolean31 = node1.isReturn();
        int int32 = node1.getCharno();
        int int33 = node1.getLineno();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node49 = node1.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean52 = node51.isGetProp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        boolean boolean69 = node58.isNE();
        node51.putProp(31, (java.lang.Object) boolean69);
        node51.addSuppression("hi!");
        com.google.javascript.rhino.Node node73 = node35.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean74 = node51.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node25 = node1.getLastChild();
        int int26 = node1.getSourcePosition();
        com.google.javascript.rhino.Node node27 = node1.cloneNode();
        boolean boolean28 = node1.isComma();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int31 = node30.getChildCount();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        java.lang.String str38 = node33.checkTreeEquals(node36);
        boolean boolean39 = node33.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node33.getJSDocInfo();
        boolean boolean41 = node33.isDebugger();
        boolean boolean42 = node33.isTrue();
        com.google.javascript.rhino.Node node43 = node30.copyInformationFrom(node33);
        boolean boolean44 = node43.isFunction();
        com.google.javascript.rhino.Node node45 = node1.useSourceInfoIfMissingFromForTree(node43);
        boolean boolean46 = node45.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        boolean boolean16 = node14.isComma();
        node14.putBooleanProp((int) (short) 1, true);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        boolean boolean31 = node21.isVoid();
        boolean boolean32 = node21.isIf();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node48 = node21.clonePropsFrom(node34);
        boolean boolean49 = node34.isRegExp();
        com.google.javascript.rhino.Node node50 = node34.getLastSibling();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int53 = node52.getChildCount();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        java.lang.String str60 = node55.checkTreeEquals(node58);
        boolean boolean61 = node55.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = node55.getJSDocInfo();
        boolean boolean63 = node55.isDebugger();
        boolean boolean64 = node55.isTrue();
        com.google.javascript.rhino.Node node65 = node52.copyInformationFrom(node55);
        boolean boolean66 = node55.isNE();
        node55.detachChildren();
        com.google.javascript.rhino.Node node68 = node50.useSourceInfoFromForTree(node55);
        node14.addChildToFront(node50);
        node14.setSourceEncodedPositionForTree(45);
        boolean boolean72 = node14.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSDocInfo62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        int int32 = node1.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        boolean boolean44 = node34.isVoid();
        boolean boolean45 = node34.isIf();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int48 = node47.getChildCount();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node54 = node53.removeChildren();
        java.lang.String str55 = node50.checkTreeEquals(node53);
        boolean boolean56 = node50.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = node50.getJSDocInfo();
        boolean boolean58 = node50.isDebugger();
        boolean boolean59 = node50.isTrue();
        com.google.javascript.rhino.Node node60 = node47.copyInformationFrom(node50);
        com.google.javascript.rhino.Node node61 = node34.clonePropsFrom(node47);
        boolean boolean62 = node47.isRegExp();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node69 = node68.removeChildren();
        java.lang.String str70 = node65.checkTreeEquals(node68);
        boolean boolean71 = node65.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = node65.getJSDocInfo();
        boolean boolean73 = node65.isDebugger();
        boolean boolean74 = node65.isTrue();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int78 = node77.getChildCount();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node81 = node80.removeChildren();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node84 = node83.removeChildren();
        java.lang.String str85 = node80.checkTreeEquals(node83);
        boolean boolean86 = node80.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = node80.getJSDocInfo();
        boolean boolean88 = node80.isDebugger();
        boolean boolean89 = node80.isTrue();
        com.google.javascript.rhino.Node node90 = node77.copyInformationFrom(node80);
        com.google.javascript.rhino.JSDocInfo jSDocInfo91 = null;
        node80.setJSDocInfo(jSDocInfo91);
        node65.putProp((int) (short) 0, (java.lang.Object) node80);
        node47.putProp(0, (java.lang.Object) node80);
        boolean boolean95 = node80.isDelProp();
        com.google.javascript.rhino.Node node96 = node1.useSourceInfoIfMissingFromForTree(node80);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSDocInfo57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(jSDocInfo87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) 0);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        boolean boolean32 = node22.isInstanceOf();
        int int33 = node22.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node35.setJSDocInfo(jSDocInfo53);
        node35.detachChildren();
        node22.addChildToBack(node35);
        node22.setDouble(0.0d);
        node5.addChildToFront(node22);
        boolean boolean60 = node22.isSyntheticBlock();
        boolean boolean61 = node22.isLabel();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        node22.setStaticSourceFile(staticSourceFile62);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean28 = node27.isGetProp();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        boolean boolean45 = node34.isNE();
        node27.putProp(31, (java.lang.Object) boolean45);
        boolean boolean47 = node27.isAnd();
        boolean boolean48 = node27.isOnlyModifiesThisCall();
        boolean boolean49 = node27.isIf();
        boolean boolean50 = node27.isNumber();
        java.lang.String str51 = node7.checkTreeEquals(node27);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        node36.detachChildren();
        boolean boolean38 = node36.isEmpty();
        com.google.javascript.rhino.Node node39 = node36.getParent();
        boolean boolean40 = node36.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        boolean boolean50 = node49.isComma();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean53 = node52.isGetProp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        node68.setSourceEncodedPositionForTree((int) (short) 0);
        int int72 = node68.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node73 = node52.useSourceInfoFromForTree(node68);
        boolean boolean74 = node73.isContinue();
        com.google.javascript.rhino.Node node75 = node49.srcref(node73);
        com.google.javascript.rhino.Node node76 = node4.useSourceInfoFrom(node49);
        boolean boolean77 = node76.isGetterDef();
        java.lang.Class<?> wildcardClass78 = node76.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        boolean boolean17 = node16.isComma();
        node16.putIntProp(37, 36);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(0, node16);
        int int22 = node21.getSideEffectFlags();
        boolean boolean23 = node21.isObjectLit();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder26 = node25.getJsDocBuilderForNode();
        boolean boolean27 = node25.isQualifiedName();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        java.lang.String str34 = node29.checkTreeEquals(node32);
        boolean boolean35 = node29.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node29.getJSDocInfo();
        boolean boolean37 = node29.isDebugger();
        boolean boolean38 = node29.isTrue();
        boolean boolean39 = node29.isVoid();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        node54.setSourceEncodedPositionForTree((int) (short) 0);
        int int58 = node54.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        node54.setStaticSourceFile(staticSourceFile59);
        boolean boolean61 = node54.isNot();
        boolean boolean62 = node54.isQuotedString();
        com.google.javascript.rhino.Node node63 = node29.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 16);
        com.google.javascript.rhino.Node node66 = node65.getLastSibling();
        boolean boolean67 = node66.isTry();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(38, node21, node25, node54, node66, (int) (short) 0, 0);
        int int71 = node21.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(0);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        boolean boolean30 = node15.isRegExp();
        java.lang.String str31 = node15.toString();
        com.google.javascript.rhino.InputId inputId32 = null;
        node15.setInputId(inputId32);
        node15.setSourceFileForTesting("NUMBER 1.0\n");
        com.google.javascript.rhino.Node node36 = node15.getNext();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(44, node15, (int) (short) 0, 49);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        boolean boolean55 = node44.isNE();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        java.lang.String str62 = node57.checkTreeEquals(node60);
        boolean boolean63 = node57.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = node57.getJSDocInfo();
        boolean boolean65 = node57.isDebugger();
        boolean boolean66 = node57.isTrue();
        boolean boolean67 = node57.isVoid();
        boolean boolean68 = node57.isIf();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int71 = node70.getChildCount();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node77 = node76.removeChildren();
        java.lang.String str78 = node73.checkTreeEquals(node76);
        boolean boolean79 = node73.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = node73.getJSDocInfo();
        boolean boolean81 = node73.isDebugger();
        boolean boolean82 = node73.isTrue();
        com.google.javascript.rhino.Node node83 = node70.copyInformationFrom(node73);
        com.google.javascript.rhino.Node node84 = node57.clonePropsFrom(node70);
        boolean boolean85 = node57.isRegExp();
        boolean boolean86 = node57.isCall();
        java.lang.String str87 = node57.toString();
        boolean boolean88 = node44.isEquivalentToTyped(node57);
        com.google.javascript.rhino.Node node89 = null;
        // The following exception was thrown during execution in test generation
        try {
            node15.addChildBefore(node44, node89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 40.0" + "'", str31, "NUMBER 40.0");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSDocInfo64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSDocInfo80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "NUMBER 40.0" + "'", str87, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(40, node2, 100, 100);
        boolean boolean6 = node5.hasChildren();
        boolean boolean7 = node5.isQuotedString();
        boolean boolean8 = node5.isBlock();
        boolean boolean9 = node5.isFunction();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 15, 32);
        boolean boolean4 = node3.isLocalResultCall();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        boolean boolean16 = node6.isVoid();
        boolean boolean17 = node6.isIf();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node33 = node6.clonePropsFrom(node19);
        boolean boolean34 = node6.isRegExp();
        boolean boolean35 = node6.isCall();
        java.lang.String str36 = node6.toString();
        node3.addChildrenToBack(node6);
        com.google.javascript.rhino.Node node38 = node3.getLastChild();
        boolean boolean39 = node38.isFor();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER 40.0" + "'", str36, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(40, node24, 100, 100);
        boolean boolean28 = node18.isEquivalentToTyped(node24);
        boolean boolean29 = node18.isCatch();
        node18.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node4.isAdd();
        node4.setLength(15);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int13 = node12.getChildCount();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node16 = node15.removeChildren();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        java.lang.String str20 = node15.checkTreeEquals(node18);
        boolean boolean21 = node15.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = node15.getJSDocInfo();
        boolean boolean23 = node15.isDebugger();
        boolean boolean24 = node15.isTrue();
        com.google.javascript.rhino.Node node25 = node12.copyInformationFrom(node15);
        boolean boolean26 = node25.isComma();
        node25.putIntProp(37, 36);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node25);
        int int31 = node30.getSideEffectFlags();
        com.google.javascript.rhino.Node node32 = node4.useSourceInfoIfMissingFrom(node30);
        boolean boolean33 = node30.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        node1.setVarArgs(false);
        boolean boolean12 = node1.isParamList();
        boolean boolean13 = node1.isDec();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '#', nodeArray7, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        node26.setSourceEncodedPositionForTree((int) (short) 0);
        node26.setLineno((int) ' ');
        boolean boolean31 = node26.isCatch();
        boolean boolean32 = node26.isDebugger();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        boolean boolean52 = node34.isTypeOf();
        com.google.javascript.rhino.Node node53 = node26.copyInformationFromForTree(node34);
        node10.putProp((int) (byte) 1, (java.lang.Object) node26);
        boolean boolean55 = node10.isTrue();
        boolean boolean56 = node10.isScript();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        node10.addChildrenToFront(node61);
        com.google.javascript.rhino.InputId inputId65 = null;
        node10.setInputId(inputId65);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isOptionalArg();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        java.lang.String str19 = node14.checkTreeEquals(node17);
        boolean boolean20 = node14.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node14.getJSDocInfo();
        boolean boolean22 = node14.isDebugger();
        boolean boolean23 = node14.isTrue();
        boolean boolean24 = node14.isInstanceOf();
        int int25 = node14.getType();
        boolean boolean26 = node14.isAssignAdd();
        int int27 = node1.getIndexOfChild(node14);
        boolean boolean29 = node1.getBooleanProp(40);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 39 + "'", int25 == 39);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        boolean boolean30 = node15.isRegExp();
        boolean boolean31 = node15.isQualifiedName();
        boolean boolean32 = node15.isFor();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(0, node15);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node15.setJSType(jSType34);
        boolean boolean36 = node15.isReturn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isSwitch();
        boolean boolean31 = node1.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        boolean boolean39 = node4.isQualifiedName();
        boolean boolean40 = node4.isScript();
        com.google.javascript.rhino.Node node41 = node4.getParent();
        boolean boolean42 = node4.isIf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        java.lang.String str17 = node14.getSourceFileName();
        com.google.javascript.rhino.Node node18 = node14.getNext();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        node48.setSourceEncodedPositionForTree((int) (short) 0);
        node48.setLineno((int) ' ');
        boolean boolean53 = node48.isCatch();
        boolean boolean54 = node48.isDebugger();
        com.google.javascript.rhino.Node node55 = node23.srcrefTree(node48);
        boolean boolean56 = node23.isString();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(40, node59, 100, 100);
        boolean boolean63 = node62.hasChildren();
        node23.addChildToFront(node62);
        boolean boolean65 = node23.isSwitch();
        com.google.javascript.rhino.Node node66 = node14.useSourceInfoIfMissingFromForTree(node23);
        java.lang.Class<?> wildcardClass67 = node66.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '#', nodeArray7, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        node26.setSourceEncodedPositionForTree((int) (short) 0);
        node26.setLineno((int) ' ');
        boolean boolean31 = node26.isCatch();
        boolean boolean32 = node26.isDebugger();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        boolean boolean52 = node34.isTypeOf();
        com.google.javascript.rhino.Node node53 = node26.copyInformationFromForTree(node34);
        node10.putProp((int) (byte) 1, (java.lang.Object) node26);
        boolean boolean55 = node10.isThrow();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        int int4 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node1.getJsDocBuilderForNode();
        boolean boolean31 = node1.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        boolean boolean44 = node34.isVoid();
        boolean boolean45 = node34.isIf();
        int int47 = node34.getIntProp(2);
        com.google.javascript.rhino.Node node48 = node1.useSourceInfoIfMissingFrom(node34);
        boolean boolean49 = node48.isTypeOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        boolean boolean22 = node18.isHook();
        boolean boolean23 = node18.isVar();
        boolean boolean24 = node18.isCatch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        node27.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(37, nodeArray2, (int) (byte) -1, 29);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray2);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        boolean boolean35 = node4.isRegExp();
        boolean boolean36 = node4.isDebugger();
        node4.putIntProp(0, 100);
        boolean boolean40 = node4.isComma();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int9 = node8.getChildCount();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        java.lang.String str16 = node11.checkTreeEquals(node14);
        boolean boolean17 = node11.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node11.getJSDocInfo();
        boolean boolean19 = node11.isDebugger();
        boolean boolean20 = node11.isTrue();
        com.google.javascript.rhino.Node node21 = node8.copyInformationFrom(node11);
        boolean boolean22 = node11.isVoid();
        com.google.javascript.rhino.Node node23 = node11.getParent();
        node4.addChildToFront(node11);
        boolean boolean25 = node11.isGetProp();
        com.google.javascript.rhino.InputId inputId26 = node11.getInputId();
        com.google.javascript.rhino.Node node27 = node11.getLastSibling();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node4.isAdd();
        boolean boolean8 = node4.isNE();
        java.lang.String str9 = node4.toStringTree();
        int int10 = node4.getChildCount();
        node4.setLength(12);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 40.0\n" + "'", str9, "NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        int int55 = node34.getLength();
        boolean boolean56 = node34.isLabel();
        com.google.javascript.rhino.Node node57 = node1.copyInformationFrom(node34);
        boolean boolean58 = node57.isCall();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int61 = node60.getChildCount();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        java.lang.String str68 = node63.checkTreeEquals(node66);
        boolean boolean69 = node63.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = node63.getJSDocInfo();
        boolean boolean71 = node63.isDebugger();
        boolean boolean72 = node63.isTrue();
        com.google.javascript.rhino.Node node73 = node60.copyInformationFrom(node63);
        boolean boolean74 = node63.isVoid();
        boolean boolean75 = node63.isUnscopedQualifiedName();
        boolean boolean76 = node63.isAdd();
        com.google.javascript.rhino.Node node77 = node57.srcref(node63);
        boolean boolean78 = node77.isOr();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node4.isGetElem();
        boolean boolean8 = node4.isUnscopedQualifiedName();
        boolean boolean9 = node4.isVar();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(0, "STRING NUMBER 40.0\n");
        node4.addChildrenToFront(node12);
        node4.setSourceEncodedPosition(44);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isComma();
        boolean boolean10 = node1.isGetElem();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = node1.hasChild(node13);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node1.setJSDocInfo(jSDocInfo15);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '#', nodeArray7, (int) (short) 1, 1);
        node10.setCharno(8);
        boolean boolean13 = node10.isTry();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = null;
        node3.setJSDocInfo(jSDocInfo21);
        node3.detachChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean26 = node25.isGetProp();
        boolean boolean27 = node25.isUnscopedQualifiedName();
        boolean boolean28 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node29 = node3.copyInformationFrom(node25);
        node25.addSuppression("NUMBER 40.0\n");
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] { node25 };
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(39, nodeArray32, 37, 51);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) ' ', nodeArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeArray32);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(44);
        boolean boolean2 = node1.isCase();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean2 = node1.isFalse();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder3 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node4 = node1.getFirstChild();
        node1.setType(4095);
        boolean boolean7 = node1.isDebugger();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(16, 0, 53);
        boolean boolean4 = node3.isGetterDef();
        boolean boolean5 = node3.isNull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        boolean boolean16 = node4.isTypeOf();
        boolean boolean17 = node4.isSwitch();
        boolean boolean18 = node4.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setAllFlags();
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        boolean boolean19 = node14.isDefaultCase();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node14.getStaticSourceFile();
        boolean boolean21 = node14.isExprResult();
        boolean boolean22 = node14.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("BITXOR");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        boolean boolean24 = node1.isObjectLit();
        node1.setSourceEncodedPositionForTree(47);
        int int27 = node1.getLength();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(40, node30, 100, 100);
        boolean boolean34 = node33.isComma();
        node33.setCharno(35);
        boolean boolean37 = node33.isCase();
        int int38 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node39 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.replaceChildAfter(node33, node39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        boolean boolean50 = node49.isComma();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean53 = node52.isGetProp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        node68.setSourceEncodedPositionForTree((int) (short) 0);
        int int72 = node68.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node73 = node52.useSourceInfoFromForTree(node68);
        boolean boolean74 = node73.isContinue();
        com.google.javascript.rhino.Node node75 = node49.srcref(node73);
        com.google.javascript.rhino.Node node76 = node4.useSourceInfoFrom(node49);
        node76.setVarArgs(true);
        boolean boolean79 = node76.isBreak();
        boolean boolean80 = node76.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        boolean boolean18 = node4.isNoSideEffectsCall();
        boolean boolean19 = node4.isFor();
        boolean boolean20 = node4.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 2);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        boolean boolean28 = node2.isOnlyModifiesThisCall();
        boolean boolean29 = node2.isDec();
        boolean boolean30 = node2.isVoid();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        com.google.javascript.rhino.Node node71 = node70.cloneNode();
        node71.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder74 = node71.new FileLevelJsDocBuilder();
        boolean boolean75 = node71.isCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        int int32 = node1.getIntProp((int) (byte) 100);
        node1.setType(54);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        boolean boolean38 = node36.isThrow();
        boolean boolean39 = node1.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node node40 = node36.cloneTree();
        boolean boolean41 = node40.isAssignAdd();
        node40.setDouble((double) 4095);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean25 = node24.isGetProp();
        boolean boolean26 = node24.isUnscopedQualifiedName();
        boolean boolean27 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node28 = node2.copyInformationFrom(node24);
        node24.addSuppression("NUMBER 40.0\n");
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] { node24 };
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(39, nodeArray31, 37, 51);
        boolean boolean35 = node34.isOr();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node34.siblings();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node1.isTypeOf();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = null;
        node21.setJSDocInfo(jSDocInfo39);
        node21.detachChildren();
        int int42 = node21.getLength();
        boolean boolean43 = node21.isTry();
        boolean boolean44 = node21.isContinue();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node21.addChildToFront(node46);
        boolean boolean48 = node21.isDebugger();
        com.google.javascript.rhino.Node node49 = node1.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        com.google.javascript.rhino.Node node68 = node51.useSourceInfoIfMissingFrom(node66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = null;
        node51.setJSDocInfo(jSDocInfo69);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean73 = node51.hasChild(node72);
        com.google.javascript.rhino.Node node74 = node21.srcref(node72);
        boolean boolean75 = node21.isQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isOptionalArg();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        java.lang.String str19 = node14.checkTreeEquals(node17);
        boolean boolean20 = node14.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node14.getJSDocInfo();
        boolean boolean22 = node14.isDebugger();
        boolean boolean23 = node14.isTrue();
        boolean boolean24 = node14.isInstanceOf();
        int int25 = node14.getType();
        boolean boolean26 = node14.isAssignAdd();
        int int27 = node1.getIndexOfChild(node14);
        boolean boolean28 = node14.isFunction();
        boolean boolean29 = node14.isOptionalArg();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node14.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 39 + "'", int25 == 39);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 10, 45, 51);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100.0f, 38, 29);
        boolean boolean4 = node3.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable29 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor30 = ancestorIterable29.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(ancestorIterable29);
        org.junit.Assert.assertNotNull(nodeItor30);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        boolean boolean32 = node22.isInstanceOf();
        int int33 = node22.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node35.setJSDocInfo(jSDocInfo53);
        node35.detachChildren();
        node22.addChildToBack(node35);
        node22.setDouble(0.0d);
        node5.addChildToFront(node22);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        boolean boolean69 = node61.isDebugger();
        boolean boolean70 = node61.isTrue();
        boolean boolean71 = node61.isVoid();
        boolean boolean72 = node61.isIf();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int75 = node74.getChildCount();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node78 = node77.removeChildren();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node81 = node80.removeChildren();
        java.lang.String str82 = node77.checkTreeEquals(node80);
        boolean boolean83 = node77.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = node77.getJSDocInfo();
        boolean boolean85 = node77.isDebugger();
        boolean boolean86 = node77.isTrue();
        com.google.javascript.rhino.Node node87 = node74.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node88 = node61.clonePropsFrom(node74);
        boolean boolean89 = node61.isRegExp();
        com.google.javascript.rhino.Node node90 = node5.srcrefTree(node61);
        boolean boolean91 = node61.isAssignAdd();
        java.lang.String str92 = node61.toStringTree();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSDocInfo84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "NUMBER 40.0\n" + "'", str92, "NUMBER 40.0\n");
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        node1.setType(12);
        boolean boolean13 = node1.isTry();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node node19 = node18.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node18.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder20.append("Node tree inequality:\nTree1:\nNUMBER 16.0\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: NUMBER 16.0\n\n\nSubtree2: NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        int int14 = node1.getIntProp(2);
        node1.setSourceFileForTesting("");
        node1.setSourceEncodedPosition((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = node1.cloneNode();
        java.lang.String str20 = node19.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER 40.0 [source_file: ]" + "'", str20, "NUMBER 40.0 [source_file: ]");
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isEmpty();
        boolean boolean31 = node1.isCall();
        int int32 = node1.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 39 + "'", int32 == 39);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        boolean boolean3 = node1.isCatch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.putIntProp((-1), (int) (byte) -1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        java.lang.String str38 = node33.checkTreeEquals(node36);
        com.google.javascript.rhino.Node node39 = node28.useSourceInfoFromForTree(node36);
        boolean boolean40 = node28.isGetProp();
        boolean boolean41 = node28.isOr();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        int int55 = node34.getLength();
        boolean boolean56 = node34.isLabel();
        com.google.javascript.rhino.Node node57 = node1.copyInformationFrom(node34);
        java.lang.String str58 = node57.getSourceFileName();
        com.google.javascript.rhino.Node node59 = node57.getParent();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(node59);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setCharno(1);
        boolean boolean32 = node28.getBooleanProp((int) (short) -1);
        boolean boolean33 = node28.isName();
        boolean boolean34 = node28.isNE();
        com.google.javascript.rhino.InputId inputId35 = null;
        node28.setInputId(inputId35);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        boolean boolean48 = node38.isVoid();
        boolean boolean49 = node38.isCall();
        boolean boolean50 = node38.isNot();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int54 = node53.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node53.siblings();
        node53.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] { node53 };
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) '#', nodeArray58, (int) (short) 1, 1);
        boolean boolean62 = node61.isInc();
        boolean boolean63 = node61.isLocalResultCall();
        com.google.javascript.rhino.Node node64 = node38.useSourceInfoFromForTree(node61);
        boolean boolean65 = node28.isEquivalentTo(node38);
        com.google.javascript.rhino.InputId inputId66 = node28.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(inputId66);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        boolean boolean33 = node23.isVoid();
        boolean boolean34 = node23.isIf();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node50 = node23.clonePropsFrom(node36);
        boolean boolean51 = node36.isRegExp();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int67 = node66.getChildCount();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node70 = node69.removeChildren();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        java.lang.String str74 = node69.checkTreeEquals(node72);
        boolean boolean75 = node69.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = node69.getJSDocInfo();
        boolean boolean77 = node69.isDebugger();
        boolean boolean78 = node69.isTrue();
        com.google.javascript.rhino.Node node79 = node66.copyInformationFrom(node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = null;
        node69.setJSDocInfo(jSDocInfo80);
        node54.putProp((int) (short) 0, (java.lang.Object) node69);
        node36.putProp(0, (java.lang.Object) node69);
        boolean boolean84 = node18.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node node85 = node18.cloneNode();
        node18.setSourceFileForTesting("");
        node18.detachChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean2 = node1.isFalse();
        boolean boolean3 = node1.isRegExp();
        com.google.javascript.rhino.Node node4 = node1.cloneNode();
        int int5 = node1.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int13 = node12.getChildCount();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node16 = node15.removeChildren();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        java.lang.String str20 = node15.checkTreeEquals(node18);
        boolean boolean21 = node15.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = node15.getJSDocInfo();
        boolean boolean23 = node15.isDebugger();
        boolean boolean24 = node15.isTrue();
        com.google.javascript.rhino.Node node25 = node12.copyInformationFrom(node15);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node29 = node12.useSourceInfoIfMissingFrom(node27);
        node29.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node33 = node3.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node node34 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildBefore(node33, node34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.setSourceEncodedPosition((int) (short) -1);
        boolean boolean18 = node4.isThrow();
        java.util.Set<java.lang.String> strSet19 = node4.getDirectives();
        boolean boolean20 = node4.isDo();
        boolean boolean21 = node4.isParamList();
        boolean boolean22 = node4.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node4.isGetElem();
        java.lang.Object obj9 = node4.getProp((int) '4');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        boolean boolean22 = node18.isBreak();
        boolean boolean23 = node18.isCall();
        boolean boolean24 = node18.isTrue();
        boolean boolean25 = node18.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isCatch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        com.google.javascript.rhino.Node node27 = node14.useSourceInfoIfMissingFrom(node21);
        boolean boolean28 = node14.isFunction();
        boolean boolean29 = node14.isParamList();
        boolean boolean30 = node14.isGetterDef();
        boolean boolean31 = node14.isWhile();
        // The following exception was thrown during execution in test generation
        try {
            node14.setString("NUMBER 1.0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 40.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        boolean boolean16 = node4.isTypeOf();
        boolean boolean17 = node4.isSwitch();
        java.lang.String str18 = node4.getQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        node8.setType(41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node8.getJSDocInfo();
        boolean boolean41 = node8.isThrow();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node44.siblings();
        node44.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] { node44 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) '#', nodeArray49, (int) (short) 1, 1);
        boolean boolean53 = node52.isInc();
        com.google.javascript.rhino.InputId inputId54 = node52.getInputId();
        int int55 = node52.getCharno();
        node52.detachChildren();
        java.lang.Object obj58 = node52.getProp(50);
        node8.addChildrenToBack(node52);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(inputId54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '#', nodeArray7, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        node26.setSourceEncodedPositionForTree((int) (short) 0);
        node26.setLineno((int) ' ');
        boolean boolean31 = node26.isCatch();
        boolean boolean32 = node26.isDebugger();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        boolean boolean52 = node34.isTypeOf();
        com.google.javascript.rhino.Node node53 = node26.copyInformationFromForTree(node34);
        node10.putProp((int) (byte) 1, (java.lang.Object) node26);
        boolean boolean55 = node10.hasOneChild();
        java.lang.String str56 = node10.getQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            int int58 = node10.getExistingIntProp(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 32");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(37, nodeArray3, (int) (byte) -1, 29);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(45, nodeArray3, 8, 0);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(54, nodeArray3);
        org.junit.Assert.assertNotNull(nodeArray3);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        boolean boolean39 = node8.isAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        boolean boolean20 = node4.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node4.siblings();
        int int22 = node4.getChildCount();
        boolean boolean23 = node4.isBlock();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        boolean boolean39 = node28.isVoid();
        java.lang.String str40 = node28.getSourceFileName();
        int int41 = node4.getIndexOfChild(node28);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node28.setJSType(jSType42);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.wasEmptyNode();
        boolean boolean17 = node4.isDefaultCase();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = null;
        node34.setJSDocInfo(jSDocInfo45);
        node19.putProp((int) (short) 0, (java.lang.Object) node34);
        boolean boolean48 = node19.isIf();
        int int50 = node19.getIntProp((int) (byte) 100);
        node19.setType(54);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int55 = node54.getChildCount();
        boolean boolean56 = node54.isThrow();
        boolean boolean57 = node19.isEquivalentToTyped(node54);
        com.google.javascript.rhino.Node node58 = node54.cloneTree();
        boolean boolean59 = node58.isAssignAdd();
        boolean boolean60 = node58.isIn();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean63 = node62.isFalse();
        boolean boolean64 = node62.isVarArgs();
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildAfter(node58, node62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        node1.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        boolean boolean17 = node7.isFromExterns();
        boolean boolean18 = node7.isOptionalArg();
        com.google.javascript.rhino.Node node19 = node1.copyInformationFrom(node7);
        node1.setVarArgs(false);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        node1.setStaticSourceFile(staticSourceFile22);
        boolean boolean24 = node1.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        boolean boolean21 = node20.isNot();
        boolean boolean22 = node20.isQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "NUMBER 40.0\n    NUMBER 40.0\n", 53, (int) (byte) -1);
        boolean boolean5 = node4.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isTry();
        boolean boolean25 = node2.isContinue();
        com.google.javascript.rhino.Node node26 = node2.getLastChild();
        int int27 = node2.getSourcePosition();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 1, node2, (int) (short) 1, 35);
        boolean boolean32 = node30.getBooleanProp(4);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        java.util.Set<java.lang.String> strSet23 = node17.getDirectives();
        int int24 = node4.getIndexOfChild(node17);
        boolean boolean25 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        java.lang.String str35 = node30.checkTreeEquals(node33);
        boolean boolean36 = node30.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node30.getJSDocInfo();
        boolean boolean38 = node30.isDebugger();
        boolean boolean39 = node30.isTrue();
        com.google.javascript.rhino.Node node40 = node27.copyInformationFrom(node30);
        boolean boolean41 = node30.isHook();
        boolean boolean42 = node30.isRegExp();
        boolean boolean43 = node30.isUnscopedQualifiedName();
        boolean boolean44 = node30.isNumber();
        com.google.javascript.rhino.Node node45 = node4.srcref(node30);
        node4.putIntProp(16, (int) (byte) -1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isDebugger();
        boolean boolean12 = node3.isTrue();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node18.setJSDocInfo(jSDocInfo29);
        node3.putProp((int) (short) 0, (java.lang.Object) node18);
        com.google.javascript.rhino.Node node32 = node1.copyInformationFrom(node3);
        node3.setLineno(0);
        boolean boolean35 = node3.isTypeOf();
        boolean boolean36 = node3.isComma();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        boolean boolean32 = node22.isInstanceOf();
        int int33 = node22.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node35.setJSDocInfo(jSDocInfo53);
        node35.detachChildren();
        node22.addChildToBack(node35);
        node22.setDouble(0.0d);
        node5.addChildToFront(node22);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        boolean boolean69 = node61.isDebugger();
        boolean boolean70 = node61.isTrue();
        boolean boolean71 = node61.isVoid();
        boolean boolean72 = node61.isIf();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int75 = node74.getChildCount();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node78 = node77.removeChildren();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node81 = node80.removeChildren();
        java.lang.String str82 = node77.checkTreeEquals(node80);
        boolean boolean83 = node77.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = node77.getJSDocInfo();
        boolean boolean85 = node77.isDebugger();
        boolean boolean86 = node77.isTrue();
        com.google.javascript.rhino.Node node87 = node74.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node88 = node61.clonePropsFrom(node74);
        boolean boolean89 = node61.isRegExp();
        com.google.javascript.rhino.Node node90 = node5.srcrefTree(node61);
        boolean boolean91 = node61.isComma();
        com.google.javascript.rhino.Node node92 = node61.getLastChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSDocInfo84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(node92);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        int int32 = node1.getLength();
        int int33 = node1.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((-1.0d), (int) '#', 15);
        boolean boolean4 = node3.isWith();
        com.google.javascript.rhino.Node node5 = node3.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node1.isTypeOf();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = null;
        node21.setJSDocInfo(jSDocInfo39);
        node21.detachChildren();
        int int42 = node21.getLength();
        boolean boolean43 = node21.isTry();
        boolean boolean44 = node21.isContinue();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node21.addChildToFront(node46);
        boolean boolean48 = node21.isDebugger();
        com.google.javascript.rhino.Node node49 = node1.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        com.google.javascript.rhino.Node node68 = node51.useSourceInfoIfMissingFrom(node66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = null;
        node51.setJSDocInfo(jSDocInfo69);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean73 = node51.hasChild(node72);
        com.google.javascript.rhino.Node node74 = node21.srcref(node72);
        boolean boolean75 = node21.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 100, "hi!");
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.setSourceEncodedPosition((int) (short) -1);
        boolean boolean19 = node5.isThrow();
        java.util.Set<java.lang.String> strSet20 = node5.getDirectives();
        boolean boolean21 = node5.isIn();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(48, node5, 36, (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node27.siblings();
        node27.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] { node27 };
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) '#', nodeArray32, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        boolean boolean47 = node41.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node41.getJSDocInfo();
        boolean boolean49 = node41.isDebugger();
        boolean boolean50 = node41.isTrue();
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node41);
        node51.setSourceEncodedPositionForTree((int) (short) 0);
        node51.setLineno((int) ' ');
        boolean boolean56 = node51.isCatch();
        boolean boolean57 = node51.isDebugger();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int60 = node59.getChildCount();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        java.lang.String str67 = node62.checkTreeEquals(node65);
        boolean boolean68 = node62.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node62.getJSDocInfo();
        boolean boolean70 = node62.isDebugger();
        boolean boolean71 = node62.isTrue();
        com.google.javascript.rhino.Node node72 = node59.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        com.google.javascript.rhino.Node node76 = node59.useSourceInfoIfMissingFrom(node74);
        boolean boolean77 = node59.isTypeOf();
        com.google.javascript.rhino.Node node78 = node51.copyInformationFromForTree(node59);
        node35.putProp((int) (byte) 1, (java.lang.Object) node51);
        boolean boolean80 = node35.isTrue();
        boolean boolean81 = node35.isGetterDef();
        boolean boolean82 = node35.isNew();
        boolean boolean83 = node5.isEquivalentTo(node35);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node86 = node85.removeChildren();
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node89 = node88.removeChildren();
        java.lang.String str90 = node85.checkTreeEquals(node88);
        boolean boolean91 = node85.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo92 = node85.getJSDocInfo();
        boolean boolean93 = node85.isDebugger();
        boolean boolean94 = node85.isTrue();
        boolean boolean95 = node85.isFromExterns();
        com.google.javascript.rhino.Node node96 = null;
        // The following exception was thrown during execution in test generation
        try {
            node5.addChildBefore(node85, node96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(jSDocInfo92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(159748, "STRING ");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        int int4 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearSideEffectFlags();
        int int10 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setThrows();
        int int4 = sideEffectFlags0.valueOf();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearAllFlags();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        int int17 = node14.getSourceOffset();
        boolean boolean18 = node14.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        node19.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        boolean boolean34 = node24.isVoid();
        boolean boolean35 = node24.isIf();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node51 = node24.clonePropsFrom(node37);
        boolean boolean52 = node37.isRegExp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        java.lang.String str60 = node55.checkTreeEquals(node58);
        boolean boolean61 = node55.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = node55.getJSDocInfo();
        boolean boolean63 = node55.isDebugger();
        boolean boolean64 = node55.isTrue();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int68 = node67.getChildCount();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node71 = node70.removeChildren();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        java.lang.String str75 = node70.checkTreeEquals(node73);
        boolean boolean76 = node70.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = node70.getJSDocInfo();
        boolean boolean78 = node70.isDebugger();
        boolean boolean79 = node70.isTrue();
        com.google.javascript.rhino.Node node80 = node67.copyInformationFrom(node70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = null;
        node70.setJSDocInfo(jSDocInfo81);
        node55.putProp((int) (short) 0, (java.lang.Object) node70);
        node37.putProp(0, (java.lang.Object) node70);
        boolean boolean85 = node19.isEquivalentToTyped(node37);
        boolean boolean86 = node37.hasOneChild();
        boolean boolean87 = node37.hasOneChild();
        boolean boolean88 = node37.isSwitch();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(10, node37);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSDocInfo62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSDocInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean25 = node24.isGetProp();
        boolean boolean26 = node24.isUnscopedQualifiedName();
        boolean boolean27 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node28 = node2.copyInformationFrom(node24);
        node24.addSuppression("NUMBER 40.0\n");
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] { node24 };
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(39, nodeArray31, 37, 51);
        boolean boolean35 = node34.isHook();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        node4.setVarArgs(false);
        node4.setType(4);
        boolean boolean38 = node4.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(45);
        boolean boolean2 = node1.isNot();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        boolean boolean18 = node7.isNE();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        boolean boolean30 = node20.isVoid();
        boolean boolean31 = node20.isIf();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node47 = node20.clonePropsFrom(node33);
        boolean boolean48 = node20.isRegExp();
        boolean boolean49 = node20.isCall();
        java.lang.String str50 = node20.toString();
        boolean boolean51 = node7.isEquivalentToTyped(node20);
        java.lang.String str52 = node20.toStringTree();
        com.google.javascript.rhino.Node node53 = node1.copyInformationFrom(node20);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        java.lang.String str60 = node55.checkTreeEquals(node58);
        boolean boolean61 = node55.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = node55.getJSDocInfo();
        boolean boolean63 = node55.isDebugger();
        boolean boolean64 = node55.isTrue();
        boolean boolean65 = node55.isVoid();
        boolean boolean66 = node55.isIf();
        int int68 = node55.getIntProp(2);
        node55.setSourceFileForTesting("");
        node55.setSourceEncodedPosition((int) (byte) -1);
        int int73 = node1.getIndexOfChild(node55);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER 40.0" + "'", str50, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER 40.0\n" + "'", str52, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSDocInfo62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        int int39 = node8.getSourcePosition();
        boolean boolean40 = node8.isRegExp();
        node8.setType((int) (byte) -1);
        boolean boolean43 = node8.isComma();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        boolean boolean31 = node1.isReturn();
        boolean boolean32 = node1.isThis();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        double double48 = node37.getDouble();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node54 = node53.removeChildren();
        java.lang.String str55 = node50.checkTreeEquals(node53);
        java.util.Set<java.lang.String> strSet56 = node50.getDirectives();
        int int57 = node37.getIndexOfChild(node50);
        int int58 = node50.getSourcePosition();
        boolean boolean59 = node50.isDo();
        boolean boolean60 = node50.isSetterDef();
        boolean boolean61 = node50.isQuotedString();
        com.google.javascript.rhino.Node node62 = node1.useSourceInfoIfMissingFromForTree(node50);
        boolean boolean63 = node62.isWhile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 40.0d + "'", double48 == 40.0d);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        java.lang.String str30 = node14.toString();
        boolean boolean31 = node14.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER 40.0" + "'", str30, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 42, 32, 4095);
        com.google.javascript.rhino.Node node4 = node3.getParent();
        boolean boolean5 = node3.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        java.lang.String str29 = node1.getQualifiedName();
        boolean boolean30 = node1.isBlock();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        boolean boolean42 = node32.isVoid();
        boolean boolean43 = node32.isIf();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        com.google.javascript.rhino.Node node59 = node32.clonePropsFrom(node45);
        node59.setCharno(1);
        boolean boolean63 = node59.getBooleanProp((int) (short) -1);
        com.google.javascript.rhino.Node node64 = node59.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType65 = node64.getJSType();
        boolean boolean66 = node1.isEquivalentTo(node64);
        boolean boolean67 = node64.isSwitch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(45);
        boolean boolean2 = node1.isNot();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        boolean boolean18 = node7.isNE();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        boolean boolean30 = node20.isVoid();
        boolean boolean31 = node20.isIf();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node47 = node20.clonePropsFrom(node33);
        boolean boolean48 = node20.isRegExp();
        boolean boolean49 = node20.isCall();
        java.lang.String str50 = node20.toString();
        boolean boolean51 = node7.isEquivalentToTyped(node20);
        java.lang.String str52 = node20.toStringTree();
        com.google.javascript.rhino.Node node53 = node1.copyInformationFrom(node20);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        boolean boolean69 = node58.isHook();
        boolean boolean70 = node58.isCall();
        node58.detachChildren();
        node53.addChildrenToFront(node58);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER 40.0" + "'", str50, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER 40.0\n" + "'", str52, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.detachChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        double double33 = node22.getDouble();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        java.util.Set<java.lang.String> strSet41 = node35.getDirectives();
        int int42 = node22.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(39, node5, node22);
        boolean boolean44 = node43.isFor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = null;
        node43.setJSDocInfo(jSDocInfo45);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 40.0d + "'", double33 == 40.0d);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        node15.setSourceEncodedPositionForTree((int) (short) 0);
        node15.setLineno((int) ' ');
        boolean boolean20 = node15.isCatch();
        boolean boolean21 = node15.isDebugger();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoIfMissingFrom(node38);
        boolean boolean41 = node23.isTypeOf();
        com.google.javascript.rhino.Node node42 = node15.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] { node15 };
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(47, nodeArray43, 39, (int) (byte) 1);
        boolean boolean47 = node46.isDefaultCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        node15.setSourceEncodedPositionForTree((int) (short) 0);
        int int19 = node15.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node15.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node15.isDefaultCase();
        int int23 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("NUMBER 40.0 32", (int) (byte) 10, 50);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, node15, node27);
        boolean boolean29 = node15.isInc();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(40, node24, 100, 100);
        boolean boolean28 = node18.isEquivalentToTyped(node24);
        boolean boolean29 = node18.isCatch();
        boolean boolean30 = node18.isNumber();
        com.google.javascript.rhino.InputId inputId31 = node18.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(inputId31);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(0);
        int int2 = sideEffectFlags1.valueOf();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        node1.setSourceFileForTesting("");
        boolean boolean6 = node1.isComma();
        node1.setSourceFileForTesting("STRING NUMBER 40.0\n");
        boolean boolean9 = node1.isFunction();
        node1.setLineno((int) '4');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        boolean boolean32 = node22.isInstanceOf();
        int int33 = node22.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node35.setJSDocInfo(jSDocInfo53);
        node35.detachChildren();
        node22.addChildToBack(node35);
        node22.setDouble(0.0d);
        node5.addChildToFront(node22);
        boolean boolean60 = node22.isSyntheticBlock();
        boolean boolean61 = node22.isThrow();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = null;
        node22.setJSDocInfo(jSDocInfo62);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        node1.setVarArgs(false);
        java.lang.Object obj13 = node1.getProp((int) (byte) 1);
        node1.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.setSourceEncodedPosition((int) (short) -1);
        boolean boolean18 = node4.isThrow();
        java.util.Set<java.lang.String> strSet19 = node4.getDirectives();
        boolean boolean20 = node4.isDo();
        boolean boolean21 = node4.isVar();
        boolean boolean22 = node4.isOr();
        boolean boolean23 = node4.isComma();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isOptionalArg();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        java.lang.String str19 = node14.checkTreeEquals(node17);
        boolean boolean20 = node14.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node14.getJSDocInfo();
        boolean boolean22 = node14.isDebugger();
        boolean boolean23 = node14.isTrue();
        boolean boolean24 = node14.isInstanceOf();
        int int25 = node14.getType();
        boolean boolean26 = node14.isAssignAdd();
        int int27 = node1.getIndexOfChild(node14);
        node1.setOptionalArg(true);
        java.util.Set<java.lang.String> strSet30 = node1.getDirectives();
        node1.setLength(10);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        boolean boolean44 = node34.isVoid();
        boolean boolean45 = node34.isIf();
        int int47 = node34.getIntProp(2);
        node34.setIsSyntheticBlock(true);
        boolean boolean50 = node34.isOptionalArg();
        java.lang.String str51 = node1.checkTreeEquals(node34);
        boolean boolean52 = node34.isReturn();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int55 = node54.getChildCount();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        java.lang.String str62 = node57.checkTreeEquals(node60);
        boolean boolean63 = node57.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = node57.getJSDocInfo();
        boolean boolean65 = node57.isDebugger();
        boolean boolean66 = node57.isTrue();
        com.google.javascript.rhino.Node node67 = node54.copyInformationFrom(node57);
        boolean boolean68 = node57.isHook();
        boolean boolean69 = node57.isCall();
        boolean boolean70 = node57.isContinue();
        boolean boolean71 = node57.isNull();
        node34.addChildToFront(node57);
        boolean boolean73 = node34.isObjectLit();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int76 = node75.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable77 = node75.siblings();
        node75.setSourceFileForTesting("");
        boolean boolean80 = node75.isComma();
        int int81 = node75.getSideEffectFlags();
        boolean boolean82 = node75.isNE();
        boolean boolean83 = node34.hasChild(node75);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 39 + "'", int25 == 39);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSDocInfo64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(nodeIterable77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        int int21 = node14.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType22 = node14.getJSType();
        boolean boolean23 = node14.isNoSideEffectsCall();
        boolean boolean24 = node14.isAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int27 = node26.getChildCount();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        java.lang.String str34 = node29.checkTreeEquals(node32);
        boolean boolean35 = node29.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node29.getJSDocInfo();
        boolean boolean37 = node29.isDebugger();
        boolean boolean38 = node29.isTrue();
        com.google.javascript.rhino.Node node39 = node26.copyInformationFrom(node29);
        node39.setSourceEncodedPositionForTree((int) (short) 0);
        node39.setLineno((int) ' ');
        boolean boolean44 = node39.isCatch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        java.lang.String str51 = node46.checkTreeEquals(node49);
        com.google.javascript.rhino.Node node52 = node39.useSourceInfoIfMissingFrom(node46);
        boolean boolean53 = node39.isFunction();
        boolean boolean54 = node39.isParamList();
        com.google.javascript.rhino.Node node55 = node14.srcref(node39);
        node39.setCharno(35);
        int int58 = node39.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        java.lang.String str17 = node14.getSourceFileName();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean20 = node19.isGetProp();
        boolean boolean21 = node19.isUnscopedQualifiedName();
        boolean boolean22 = node19.isAssignAdd();
        java.lang.String str23 = node19.toString();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node node43 = node19.copyInformationFrom(node25);
        boolean boolean44 = node19.isRegExp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node19.getJSDocInfo();
        com.google.javascript.rhino.Node node46 = node14.copyInformationFrom(node19);
        java.lang.String str50 = node14.toString(false, true, false);
        node14.setLineno(100);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = node14.getExistingIntProp(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 40.0" + "'", str23, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER 40.0" + "'", str50, "NUMBER 40.0");
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        boolean boolean21 = node20.isNot();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int25 = node24.getChildCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        java.lang.String str35 = node30.checkTreeEquals(node33);
        boolean boolean36 = node30.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node30.getJSDocInfo();
        boolean boolean38 = node30.isDebugger();
        boolean boolean39 = node30.isTrue();
        com.google.javascript.rhino.Node node40 = node27.copyInformationFrom(node30);
        double double41 = node30.getDouble();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int44 = node43.getChildCount();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        java.lang.String str51 = node46.checkTreeEquals(node49);
        boolean boolean52 = node46.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = node46.getJSDocInfo();
        boolean boolean54 = node46.isDebugger();
        boolean boolean55 = node46.isTrue();
        com.google.javascript.rhino.Node node56 = node43.copyInformationFrom(node46);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = null;
        node46.setJSDocInfo(jSDocInfo57);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 0, node24, node30, node46);
        java.lang.String str60 = node30.toStringTree();
        node30.setDouble((double) (byte) 10);
        com.google.javascript.rhino.Node node63 = node20.clonePropsFrom(node30);
        boolean boolean64 = node30.isVoid();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 40.0d + "'", double41 == 40.0d);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSDocInfo53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER 40.0\n" + "'", str60, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        boolean boolean32 = node22.isInstanceOf();
        int int33 = node22.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node35.setJSDocInfo(jSDocInfo53);
        node35.detachChildren();
        node22.addChildToBack(node35);
        node22.setDouble(0.0d);
        node5.addChildToFront(node22);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        boolean boolean69 = node61.isDebugger();
        boolean boolean70 = node61.isTrue();
        boolean boolean71 = node61.isVoid();
        boolean boolean72 = node61.isIf();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int75 = node74.getChildCount();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node78 = node77.removeChildren();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node81 = node80.removeChildren();
        java.lang.String str82 = node77.checkTreeEquals(node80);
        boolean boolean83 = node77.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = node77.getJSDocInfo();
        boolean boolean85 = node77.isDebugger();
        boolean boolean86 = node77.isTrue();
        com.google.javascript.rhino.Node node87 = node74.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node88 = node61.clonePropsFrom(node74);
        boolean boolean89 = node61.isRegExp();
        com.google.javascript.rhino.Node node90 = node5.srcrefTree(node61);
        boolean boolean92 = node90.getBooleanProp(40);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSDocInfo84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 16);
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable3 = node1.getAncestors();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        java.lang.String str7 = node1.checkTreeEquals(node5);
        boolean boolean8 = node1.hasOneChild();
        com.google.javascript.rhino.Node node9 = node1.removeFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(ancestorIterable3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 16.0\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: NUMBER 16.0\n\n\nSubtree2: NUMBER 40.0\n" + "'", str7, "Node tree inequality:\nTree1:\nNUMBER 16.0\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: NUMBER 16.0\n\n\nSubtree2: NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node25 = node1.getLastChild();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(40, "STRING NUMBER 40.0\n", 4, 52);
        node1.addChildToFront(node30);
        boolean boolean32 = node1.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        boolean boolean30 = node14.isQualifiedName();
        com.google.javascript.rhino.Node node31 = node14.removeChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING ", 10, (int) (short) 100);
        com.google.javascript.rhino.InputId inputId4 = null;
        node3.setInputId(inputId4);
        boolean boolean6 = node3.isTrue();
        boolean boolean7 = node3.isInstanceOf();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node3.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = node4.getNext();
        boolean boolean19 = node4.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node15.isComma();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean19 = node18.isGetProp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        node34.setSourceEncodedPositionForTree((int) (short) 0);
        int int38 = node34.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node39 = node18.useSourceInfoFromForTree(node34);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node15.srcref(node39);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node39.getJSDocInfo();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node61 = node44.useSourceInfoIfMissingFrom(node59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = null;
        node44.setJSDocInfo(jSDocInfo62);
        node44.detachChildren();
        int int65 = node44.getLength();
        node44.putIntProp(1, (int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(45, node39, node44, 0, (int) ' ');
        boolean boolean72 = node39.isInstanceOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        boolean boolean29 = node1.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(37, "NUMBER 40.0 [source_file: ]");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(54, 36, 50);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '#', nodeArray7, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        node26.setSourceEncodedPositionForTree((int) (short) 0);
        node26.setLineno((int) ' ');
        boolean boolean31 = node26.isCatch();
        boolean boolean32 = node26.isDebugger();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        boolean boolean52 = node34.isTypeOf();
        com.google.javascript.rhino.Node node53 = node26.copyInformationFromForTree(node34);
        node10.putProp((int) (byte) 1, (java.lang.Object) node26);
        boolean boolean55 = node10.isTrue();
        boolean boolean56 = node10.isScript();
        boolean boolean57 = node10.isCall();
        boolean boolean58 = node10.isCatch();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = node10.getBooleanProp(1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        boolean boolean4 = node1.isReturn();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        boolean boolean16 = node6.isVoid();
        boolean boolean17 = node6.isIf();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node33 = node6.clonePropsFrom(node19);
        com.google.javascript.rhino.jstype.JSType jSType34 = node19.getJSType();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        node49.setSourceEncodedPositionForTree((int) (short) 0);
        node49.setLineno((int) ' ');
        boolean boolean54 = node49.isCatch();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node57 = node56.removeChildren();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        java.lang.String str61 = node56.checkTreeEquals(node59);
        com.google.javascript.rhino.Node node62 = node49.useSourceInfoIfMissingFrom(node56);
        node19.addChildrenToFront(node56);
        com.google.javascript.rhino.Node node64 = node1.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node65 = null;
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int68 = node67.getChildCount();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node71 = node70.removeChildren();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        java.lang.String str75 = node70.checkTreeEquals(node73);
        boolean boolean76 = node70.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = node70.getJSDocInfo();
        boolean boolean78 = node70.isDebugger();
        boolean boolean79 = node70.isTrue();
        com.google.javascript.rhino.Node node80 = node67.copyInformationFrom(node70);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node83 = node82.removeChildren();
        com.google.javascript.rhino.Node node84 = node67.useSourceInfoIfMissingFrom(node82);
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = null;
        node67.setJSDocInfo(jSDocInfo85);
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean89 = node67.hasChild(node88);
        java.lang.String str90 = node88.getSourceFileName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder91 = node88.getJsDocBuilderForNode();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenAfter(node65, node88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSDocInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder91);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(45);
        boolean boolean22 = node21.isNot();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int25 = node24.getChildCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node37 = node24.copyInformationFrom(node27);
        boolean boolean38 = node27.isNE();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        boolean boolean50 = node40.isVoid();
        boolean boolean51 = node40.isIf();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int54 = node53.getChildCount();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node57 = node56.removeChildren();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        java.lang.String str61 = node56.checkTreeEquals(node59);
        boolean boolean62 = node56.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = node56.getJSDocInfo();
        boolean boolean64 = node56.isDebugger();
        boolean boolean65 = node56.isTrue();
        com.google.javascript.rhino.Node node66 = node53.copyInformationFrom(node56);
        com.google.javascript.rhino.Node node67 = node40.clonePropsFrom(node53);
        boolean boolean68 = node40.isRegExp();
        boolean boolean69 = node40.isCall();
        java.lang.String str70 = node40.toString();
        boolean boolean71 = node27.isEquivalentToTyped(node40);
        java.lang.String str72 = node40.toStringTree();
        com.google.javascript.rhino.Node node73 = node21.copyInformationFrom(node40);
        java.lang.String str74 = node4.checkTreeEquals(node73);
        boolean boolean75 = node73.isVoid();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable76 = node73.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(jSDocInfo63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "NUMBER 40.0" + "'", str70, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 40.0\n" + "'", str72, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 40.0 [length: 39]\n\n\nTree2:\nSHEQ\n\n\nSubtree1: NUMBER 40.0 [length: 39]\n\n\nSubtree2: SHEQ\n" + "'", str74, "Node tree inequality:\nTree1:\nNUMBER 40.0 [length: 39]\n\n\nTree2:\nSHEQ\n\n\nSubtree1: NUMBER 40.0 [length: 39]\n\n\nSubtree2: SHEQ\n");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(nodeIterable76);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        com.google.javascript.rhino.Node node71 = node70.cloneNode();
        boolean boolean72 = node70.isFunction();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node3.siblings();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) '#', nodeArray8, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        node27.setSourceEncodedPositionForTree((int) (short) 0);
        node27.setLineno((int) ' ');
        boolean boolean32 = node27.isCatch();
        boolean boolean33 = node27.isDebugger();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        boolean boolean53 = node35.isTypeOf();
        com.google.javascript.rhino.Node node54 = node27.copyInformationFromForTree(node35);
        node11.putProp((int) (byte) 1, (java.lang.Object) node27);
        boolean boolean56 = node11.isTrue();
        boolean boolean57 = node11.isGetterDef();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(12, node11);
        node58.putIntProp(0, 23);
        boolean boolean62 = node58.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        boolean boolean24 = node1.isObjectLit();
        node1.setSourceEncodedPositionForTree(47);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node54 = node37.useSourceInfoIfMissingFrom(node52);
        node54.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node58 = node28.useSourceInfoIfMissingFrom(node54);
        node1.addChildToBack(node28);
        node28.setLineno(46);
        node28.setType(10);
        boolean boolean64 = node28.hasChildren();
        double double65 = node28.getDouble();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 40.0d + "'", double65 == 40.0d);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isComma();
        boolean boolean10 = node1.isInc();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        boolean boolean16 = node14.isComma();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        boolean boolean20 = node18.isThrow();
        node18.setSourceEncodedPositionForTree(35);
        boolean boolean23 = node18.isCase();
        node14.addChildToBack(node18);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int27 = node26.getChildCount();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        java.lang.String str34 = node29.checkTreeEquals(node32);
        boolean boolean35 = node29.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node29.getJSDocInfo();
        boolean boolean37 = node29.isDebugger();
        boolean boolean38 = node29.isTrue();
        com.google.javascript.rhino.Node node39 = node26.copyInformationFrom(node29);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        node54.setSourceEncodedPositionForTree((int) (short) 0);
        node54.setLineno((int) ' ');
        boolean boolean59 = node54.isCatch();
        boolean boolean60 = node54.isDebugger();
        com.google.javascript.rhino.Node node61 = node29.srcrefTree(node54);
        boolean boolean62 = node29.isString();
        boolean boolean63 = node29.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node29.siblings();
        boolean boolean65 = node29.isOptionalArg();
        boolean boolean66 = node29.isIn();
        com.google.javascript.rhino.Node node67 = node18.useSourceInfoFrom(node29);
        boolean boolean68 = node29.isOr();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        boolean boolean30 = node15.isRegExp();
        com.google.javascript.rhino.Node node31 = node15.getLastSibling();
        boolean boolean32 = node31.isNE();
        com.google.javascript.rhino.Node node33 = node31.removeFirstChild();
        node31.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        node37.setStaticSourceFile(staticSourceFile38);
        int int40 = node37.getLength();
        boolean boolean41 = node37.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(10.0d, 45, 15);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        boolean boolean57 = node47.isFromExterns();
        boolean boolean58 = node47.isOptionalArg();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        boolean boolean68 = node60.isDebugger();
        boolean boolean69 = node60.isTrue();
        boolean boolean70 = node60.isInstanceOf();
        int int71 = node60.getType();
        boolean boolean72 = node60.isAssignAdd();
        int int73 = node47.getIndexOfChild(node60);
        node47.setOptionalArg(true);
        int int76 = node47.getLength();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) ' ', node31, node37, node45, node47);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 39 + "'", int71 == 39);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesThis();
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        java.lang.String str30 = node14.toString();
        boolean boolean31 = node14.isString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER 40.0" + "'", str30, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        int int5 = node1.getSideEffectFlags();
        boolean boolean6 = node1.isReturn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        int int21 = node14.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType22 = node14.getJSType();
        boolean boolean23 = node14.isNoSideEffectsCall();
        boolean boolean24 = node14.isAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int27 = node26.getChildCount();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        java.lang.String str34 = node29.checkTreeEquals(node32);
        boolean boolean35 = node29.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node29.getJSDocInfo();
        boolean boolean37 = node29.isDebugger();
        boolean boolean38 = node29.isTrue();
        com.google.javascript.rhino.Node node39 = node26.copyInformationFrom(node29);
        node39.setSourceEncodedPositionForTree((int) (short) 0);
        node39.setLineno((int) ' ');
        boolean boolean44 = node39.isCatch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        java.lang.String str51 = node46.checkTreeEquals(node49);
        com.google.javascript.rhino.Node node52 = node39.useSourceInfoIfMissingFrom(node46);
        boolean boolean53 = node39.isFunction();
        boolean boolean54 = node39.isParamList();
        com.google.javascript.rhino.Node node55 = node14.srcref(node39);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        java.lang.String str62 = node57.checkTreeEquals(node60);
        boolean boolean63 = node57.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = node57.getJSDocInfo();
        boolean boolean65 = node57.isDebugger();
        boolean boolean66 = node57.isTrue();
        boolean boolean67 = node57.isInstanceOf();
        int int68 = node57.getType();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int71 = node70.getChildCount();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node77 = node76.removeChildren();
        java.lang.String str78 = node73.checkTreeEquals(node76);
        boolean boolean79 = node73.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = node73.getJSDocInfo();
        boolean boolean81 = node73.isDebugger();
        boolean boolean82 = node73.isTrue();
        com.google.javascript.rhino.Node node83 = node70.copyInformationFrom(node73);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node86 = node85.removeChildren();
        com.google.javascript.rhino.Node node87 = node70.useSourceInfoIfMissingFrom(node85);
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = null;
        node70.setJSDocInfo(jSDocInfo88);
        node70.detachChildren();
        node57.addChildToBack(node70);
        boolean boolean92 = node57.isGetterDef();
        java.lang.String str93 = node57.toStringTree();
        com.google.javascript.rhino.Node node94 = node55.copyInformationFrom(node57);
        boolean boolean95 = node94.isQualifiedName();
        boolean boolean96 = node94.isQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSDocInfo64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 39 + "'", int68 == 39);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSDocInfo80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "NUMBER 40.0\n    NUMBER 40.0\n" + "'", str93, "NUMBER 40.0\n    NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node1.getJsDocBuilderForNode();
        fileLevelJsDocBuilder30.append("NUMBER 1.0\n");
        fileLevelJsDocBuilder30.append("NUMBER 1.0");
        fileLevelJsDocBuilder30.append("NUMBER 40.0 [source_file: ]");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder30);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        boolean boolean20 = node2.isFor();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(40, node23, 100, 100);
        boolean boolean27 = node23.isNull();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node2, node23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int10 = node9.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node9.siblings();
        node9.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] { node9 };
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) '#', nodeArray14, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node33.setSourceEncodedPositionForTree((int) (short) 0);
        node33.setLineno((int) ' ');
        boolean boolean38 = node33.isCatch();
        boolean boolean39 = node33.isDebugger();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node57 = node56.removeChildren();
        com.google.javascript.rhino.Node node58 = node41.useSourceInfoIfMissingFrom(node56);
        boolean boolean59 = node41.isTypeOf();
        com.google.javascript.rhino.Node node60 = node33.copyInformationFromForTree(node41);
        node17.putProp((int) (byte) 1, (java.lang.Object) node33);
        boolean boolean62 = node17.isTrue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(42, node2, node17);
        node63.setLength((int) (short) -1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        java.util.Set<java.lang.String> strSet24 = node18.getDirectives();
        int int25 = node5.getIndexOfChild(node18);
        int int26 = node18.getSourcePosition();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', node18, (int) (byte) -1, 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node29.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node1.isTypeOf();
        com.google.javascript.rhino.Node node20 = node1.cloneNode();
        int int21 = node20.getSideEffectFlags();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        double double37 = node26.getDouble();
        boolean boolean38 = node26.isLabelName();
        boolean boolean39 = node26.isDo();
        node20.addChildToBack(node26);
        node20.setVarArgs(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 40.0d + "'", double37 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node1.getAncestors();
        boolean boolean14 = node1.isString();
        boolean boolean15 = node1.isTypeOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        boolean boolean31 = node1.isReturn();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node50 = node33.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        node33.setJSDocInfo(jSDocInfo51);
        node33.detachChildren();
        int int54 = node33.getLength();
        boolean boolean55 = node33.isTry();
        boolean boolean56 = node33.isContinue();
        com.google.javascript.rhino.Node node57 = node33.getLastChild();
        int int58 = node33.getSourcePosition();
        com.google.javascript.rhino.Node node59 = node33.cloneNode();
        boolean boolean60 = node33.isComma();
        boolean boolean61 = node1.hasChild(node33);
        boolean boolean62 = node1.isArrayLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        java.util.Set<java.lang.String> strSet23 = node17.getDirectives();
        int int24 = node4.getIndexOfChild(node17);
        boolean boolean25 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node42.setJSDocInfo(jSDocInfo53);
        node27.putProp((int) (short) 0, (java.lang.Object) node42);
        boolean boolean56 = node27.isIf();
        int int58 = node27.getIntProp((int) (byte) 100);
        int int59 = node27.getSideEffectFlags();
        boolean boolean60 = node27.isAssignAdd();
        com.google.javascript.rhino.Node node61 = node4.copyInformationFrom(node27);
        boolean boolean62 = node61.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isReturn();
        boolean boolean17 = node4.isFor();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        int int39 = node8.getSourcePosition();
        boolean boolean40 = node8.isRegExp();
        node8.setType((int) (byte) -1);
        node8.detachChildren();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node8.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = null;
        node8.setJSDocInfo(jSDocInfo45);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable44);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        boolean boolean71 = node60.isCase();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 1.0f);
        node74.detachChildren();
        int int76 = node60.getIndexOfChild(node74);
        boolean boolean77 = node74.isArrayLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(2, "");
        int int3 = node2.getSourcePosition();
        java.lang.Object obj5 = node2.getProp(159748);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean24 = node2.hasChild(node23);
        boolean boolean25 = node2.isObjectLit();
        node2.setSourceEncodedPositionForTree(47);
        node2.setLength(50);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(42, node2);
        boolean boolean31 = node2.isLabelName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node30 = node14.getLastSibling();
        java.lang.String str31 = node30.toStringTree();
        boolean boolean32 = node30.isParamList();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 40.0\n" + "'", str31, "NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        boolean boolean17 = node6.isNE();
        node6.detachChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        double double34 = node23.getDouble();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        java.util.Set<java.lang.String> strSet42 = node36.getDirectives();
        int int43 = node23.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(39, node6, node23);
        int int45 = node44.getType();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int48 = node47.getChildCount();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node54 = node53.removeChildren();
        java.lang.String str55 = node50.checkTreeEquals(node53);
        boolean boolean56 = node50.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = node50.getJSDocInfo();
        boolean boolean58 = node50.isDebugger();
        boolean boolean59 = node50.isTrue();
        com.google.javascript.rhino.Node node60 = node47.copyInformationFrom(node50);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node64 = node47.useSourceInfoIfMissingFrom(node62);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = null;
        node47.setJSDocInfo(jSDocInfo65);
        node47.detachChildren();
        int int68 = node47.getLength();
        boolean boolean69 = node47.isTry();
        boolean boolean70 = node47.isContinue();
        com.google.javascript.rhino.Node node71 = node47.getLastChild();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(40, "STRING NUMBER 40.0\n", 4, 52);
        node47.addChildToFront(node76);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(50, node44, node47);
        com.google.javascript.rhino.jstype.JSType jSType79 = node44.getJSType();
        boolean boolean80 = node44.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 40.0d + "'", double34 == 40.0d);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 39 + "'", int45 == 39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSDocInfo57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        boolean boolean29 = node26.hasChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(40, node32, 100, 100);
        boolean boolean36 = node35.isComma();
        node35.setCharno(35);
        node26.addChildrenToBack(node35);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node6.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node6.addChildrenToBack(node33);
        boolean boolean35 = node6.isComma();
        boolean boolean36 = node6.isGetProp();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray37, 4, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(24, nodeArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 1.0\n", 15, (int) (short) 0);
        node3.setVarArgs(false);
        boolean boolean6 = node3.isNew();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setDouble((double) 1.0f);
        boolean boolean31 = node28.isVar();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node28.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node28.getJSDocInfo();
        boolean boolean35 = node28.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        boolean boolean14 = node4.isFromExterns();
        boolean boolean15 = node4.isOptionalArg();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        boolean boolean27 = node17.isInstanceOf();
        int int28 = node17.getType();
        boolean boolean29 = node17.isAssignAdd();
        int int30 = node4.getIndexOfChild(node17);
        boolean boolean31 = node17.isFunction();
        com.google.javascript.rhino.Node node32 = node1.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node32.new FileLevelJsDocBuilder();
        boolean boolean34 = node32.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 39 + "'", int28 == 39);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        int int32 = node1.getIntProp((int) (byte) 100);
        node1.setType(54);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        boolean boolean38 = node36.isThrow();
        boolean boolean39 = node1.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node node40 = node36.cloneTree();
        boolean boolean41 = node40.isAssignAdd();
        boolean boolean42 = node40.isIn();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        node57.setSourceEncodedPositionForTree((int) (short) 0);
        int int61 = node57.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        node57.setStaticSourceFile(staticSourceFile62);
        boolean boolean64 = node57.isSyntheticBlock();
        com.google.javascript.rhino.Node node65 = node40.useSourceInfoFrom(node57);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        java.lang.String str29 = node1.getQualifiedName();
        boolean boolean30 = node1.isBlock();
        boolean boolean31 = node1.isLabelName();
        boolean boolean32 = node1.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        java.lang.String str38 = node8.toStringTree();
        node8.setDouble((double) (byte) 10);
        boolean boolean41 = node8.isDebugger();
        boolean boolean42 = node8.isHook();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 40.0\n" + "'", str38, "NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(23);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = null;
        node19.setJSDocInfo(jSDocInfo30);
        node4.putProp((int) (short) 0, (java.lang.Object) node19);
        boolean boolean33 = node4.isIf();
        boolean boolean34 = node4.isReturn();
        boolean boolean35 = node4.isThis();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        double double51 = node40.getDouble();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node54 = node53.removeChildren();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node57 = node56.removeChildren();
        java.lang.String str58 = node53.checkTreeEquals(node56);
        java.util.Set<java.lang.String> strSet59 = node53.getDirectives();
        int int60 = node40.getIndexOfChild(node53);
        int int61 = node53.getSourcePosition();
        boolean boolean62 = node53.isDo();
        boolean boolean63 = node53.isSetterDef();
        boolean boolean64 = node53.isQuotedString();
        com.google.javascript.rhino.Node node65 = node4.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(48, node2, node53, 23, (int) '4');
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 40.0d + "'", double51 == 40.0d);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 4, 30);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((-1), node4, (int) (short) -1, 36);
        com.google.javascript.rhino.Node node8 = node7.getLastChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        boolean boolean19 = node14.isDefaultCase();
        boolean boolean20 = node14.isNot();
        com.google.javascript.rhino.jstype.JSType jSType21 = node14.getJSType();
        boolean boolean22 = node14.isSyntheticBlock();
        // The following exception was thrown during execution in test generation
        try {
            node14.setString("STRING NUMBER 40.0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 40.0 0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node1.getJsDocBuilderForNode();
        fileLevelJsDocBuilder30.append("NUMBER 1.0\n");
        fileLevelJsDocBuilder30.append("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 8.0\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 8.0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder30);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isUnscopedQualifiedName();
        boolean boolean18 = node4.isLabelName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        boolean boolean26 = node1.isIf();
        int int28 = node1.getIntProp(0);
        node1.setOptionalArg(false);
        boolean boolean31 = node1.isLabel();
        boolean boolean32 = node1.isFunction();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        boolean boolean44 = node34.isVoid();
        boolean boolean45 = node34.isIf();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int48 = node47.getChildCount();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node54 = node53.removeChildren();
        java.lang.String str55 = node50.checkTreeEquals(node53);
        boolean boolean56 = node50.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = node50.getJSDocInfo();
        boolean boolean58 = node50.isDebugger();
        boolean boolean59 = node50.isTrue();
        com.google.javascript.rhino.Node node60 = node47.copyInformationFrom(node50);
        com.google.javascript.rhino.Node node61 = node34.clonePropsFrom(node47);
        boolean boolean62 = node47.isRegExp();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node69 = node68.removeChildren();
        java.lang.String str70 = node65.checkTreeEquals(node68);
        boolean boolean71 = node65.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = node65.getJSDocInfo();
        boolean boolean73 = node65.isDebugger();
        boolean boolean74 = node65.isTrue();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int78 = node77.getChildCount();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node81 = node80.removeChildren();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node84 = node83.removeChildren();
        java.lang.String str85 = node80.checkTreeEquals(node83);
        boolean boolean86 = node80.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = node80.getJSDocInfo();
        boolean boolean88 = node80.isDebugger();
        boolean boolean89 = node80.isTrue();
        com.google.javascript.rhino.Node node90 = node77.copyInformationFrom(node80);
        com.google.javascript.rhino.JSDocInfo jSDocInfo91 = null;
        node80.setJSDocInfo(jSDocInfo91);
        node65.putProp((int) (short) 0, (java.lang.Object) node80);
        node47.putProp(0, (java.lang.Object) node80);
        boolean boolean95 = node80.isCall();
        boolean boolean96 = node80.isSyntheticBlock();
        java.lang.String str97 = node1.checkTreeEquals(node80);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSDocInfo57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(jSDocInfo87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        node19.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(40, node25, 100, 100);
        boolean boolean29 = node19.isEquivalentToTyped(node25);
        boolean boolean30 = node19.isCatch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        boolean boolean46 = node45.isComma();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean49 = node48.isGetProp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        node64.setSourceEncodedPositionForTree((int) (short) 0);
        int int68 = node64.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node69 = node48.useSourceInfoFromForTree(node64);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node71 = node45.srcref(node69);
        int int72 = node45.getSourcePosition();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(42, node19, node45);
        boolean boolean74 = node45.isAssign();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        boolean boolean29 = node27.getBooleanProp(53);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isComma();
        boolean boolean34 = node4.isGetProp();
        boolean boolean35 = node4.isLabelName();
        com.google.javascript.rhino.Node node36 = node4.removeFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 40.0 32", 31, 40);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean3 = node2.isInc();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(46, node2, (int) (byte) -1, 36);
        boolean boolean7 = node2.isOr();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(29, "");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isInstanceOf();
        int int13 = node2.getType();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        com.google.javascript.rhino.Node node32 = node15.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = null;
        node15.setJSDocInfo(jSDocInfo33);
        node15.detachChildren();
        node2.addChildToBack(node15);
        int int37 = node15.getLineno();
        java.lang.String str38 = node15.toStringTree();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        boolean boolean50 = node40.isVoid();
        boolean boolean51 = node40.isIf();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int54 = node53.getChildCount();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node57 = node56.removeChildren();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        java.lang.String str61 = node56.checkTreeEquals(node59);
        boolean boolean62 = node56.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = node56.getJSDocInfo();
        boolean boolean64 = node56.isDebugger();
        boolean boolean65 = node56.isTrue();
        com.google.javascript.rhino.Node node66 = node53.copyInformationFrom(node56);
        com.google.javascript.rhino.Node node67 = node40.clonePropsFrom(node53);
        boolean boolean68 = node40.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder69 = node40.getJsDocBuilderForNode();
        boolean boolean70 = node40.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = node40.getJSDocInfo();
        boolean boolean72 = node40.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(41, node15, node40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 39 + "'", int13 == 39);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 40.0\n" + "'", str38, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(jSDocInfo63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSDocInfo71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node3 = node1.getLastChild();
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean24 = node23.isGetProp();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        boolean boolean26 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node27 = node1.copyInformationFrom(node23);
        node27.setVarArgs(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node27.new FileLevelJsDocBuilder();
        boolean boolean31 = node27.isTry();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node15.isComma();
        node15.putIntProp(37, 36);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(0, node15);
        com.google.javascript.rhino.Node node22 = node20.getAncestor(47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node20.getJSDocInfo();
        node20.setVarArgs(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(jSDocInfo23);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100.0f, 38, 29);
        double double4 = node3.getDouble();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        boolean boolean20 = node9.isNE();
        node9.setSourceEncodedPosition((int) (short) -1);
        boolean boolean23 = node9.isThrow();
        java.util.Set<java.lang.String> strSet24 = node9.getDirectives();
        boolean boolean25 = node9.isDo();
        boolean boolean26 = node9.isVar();
        boolean boolean27 = node9.isOr();
        boolean boolean28 = node9.isTry();
        boolean boolean29 = node9.isVar();
        boolean boolean30 = node9.isDo();
        java.lang.String str31 = node9.getSourceFileName();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        boolean boolean47 = node36.isNE();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        java.lang.String str54 = node49.checkTreeEquals(node52);
        boolean boolean55 = node49.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node49.getJSDocInfo();
        boolean boolean57 = node49.isDebugger();
        boolean boolean58 = node49.isTrue();
        boolean boolean59 = node49.isVoid();
        boolean boolean60 = node49.isIf();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int63 = node62.getChildCount();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node69 = node68.removeChildren();
        java.lang.String str70 = node65.checkTreeEquals(node68);
        boolean boolean71 = node65.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = node65.getJSDocInfo();
        boolean boolean73 = node65.isDebugger();
        boolean boolean74 = node65.isTrue();
        com.google.javascript.rhino.Node node75 = node62.copyInformationFrom(node65);
        com.google.javascript.rhino.Node node76 = node49.clonePropsFrom(node62);
        boolean boolean77 = node49.isRegExp();
        boolean boolean78 = node49.isCall();
        java.lang.String str79 = node49.toString();
        boolean boolean80 = node36.isEquivalentToTyped(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable81 = node36.siblings();
        com.google.javascript.rhino.Node node82 = node9.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node node83 = node3.srcref(node36);
        boolean boolean84 = node36.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "NUMBER 40.0" + "'", str79, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(nodeIterable81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(159748, 29, 46);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node3 = node1.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node3.setLength(48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node36.isNE();
        node36.setSourceEncodedPosition(2);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isUnscopedQualifiedName();
        boolean boolean18 = node4.isNumber();
        boolean boolean19 = node4.isBlock();
        java.lang.String str20 = node4.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER 40.0\n" + "'", str20, "NUMBER 40.0\n");
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        node1.addSuppression("Node tree inequality:\nTree1:\nNULL\n\n\nTree2:\nSTRING STRING  10\n\n\nSubtree1: NULL\n\n\nSubtree2: STRING STRING  10\n");
        com.google.javascript.rhino.Node node26 = node1.getFirstChild();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(29, 39, 4);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node50 = node33.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        node33.setJSDocInfo(jSDocInfo51);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean55 = node33.hasChild(node54);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(54, node31, node54, node57);
        com.google.javascript.rhino.Node node59 = node1.copyInformationFrom(node57);
        boolean boolean60 = node1.isString();
        int int61 = node1.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(31, "NUMBER 1.0\n", 53, (int) (byte) 100);
        boolean boolean5 = node4.isAnd();
        boolean boolean6 = node4.isUnscopedQualifiedName();
        node4.setLineno(2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.detachChildren();
        boolean boolean17 = node4.isTrue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder18 = node4.getJsDocBuilderForNode();
        boolean boolean19 = node4.isEmpty();
        boolean boolean20 = node4.isAssignAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        boolean boolean13 = node1.isAssignAdd();
        node1.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int18 = node17.getChildCount();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        com.google.javascript.rhino.Node node30 = node17.copyInformationFrom(node20);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        node45.setSourceEncodedPositionForTree((int) (short) 0);
        node45.setLineno((int) ' ');
        boolean boolean50 = node45.isCatch();
        boolean boolean51 = node45.isDebugger();
        com.google.javascript.rhino.Node node52 = node20.srcrefTree(node45);
        boolean boolean53 = node20.isString();
        boolean boolean54 = node20.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node20.siblings();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(40, node58, 100, 100);
        boolean boolean62 = node20.hasChild(node58);
        boolean boolean63 = node1.hasChild(node58);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder64 = node58.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder64);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 10.0f, (int) (byte) 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        int int4 = node1.getLength();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        java.lang.String str6 = node1.toString();
        boolean boolean7 = node1.isEmpty();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "NUMBER 1.0" + "'", str6, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '#', nodeArray7, (int) (short) 1, 1);
        boolean boolean11 = node10.isInc();
        com.google.javascript.rhino.InputId inputId12 = node10.getInputId();
        boolean boolean13 = node10.isVarArgs();
        boolean boolean14 = node10.isAssignAdd();
        boolean boolean15 = node10.isNE();
        boolean boolean16 = node10.isWhile();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        node4.putBooleanProp(38, false);
        boolean boolean36 = node4.isSetterDef();
        com.google.javascript.rhino.InputId inputId37 = null;
        node4.setInputId(inputId37);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        node4.setStaticSourceFile(staticSourceFile39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = node4.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 40.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.setSourceEncodedPosition((int) (short) -1);
        boolean boolean19 = node5.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node5.children();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(46, node5, (int) (byte) 0, (int) ' ');
        boolean boolean24 = node23.hasOneChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        node17.setSourceEncodedPositionForTree((int) (short) 0);
        int int21 = node17.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFromForTree(node17);
        boolean boolean23 = node22.isThrow();
        boolean boolean24 = node22.isVarArgs();
        boolean boolean25 = node22.isDefaultCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = null;
        node47.setJSDocInfo(jSDocInfo58);
        node32.putProp((int) (short) 0, (java.lang.Object) node47);
        node14.putProp(0, (java.lang.Object) node47);
        com.google.javascript.rhino.Node node62 = node14.getLastChild();
        boolean boolean63 = node14.isVarArgs();
        boolean boolean64 = node14.isEmpty();
        boolean boolean65 = node14.isTry();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(45, "Node tree inequality:\nTree1:\nNUMBER 16.0\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: NUMBER 16.0\n\n\nSubtree2: NUMBER 40.0\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = null;
        node2.setJSDocInfo(jSDocInfo3);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(47);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        node17.setSourceEncodedPositionForTree((int) (short) 0);
        int int21 = node17.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFromForTree(node17);
        boolean boolean23 = node1.isThrow();
        boolean boolean24 = node1.isFalse();
        com.google.javascript.rhino.Node node25 = node1.getFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isLabel();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node2, 12, 38);
        boolean boolean28 = node2.isOnlyModifiesThisCall();
        boolean boolean29 = node2.isDec();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean32 = node31.isFalse();
        boolean boolean33 = node31.isVarArgs();
        node2.addChildrenToFront(node31);
        boolean boolean35 = node31.isExprResult();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(52);
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1.0f));
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        int int71 = node22.getType();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node76 = node75.cloneNode();
        boolean boolean77 = node75.isTry();
        com.google.javascript.rhino.Node node78 = node22.clonePropsFrom(node75);
        java.util.Set<java.lang.String> strSet79 = node22.getDirectives();
        boolean boolean80 = node22.isHook();
        com.google.javascript.rhino.Node node81 = node22.removeChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 39 + "'", int71 == 39);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(strSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(node81);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int31 = node30.getChildCount();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        java.lang.String str38 = node33.checkTreeEquals(node36);
        boolean boolean39 = node33.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node33.getJSDocInfo();
        boolean boolean41 = node33.isDebugger();
        boolean boolean42 = node33.isTrue();
        com.google.javascript.rhino.Node node43 = node30.copyInformationFrom(node33);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        node58.setSourceEncodedPositionForTree((int) (short) 0);
        node58.setLineno((int) ' ');
        boolean boolean63 = node58.isCatch();
        boolean boolean64 = node58.isDebugger();
        com.google.javascript.rhino.Node node65 = node33.srcrefTree(node58);
        node26.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 36);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder69 = node68.new FileLevelJsDocBuilder();
        boolean boolean70 = node68.isSyntheticBlock();
        node68.setWasEmptyNode(true);
        node68.setCharno(4095);
        com.google.javascript.rhino.Node node75 = node26.clonePropsFrom(node68);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile76 = null;
        node68.setStaticSourceFile(staticSourceFile76);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        boolean boolean20 = node4.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node4.siblings();
        boolean boolean23 = node4.getBooleanProp((int) (short) 1);
        java.lang.String str24 = node4.getSourceFileName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node1.getAncestors();
        boolean boolean14 = node1.isBlock();
        boolean boolean15 = node1.isFunction();
        boolean boolean16 = node1.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        node60.setType(47);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        boolean boolean48 = node38.isInstanceOf();
        int int49 = node38.getType();
        com.google.javascript.rhino.Node node50 = node38.cloneTree();
        node4.addChildrenToBack(node38);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 39 + "'", int49 == 39);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean2 = node1.isFalse();
        boolean boolean3 = node1.isVarArgs();
        boolean boolean4 = node1.isVarArgs();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node23 = node6.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = null;
        node6.setJSDocInfo(jSDocInfo24);
        node6.detachChildren();
        int int27 = node6.getLength();
        boolean boolean28 = node6.isTry();
        boolean boolean29 = node6.isContinue();
        com.google.javascript.rhino.Node node30 = node6.getLastChild();
        int int31 = node6.getSourcePosition();
        node6.removeProp(38);
        int int34 = node6.getSourceOffset();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        double double54 = node43.getDouble();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int57 = node56.getChildCount();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        java.lang.String str64 = node59.checkTreeEquals(node62);
        boolean boolean65 = node59.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = node59.getJSDocInfo();
        boolean boolean67 = node59.isDebugger();
        boolean boolean68 = node59.isTrue();
        com.google.javascript.rhino.Node node69 = node56.copyInformationFrom(node59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = null;
        node59.setJSDocInfo(jSDocInfo70);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 0, node37, node43, node59);
        boolean boolean73 = node6.isEquivalentTo(node43);
        boolean boolean74 = node6.isWith();
        node1.addChildToFront(node6);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder76 = node6.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 40.0d + "'", double54 == 40.0d);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 15, 38);
        java.lang.String str4 = node3.getString();
        boolean boolean5 = node3.isExprResult();
        boolean boolean6 = node3.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        boolean boolean26 = node1.isIf();
        int int28 = node1.getIntProp(0);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node1.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node1.cloneTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        boolean boolean26 = node1.isIf();
        java.lang.String str27 = node1.getSourceFileName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        int int4 = node1.getLength();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        node19.setSourceEncodedPositionForTree((int) (short) 0);
        node19.setLineno((int) ' ');
        boolean boolean24 = node19.isAnd();
        boolean boolean25 = node19.isHook();
        com.google.javascript.rhino.Node node26 = node1.srcref(node19);
        boolean boolean27 = node1.isQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isRegExp();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        double double18 = node7.getDouble();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        java.util.Set<java.lang.String> strSet26 = node20.getDirectives();
        int int27 = node7.getIndexOfChild(node20);
        int int28 = node20.getSourcePosition();
        boolean boolean29 = node20.isDo();
        boolean boolean30 = node20.isSetterDef();
        boolean boolean31 = node20.hasChildren();
        boolean boolean32 = node20.isScript();
        com.google.javascript.rhino.Node node33 = node1.useSourceInfoIfMissingFromForTree(node20);
        // The following exception was thrown during execution in test generation
        try {
            node33.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 40.0d + "'", double18 == 40.0d);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isVoid();
        java.lang.String str16 = node4.getSourceFileName();
        node4.putIntProp(42, 10);
        boolean boolean20 = node4.isVar();
        boolean boolean21 = node4.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(53, "SHEQ\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node30 = node13.useSourceInfoIfMissingFrom(node28);
        node30.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node34 = node4.useSourceInfoIfMissingFrom(node30);
        boolean boolean35 = node4.isHook();
        boolean boolean36 = node4.isSetterDef();
        boolean boolean37 = node2.isEquivalentToTyped(node4);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 16);
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        boolean boolean3 = node1.hasChildren();
        boolean boolean4 = node1.isVar();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        boolean boolean20 = node19.isComma();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean23 = node22.isGetProp();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        node38.setSourceEncodedPositionForTree((int) (short) 0);
        int int42 = node38.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node43 = node22.useSourceInfoFromForTree(node38);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node45 = node19.srcref(node43);
        boolean boolean47 = node45.getBooleanProp(44);
        com.google.javascript.rhino.Node node48 = node1.copyInformationFrom(node45);
        boolean boolean49 = node1.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isOptionalArg();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        java.lang.String str19 = node14.checkTreeEquals(node17);
        boolean boolean20 = node14.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node14.getJSDocInfo();
        boolean boolean22 = node14.isDebugger();
        boolean boolean23 = node14.isTrue();
        boolean boolean24 = node14.isInstanceOf();
        int int25 = node14.getType();
        boolean boolean26 = node14.isAssignAdd();
        int int27 = node1.getIndexOfChild(node14);
        node1.setOptionalArg(true);
        java.util.Set<java.lang.String> strSet30 = node1.getDirectives();
        node1.setLength(10);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        boolean boolean44 = node34.isVoid();
        boolean boolean45 = node34.isIf();
        int int47 = node34.getIntProp(2);
        node34.setIsSyntheticBlock(true);
        boolean boolean50 = node34.isOptionalArg();
        java.lang.String str51 = node1.checkTreeEquals(node34);
        boolean boolean52 = node34.isReturn();
        boolean boolean53 = node34.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 39 + "'", int25 == 39);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean2 = node1.isFalse();
        boolean boolean3 = node1.isVarArgs();
        boolean boolean4 = node1.isVarArgs();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node23 = node6.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = null;
        node6.setJSDocInfo(jSDocInfo24);
        node6.detachChildren();
        int int27 = node6.getLength();
        boolean boolean28 = node6.isTry();
        boolean boolean29 = node6.isContinue();
        com.google.javascript.rhino.Node node30 = node6.getLastChild();
        int int31 = node6.getSourcePosition();
        node6.removeProp(38);
        int int34 = node6.getSourceOffset();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        double double54 = node43.getDouble();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int57 = node56.getChildCount();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        java.lang.String str64 = node59.checkTreeEquals(node62);
        boolean boolean65 = node59.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = node59.getJSDocInfo();
        boolean boolean67 = node59.isDebugger();
        boolean boolean68 = node59.isTrue();
        com.google.javascript.rhino.Node node69 = node56.copyInformationFrom(node59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = null;
        node59.setJSDocInfo(jSDocInfo70);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 0, node37, node43, node59);
        boolean boolean73 = node6.isEquivalentTo(node43);
        boolean boolean74 = node6.isWith();
        node1.addChildToFront(node6);
        boolean boolean76 = node1.isTrue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 40.0d + "'", double54 == 40.0d);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        int int39 = node8.getSourcePosition();
        boolean boolean40 = node8.isRegExp();
        node8.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = node8.getParent();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node43.getStaticSourceFile();
        node43.detachChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(staticSourceFile44);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isCall();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        boolean boolean29 = node28.isFunction();
        com.google.javascript.rhino.Node node30 = node2.useSourceInfoIfMissingFrom(node28);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        node45.setSourceEncodedPositionForTree((int) (short) 0);
        node45.setLineno((int) ' ');
        boolean boolean50 = node45.isCatch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        java.lang.String str57 = node52.checkTreeEquals(node55);
        com.google.javascript.rhino.Node node58 = node45.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100, node30, node45, 37, 16);
        int int62 = node61.getLineno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 37 + "'", int62 == 37);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100L, (int) (short) 100, 42);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        node1.detachChildren();
        boolean boolean24 = node1.isTrue();
        boolean boolean25 = node1.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 40.0");
        boolean boolean2 = node1.isQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 40.0 32", 0, 0);
        boolean boolean4 = node3.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean18 = node17.isGetProp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node33.setSourceEncodedPositionForTree((int) (short) 0);
        int int37 = node33.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node38 = node17.useSourceInfoFromForTree(node33);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node14.srcref(node38);
        com.google.javascript.rhino.Node node41 = node40.getLastSibling();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        boolean boolean19 = node14.isDefaultCase();
        java.lang.String str20 = node14.getSourceFileName();
        boolean boolean21 = node14.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean2 = node1.isFalse();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder3 = node1.getJsDocBuilderForNode();
        fileLevelJsDocBuilder3.append("NUMBER 1.0\n");
        fileLevelJsDocBuilder3.append("STRING ");
        fileLevelJsDocBuilder3.append("hi!");
        fileLevelJsDocBuilder3.append("NUMBER 40.0 32");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder3);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        boolean boolean4 = node3.isDebugger();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node3.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder5.append("NUMBER 40.0\n    NUMBER 40.0\n");
        fileLevelJsDocBuilder5.append("Node tree inequality:\nTree1:\nSTRING hi! 4\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: STRING hi! 4\n\n\nSubtree2: NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean2 = node1.isFalse();
        boolean boolean3 = node1.isRegExp();
        com.google.javascript.rhino.Node node4 = node1.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            node1.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node3.siblings();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) '#', nodeArray8, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        node27.setSourceEncodedPositionForTree((int) (short) 0);
        node27.setLineno((int) ' ');
        boolean boolean32 = node27.isCatch();
        boolean boolean33 = node27.isDebugger();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        boolean boolean53 = node35.isTypeOf();
        com.google.javascript.rhino.Node node54 = node27.copyInformationFromForTree(node35);
        node11.putProp((int) (byte) 1, (java.lang.Object) node27);
        boolean boolean56 = node11.isTrue();
        boolean boolean57 = node11.isGetterDef();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(12, node11);
        boolean boolean59 = node58.isFromExterns();
        boolean boolean60 = node58.isEmpty();
        boolean boolean61 = node58.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isComma();
        int int34 = node4.getCharno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node4.setJSDocInfo(jSDocInfo35);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node26 = node25.cloneNode();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean29 = node28.isFalse();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        java.lang.String str36 = node31.checkTreeEquals(node34);
        boolean boolean37 = node31.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node31.getJSDocInfo();
        boolean boolean39 = node31.isDebugger();
        boolean boolean40 = node31.isTrue();
        boolean boolean41 = node31.isVoid();
        boolean boolean42 = node31.isIf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node58 = node31.clonePropsFrom(node44);
        com.google.javascript.rhino.jstype.JSType jSType59 = node44.getJSType();
        boolean boolean60 = node44.isVar();
        com.google.javascript.rhino.Node node61 = node44.getLastSibling();
        boolean boolean62 = node61.isNew();
        com.google.javascript.rhino.Node node63 = node28.useSourceInfoFrom(node61);
        boolean boolean64 = node63.isWith();
        node26.addChildToBack(node63);
        boolean boolean66 = node63.isInc();
        node63.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '#', nodeArray7, (int) (short) 1, 1);
        node10.setCharno(8);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        java.lang.String str19 = node14.checkTreeEquals(node17);
        boolean boolean20 = node14.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node14.getJSDocInfo();
        boolean boolean22 = node14.isDebugger();
        boolean boolean23 = node14.isTrue();
        boolean boolean24 = node14.isFromExterns();
        boolean boolean25 = node14.isNull();
        node10.addChildToFront(node14);
        com.google.javascript.rhino.Node node27 = node14.getLastChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node27);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node31 = node14.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = null;
        node14.setJSDocInfo(jSDocInfo32);
        node14.detachChildren();
        node1.addChildToBack(node14);
        node1.setDouble(0.0d);
        boolean boolean38 = node1.hasChildren();
        boolean boolean39 = node1.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int31 = node30.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node30.siblings();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node33 = node14.removeChildAfter(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(nodeIterable32);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 16);
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("NUMBER 40.0", 36, (int) (short) 100);
        com.google.javascript.rhino.Node node7 = node6.getLastSibling();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int10 = node9.getChildCount();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node16 = node15.removeChildren();
        java.lang.String str17 = node12.checkTreeEquals(node15);
        boolean boolean18 = node12.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = node12.getJSDocInfo();
        boolean boolean20 = node12.isDebugger();
        boolean boolean21 = node12.isTrue();
        com.google.javascript.rhino.Node node22 = node9.copyInformationFrom(node12);
        boolean boolean23 = node12.isVoid();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node12.setJSType(jSType24);
        boolean boolean26 = node7.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node27 = node7.getLastSibling();
        com.google.javascript.rhino.Node node28 = node2.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 16);
        boolean boolean31 = node30.isWhile();
        com.google.javascript.rhino.Node node32 = node2.copyInformationFromForTree(node30);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSDocInfo19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        int int39 = node8.getSourcePosition();
        boolean boolean40 = node8.isRegExp();
        node8.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = node8.getParent();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        java.lang.String str50 = node45.checkTreeEquals(node48);
        boolean boolean51 = node45.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = node45.getJSDocInfo();
        boolean boolean53 = node45.isDebugger();
        boolean boolean54 = node45.isTrue();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int58 = node57.getChildCount();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        boolean boolean68 = node60.isDebugger();
        boolean boolean69 = node60.isTrue();
        com.google.javascript.rhino.Node node70 = node57.copyInformationFrom(node60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        node60.setJSDocInfo(jSDocInfo71);
        node45.putProp((int) (short) 0, (java.lang.Object) node60);
        boolean boolean74 = node45.isIf();
        int int76 = node45.getIntProp((int) (byte) 100);
        node45.setType(54);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int81 = node80.getChildCount();
        boolean boolean82 = node80.isThrow();
        boolean boolean83 = node45.isEquivalentToTyped(node80);
        boolean boolean84 = node43.hasChild(node45);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node6.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node6.addChildrenToBack(node33);
        boolean boolean35 = node6.isComma();
        boolean boolean36 = node6.isGetProp();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray37, 4, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(43, nodeArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        double double16 = node5.getDouble();
        boolean boolean17 = node5.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isNE();
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean38 = node37.isGetProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        node53.setSourceEncodedPositionForTree((int) (short) 0);
        int int57 = node53.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node58 = node37.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 100, node5, node22, node53, node60, 46, (int) (byte) 1);
        int int71 = node22.getType();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node76 = node75.cloneNode();
        boolean boolean77 = node75.isTry();
        com.google.javascript.rhino.Node node78 = node22.clonePropsFrom(node75);
        boolean boolean79 = node75.isVoid();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node80 = node75.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 40.0d + "'", double16 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 39 + "'", int71 == 39);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node2, 15, (int) '#');
        int int7 = node2.getCharno();
        java.util.Set<java.lang.String> strSet8 = node2.getDirectives();
        node2.removeProp(31);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable18 = node4.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator19 = ancestorIterable18.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator20 = ancestorIterable18.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(ancestorIterable18);
        org.junit.Assert.assertNotNull(nodeSpliterator19);
        org.junit.Assert.assertNotNull(nodeSpliterator20);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        boolean boolean16 = node14.isComma();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        boolean boolean20 = node18.isThrow();
        node18.setSourceEncodedPositionForTree(35);
        boolean boolean23 = node18.isCase();
        node14.addChildToBack(node18);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        java.lang.String str35 = node30.checkTreeEquals(node33);
        boolean boolean36 = node30.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node30.getJSDocInfo();
        boolean boolean38 = node30.isDebugger();
        boolean boolean39 = node30.isTrue();
        com.google.javascript.rhino.Node node40 = node27.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node44 = node27.useSourceInfoIfMissingFrom(node42);
        node44.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(40, node50, 100, 100);
        boolean boolean54 = node44.isEquivalentToTyped(node50);
        boolean boolean55 = node44.isCatch();
        boolean boolean56 = node44.isSwitch();
        node14.putProp((int) '4', (java.lang.Object) node44);
        boolean boolean58 = node44.isLabelName();
        boolean boolean59 = node44.isCatch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(40, node2, 100, 100);
        int int6 = node2.getLineno();
        boolean boolean7 = node2.isFunction();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int10 = node9.getChildCount();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node16 = node15.removeChildren();
        java.lang.String str17 = node12.checkTreeEquals(node15);
        boolean boolean18 = node12.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = node12.getJSDocInfo();
        boolean boolean20 = node12.isDebugger();
        boolean boolean21 = node12.isTrue();
        com.google.javascript.rhino.Node node22 = node9.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node26 = node9.useSourceInfoIfMissingFrom(node24);
        node26.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        java.lang.String str36 = node31.checkTreeEquals(node34);
        boolean boolean37 = node31.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node31.getJSDocInfo();
        boolean boolean39 = node31.isDebugger();
        boolean boolean40 = node31.isTrue();
        boolean boolean41 = node31.isVoid();
        boolean boolean42 = node31.isIf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node58 = node31.clonePropsFrom(node44);
        boolean boolean59 = node44.isRegExp();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        java.lang.String str67 = node62.checkTreeEquals(node65);
        boolean boolean68 = node62.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node62.getJSDocInfo();
        boolean boolean70 = node62.isDebugger();
        boolean boolean71 = node62.isTrue();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int75 = node74.getChildCount();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node78 = node77.removeChildren();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node81 = node80.removeChildren();
        java.lang.String str82 = node77.checkTreeEquals(node80);
        boolean boolean83 = node77.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = node77.getJSDocInfo();
        boolean boolean85 = node77.isDebugger();
        boolean boolean86 = node77.isTrue();
        com.google.javascript.rhino.Node node87 = node74.copyInformationFrom(node77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = null;
        node77.setJSDocInfo(jSDocInfo88);
        node62.putProp((int) (short) 0, (java.lang.Object) node77);
        node44.putProp(0, (java.lang.Object) node77);
        boolean boolean92 = node26.isEquivalentToTyped(node44);
        node26.addSuppression("Node tree inequality:\nTree1:\nNUMBER 40.0 [length: 39]\n\n\nTree2:\nSHEQ\n\n\nSubtree1: NUMBER 40.0 [length: 39]\n\n\nSubtree2: SHEQ\n");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node95 = node2.removeChildAfter(node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSDocInfo19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSDocInfo84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, 37, (int) (byte) 1);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 42);
        com.google.javascript.rhino.Node node6 = node3.useSourceInfoFromForTree(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node5.siblings();
        java.lang.String str8 = node5.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 42.0" + "'", str8, "NUMBER 42.0");
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        boolean boolean30 = node14.isQualifiedName();
        boolean boolean31 = node14.isFor();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node14.setJSType(jSType32);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean2 = node1.isFalse();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        boolean boolean14 = node4.isVoid();
        boolean boolean15 = node4.isIf();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int18 = node17.getChildCount();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        com.google.javascript.rhino.Node node30 = node17.copyInformationFrom(node20);
        com.google.javascript.rhino.Node node31 = node4.clonePropsFrom(node17);
        com.google.javascript.rhino.jstype.JSType jSType32 = node17.getJSType();
        boolean boolean33 = node17.isVar();
        com.google.javascript.rhino.Node node34 = node17.getLastSibling();
        boolean boolean35 = node34.isNew();
        com.google.javascript.rhino.Node node36 = node1.useSourceInfoFrom(node34);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        boolean boolean47 = node41.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node41.getJSDocInfo();
        boolean boolean49 = node41.isDebugger();
        boolean boolean50 = node41.isTrue();
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node41);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node54 = node53.removeChildren();
        com.google.javascript.rhino.Node node55 = node38.useSourceInfoIfMissingFrom(node53);
        node55.putBooleanProp(31, true);
        boolean boolean59 = node55.isBreak();
        boolean boolean60 = node55.isDefaultCase();
        com.google.javascript.rhino.Node node61 = node34.copyInformationFromForTree(node55);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        node1.setVarArgs(false);
        java.lang.Object obj13 = node1.getProp((int) (byte) 1);
        boolean boolean14 = node1.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        boolean boolean21 = node1.isNot();
        node1.setSourceEncodedPositionForTree(4);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node27.siblings();
        node27.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] { node27 };
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) '#', nodeArray32, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        java.lang.String str46 = node41.checkTreeEquals(node44);
        boolean boolean47 = node41.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node41.getJSDocInfo();
        boolean boolean49 = node41.isDebugger();
        boolean boolean50 = node41.isTrue();
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node41);
        node51.setSourceEncodedPositionForTree((int) (short) 0);
        node51.setLineno((int) ' ');
        boolean boolean56 = node51.isCatch();
        boolean boolean57 = node51.isDebugger();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int60 = node59.getChildCount();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        java.lang.String str67 = node62.checkTreeEquals(node65);
        boolean boolean68 = node62.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node62.getJSDocInfo();
        boolean boolean70 = node62.isDebugger();
        boolean boolean71 = node62.isTrue();
        com.google.javascript.rhino.Node node72 = node59.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        com.google.javascript.rhino.Node node76 = node59.useSourceInfoIfMissingFrom(node74);
        boolean boolean77 = node59.isTypeOf();
        com.google.javascript.rhino.Node node78 = node51.copyInformationFromForTree(node59);
        node35.putProp((int) (byte) 1, (java.lang.Object) node51);
        boolean boolean80 = node35.isTrue();
        boolean boolean81 = node35.isGetterDef();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(12, node35);
        com.google.javascript.rhino.Node node83 = node1.useSourceInfoFromForTree(node82);
        boolean boolean84 = node82.isTry();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        java.lang.String str18 = node13.checkTreeEquals(node16);
        boolean boolean19 = node13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node13.getJSDocInfo();
        boolean boolean21 = node13.isDebugger();
        boolean boolean22 = node13.isTrue();
        com.google.javascript.rhino.Node node23 = node10.copyInformationFrom(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoIfMissingFrom(node25);
        node27.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node31 = node1.useSourceInfoIfMissingFrom(node27);
        boolean boolean32 = node27.isGetProp();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean56 = node34.hasChild(node55);
        node34.setLineno(0);
        boolean boolean59 = node34.isAssign();
        com.google.javascript.rhino.Node node60 = node27.useSourceInfoFromForTree(node34);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int63 = node62.getChildCount();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node69 = node68.removeChildren();
        java.lang.String str70 = node65.checkTreeEquals(node68);
        boolean boolean71 = node65.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = node65.getJSDocInfo();
        boolean boolean73 = node65.isDebugger();
        boolean boolean74 = node65.isTrue();
        com.google.javascript.rhino.Node node75 = node62.copyInformationFrom(node65);
        boolean boolean76 = node65.isNE();
        node65.setSourceEncodedPosition((int) (short) -1);
        boolean boolean79 = node65.isThrow();
        java.util.Set<java.lang.String> strSet80 = node65.getDirectives();
        boolean boolean81 = node65.isDo();
        com.google.javascript.rhino.Node node82 = node60.copyInformationFrom(node65);
        boolean boolean83 = node82.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(strSet80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "hi!");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = null;
        node7.setJSDocInfo(jSDocInfo18);
        int int20 = node7.getLength();
        node2.addChildToFront(node7);
        com.google.javascript.rhino.Node node22 = node7.cloneTree();
        boolean boolean23 = node7.isFromExterns();
        com.google.javascript.rhino.Node node24 = node7.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = node24.isIn();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.detachChildren();
        boolean boolean17 = node4.isTrue();
        com.google.javascript.rhino.jstype.JSType jSType18 = node4.getJSType();
        node4.removeProp(0);
        boolean boolean21 = node4.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 52, (int) (byte) 10);
        boolean boolean4 = node3.isString();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        double double20 = node9.getDouble();
        node3.addChildToFront(node9);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 40.0d + "'", double20 == 40.0d);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 36);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node21.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = node18.clonePropsFrom(node21);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isHook();
        boolean boolean17 = node5.isCall();
        boolean boolean18 = node5.isContinue();
        boolean boolean19 = node5.isNull();
        java.lang.String str20 = node5.getQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(41, node5);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        node1.detachChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        boolean boolean39 = node28.isNE();
        boolean boolean40 = node28.isTypeOf();
        boolean boolean41 = node28.isTry();
        node1.addChildToFront(node28);
        java.lang.String str43 = node28.getSourceFileName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        java.lang.String str51 = node46.checkTreeEquals(node49);
        boolean boolean52 = node46.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = node46.getJSDocInfo();
        boolean boolean54 = node46.isDebugger();
        boolean boolean55 = node46.isTrue();
        boolean boolean56 = node46.isVoid();
        boolean boolean57 = node46.isIf();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int60 = node59.getChildCount();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        java.lang.String str67 = node62.checkTreeEquals(node65);
        boolean boolean68 = node62.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node62.getJSDocInfo();
        boolean boolean70 = node62.isDebugger();
        boolean boolean71 = node62.isTrue();
        com.google.javascript.rhino.Node node72 = node59.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node73 = node46.clonePropsFrom(node59);
        boolean boolean74 = node59.isRegExp();
        boolean boolean75 = node59.isQualifiedName();
        boolean boolean76 = node59.isFor();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(0, node59);
        node59.putBooleanProp(12, true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = node59.getJSDocInfo();
        boolean boolean82 = node59.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node83 = node28.getChildBefore(node59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSDocInfo53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        java.lang.String str38 = node8.toStringTree();
        double double39 = node8.getDouble();
        boolean boolean40 = node8.isLabelName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 40.0\n" + "'", str38, "NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 40.0d + "'", double39 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        int int4 = node1.getLength();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        java.lang.String str6 = node1.toString();
        node1.setType(54);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "NUMBER 1.0" + "'", str6, "NUMBER 1.0");
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isDebugger();
        boolean boolean12 = node3.isTrue();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node18.setJSDocInfo(jSDocInfo29);
        node3.putProp((int) (short) 0, (java.lang.Object) node18);
        com.google.javascript.rhino.Node node32 = node1.copyInformationFrom(node3);
        node3.setLineno(0);
        boolean boolean35 = node3.isTypeOf();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node38.siblings();
        node38.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] { node38 };
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) '#', nodeArray43, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int50 = node49.getChildCount();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        java.lang.String str57 = node52.checkTreeEquals(node55);
        boolean boolean58 = node52.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = node52.getJSDocInfo();
        boolean boolean60 = node52.isDebugger();
        boolean boolean61 = node52.isTrue();
        com.google.javascript.rhino.Node node62 = node49.copyInformationFrom(node52);
        node62.setSourceEncodedPositionForTree((int) (short) 0);
        node62.setLineno((int) ' ');
        boolean boolean67 = node62.isCatch();
        boolean boolean68 = node62.isDebugger();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int71 = node70.getChildCount();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node74 = node73.removeChildren();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node77 = node76.removeChildren();
        java.lang.String str78 = node73.checkTreeEquals(node76);
        boolean boolean79 = node73.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = node73.getJSDocInfo();
        boolean boolean81 = node73.isDebugger();
        boolean boolean82 = node73.isTrue();
        com.google.javascript.rhino.Node node83 = node70.copyInformationFrom(node73);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node86 = node85.removeChildren();
        com.google.javascript.rhino.Node node87 = node70.useSourceInfoIfMissingFrom(node85);
        boolean boolean88 = node70.isTypeOf();
        com.google.javascript.rhino.Node node89 = node62.copyInformationFromForTree(node70);
        node46.putProp((int) (byte) 1, (java.lang.Object) node62);
        boolean boolean91 = node62.isAnd();
        com.google.javascript.rhino.Node node92 = node3.useSourceInfoFromForTree(node62);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSDocInfo59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSDocInfo80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        boolean boolean4 = node1.isReturn();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        boolean boolean16 = node6.isVoid();
        boolean boolean17 = node6.isIf();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node33 = node6.clonePropsFrom(node19);
        com.google.javascript.rhino.jstype.JSType jSType34 = node19.getJSType();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        node49.setSourceEncodedPositionForTree((int) (short) 0);
        node49.setLineno((int) ' ');
        boolean boolean54 = node49.isCatch();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node57 = node56.removeChildren();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        java.lang.String str61 = node56.checkTreeEquals(node59);
        com.google.javascript.rhino.Node node62 = node49.useSourceInfoIfMissingFrom(node56);
        node19.addChildrenToFront(node56);
        com.google.javascript.rhino.Node node64 = node1.copyInformationFromForTree(node19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = null;
        node1.setJSDocInfo(jSDocInfo65);
        boolean boolean67 = node1.isQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node1.isTypeOf();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = null;
        node21.setJSDocInfo(jSDocInfo39);
        node21.detachChildren();
        int int42 = node21.getLength();
        boolean boolean43 = node21.isTry();
        boolean boolean44 = node21.isContinue();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node21.addChildToFront(node46);
        boolean boolean48 = node21.isDebugger();
        com.google.javascript.rhino.Node node49 = node1.clonePropsFrom(node21);
        boolean boolean50 = node1.isDelProp();
        boolean boolean51 = node1.isObjectLit();
        boolean boolean52 = node1.isOnlyModifiesThisCall();
        boolean boolean53 = node1.isQuotedString();
        int int54 = node1.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        int int55 = node34.getLength();
        boolean boolean56 = node34.isLabel();
        com.google.javascript.rhino.Node node57 = node1.copyInformationFrom(node34);
        boolean boolean58 = node1.isSyntheticBlock();
        node1.setIsSyntheticBlock(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node34.setJSDocInfo(jSDocInfo52);
        node34.detachChildren();
        int int55 = node34.getLength();
        boolean boolean56 = node34.isLabel();
        com.google.javascript.rhino.Node node57 = node1.copyInformationFrom(node34);
        int int58 = node34.getChildCount();
        boolean boolean59 = node34.isLabelName();
        boolean boolean60 = node34.isNot();
        com.google.javascript.rhino.InputId inputId61 = null;
        node34.setInputId(inputId61);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        boolean boolean38 = node4.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node4.siblings();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(40, node42, 100, 100);
        boolean boolean46 = node4.hasChild(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int58 = node57.getChildCount();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        boolean boolean68 = node60.isDebugger();
        boolean boolean69 = node60.isTrue();
        com.google.javascript.rhino.Node node70 = node57.copyInformationFrom(node60);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        com.google.javascript.rhino.Node node74 = node57.useSourceInfoIfMissingFrom(node72);
        node74.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node78 = node48.useSourceInfoIfMissingFrom(node74);
        boolean boolean79 = node74.isGetProp();
        int int81 = node74.getIntProp((-1));
        node42.addChildToFront(node74);
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = node42.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNull(jSDocInfo83);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node5.isAdd();
        boolean boolean9 = node5.isNE();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean13 = node12.isTrue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 0, node12);
        node14.setCharno((int) (byte) -1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        boolean boolean20 = node18.isThrow();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        double double37 = node26.getDouble();
        boolean boolean38 = node26.isNull();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        boolean boolean54 = node43.isNE();
        node43.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean59 = node58.isGetProp();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int62 = node61.getChildCount();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        java.lang.String str69 = node64.checkTreeEquals(node67);
        boolean boolean70 = node64.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = node64.getJSDocInfo();
        boolean boolean72 = node64.isDebugger();
        boolean boolean73 = node64.isTrue();
        com.google.javascript.rhino.Node node74 = node61.copyInformationFrom(node64);
        node74.setSourceEncodedPositionForTree((int) (short) 0);
        int int78 = node74.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node79 = node58.useSourceInfoFromForTree(node74);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node82 = node81.removeChildren();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node85 = node84.removeChildren();
        java.lang.String str86 = node81.checkTreeEquals(node84);
        boolean boolean87 = node81.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node81.getJSDocInfo();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (byte) 100, node26, node43, node74, node81, 46, (int) (byte) 1);
        boolean boolean92 = node43.isIn();
        com.google.javascript.rhino.Node node93 = node18.copyInformationFrom(node43);
        boolean boolean94 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((-1), node5, node14, node18);
        boolean boolean96 = node14.isSwitch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 40.0d + "'", double37 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSDocInfo71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 16);
        boolean boolean2 = node1.isContinue();
        int int3 = node1.getSourcePosition();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isNot();
        node14.setDouble((double) 10L);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        node38.setSourceEncodedPositionForTree((int) (short) 0);
        node38.setLineno((int) ' ');
        boolean boolean43 = node38.isCatch();
        boolean boolean44 = node38.isDebugger();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int47 = node46.getChildCount();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        java.lang.String str54 = node49.checkTreeEquals(node52);
        boolean boolean55 = node49.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node49.getJSDocInfo();
        boolean boolean57 = node49.isDebugger();
        boolean boolean58 = node49.isTrue();
        com.google.javascript.rhino.Node node59 = node46.copyInformationFrom(node49);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node63 = node46.useSourceInfoIfMissingFrom(node61);
        boolean boolean64 = node46.isTypeOf();
        com.google.javascript.rhino.Node node65 = node38.copyInformationFromForTree(node46);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node71 = node70.removeChildren();
        java.lang.String str72 = node67.checkTreeEquals(node70);
        boolean boolean73 = node67.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = node67.getJSDocInfo();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        node67.setDirectives((java.util.Set<java.lang.String>) strSet78);
        node65.setDirectives((java.util.Set<java.lang.String>) strSet78);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet78);
        boolean boolean83 = node14.isGetterDef();
        boolean boolean84 = node14.isScript();
        node14.setVarArgs(true);
        boolean boolean87 = node14.isAssignAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSDocInfo74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 40.0\n");
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int9 = node8.getChildCount();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        java.lang.String str16 = node11.checkTreeEquals(node14);
        boolean boolean17 = node11.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node11.getJSDocInfo();
        boolean boolean19 = node11.isDebugger();
        boolean boolean20 = node11.isTrue();
        com.google.javascript.rhino.Node node21 = node8.copyInformationFrom(node11);
        double double22 = node11.getDouble();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int25 = node24.getChildCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node37 = node24.copyInformationFrom(node27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = null;
        node27.setJSDocInfo(jSDocInfo38);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 0, node5, node11, node27);
        boolean boolean41 = node11.isAdd();
        int int42 = node11.getSourcePosition();
        boolean boolean43 = node11.isRegExp();
        node11.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = node11.getParent();
        boolean boolean47 = node46.isFromExterns();
        int int48 = node46.getLineno();
        node1.addChildToBack(node46);
        boolean boolean50 = node46.isCase();
        boolean boolean51 = node46.isAssign();
        boolean boolean52 = node46.isNoSideEffectsCall();
        boolean boolean53 = node46.isObjectLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "STRING NUMBER 40.0\n" + "'", str2, "STRING NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 40.0d + "'", double22 == 40.0d);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        boolean boolean16 = node4.isLabelName();
        java.lang.Object obj18 = node4.getProp(42);
        boolean boolean19 = node4.isAssignAdd();
        boolean boolean20 = node4.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(29, 39, 4);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = null;
        node7.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean29 = node7.hasChild(node28);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(54, node5, node28, node31);
        boolean boolean33 = node32.isGetterDef();
        node32.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node36 = node32.cloneNode();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node39.siblings();
        node39.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] { node39 };
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) '#', nodeArray44, (int) (short) 1, 1);
        boolean boolean48 = node47.isInc();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node54 = node53.removeChildren();
        java.lang.String str55 = node50.checkTreeEquals(node53);
        boolean boolean56 = node50.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = node50.getJSDocInfo();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int60 = node59.getChildCount();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        java.lang.String str67 = node62.checkTreeEquals(node65);
        boolean boolean68 = node62.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node62.getJSDocInfo();
        boolean boolean70 = node62.isDebugger();
        boolean boolean71 = node62.isTrue();
        com.google.javascript.rhino.Node node72 = node59.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        com.google.javascript.rhino.Node node76 = node59.useSourceInfoIfMissingFrom(node74);
        node76.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node80 = node50.useSourceInfoIfMissingFrom(node76);
        boolean boolean81 = node76.isCall();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(1, node36, node47, node76, 23, 29);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSDocInfo57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING ", 10, (int) (short) 100);
        com.google.javascript.rhino.InputId inputId4 = null;
        node3.setInputId(inputId4);
        java.lang.String str6 = node3.getSourceFileName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setCharno(1);
        boolean boolean32 = node28.getBooleanProp((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node28.cloneTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node33.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(jSDocInfo34);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.siblings();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23, (int) (short) 1, 1);
        boolean boolean27 = node26.isInc();
        node1.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node29 = node26.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node29);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.getJsDocBuilderForNode();
        node1.setIsSyntheticBlock(true);
        boolean boolean5 = node1.isCase();
        com.google.javascript.rhino.Node node6 = node1.getLastChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = node1.getJSDocInfo();
        boolean boolean8 = node1.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(jSDocInfo7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        node1.detachChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = null;
        node25.setJSDocInfo(jSDocInfo43);
        node25.detachChildren();
        int int46 = node25.getLength();
        boolean boolean47 = node25.isTry();
        boolean boolean48 = node25.isContinue();
        com.google.javascript.rhino.Node node49 = node25.getLastChild();
        int int50 = node25.getSourcePosition();
        com.google.javascript.rhino.Node node51 = node1.useSourceInfoFromForTree(node25);
        node25.putIntProp(37, 44);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        node19.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(40, node25, 100, 100);
        boolean boolean29 = node19.isEquivalentToTyped(node25);
        boolean boolean30 = node19.isCatch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        boolean boolean46 = node45.isComma();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean49 = node48.isGetProp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        node64.setSourceEncodedPositionForTree((int) (short) 0);
        int int68 = node64.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node69 = node48.useSourceInfoFromForTree(node64);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node71 = node45.srcref(node69);
        int int72 = node45.getSourcePosition();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(42, node19, node45);
        com.google.javascript.rhino.InputId inputId74 = null;
        node19.setInputId(inputId74);
        java.util.Set<java.lang.String> strSet76 = node19.getDirectives();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(strSet76);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setCharno(1);
        boolean boolean32 = node28.getBooleanProp((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node28.cloneTree();
        boolean boolean34 = node28.isNull();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        java.lang.String str38 = node8.toStringTree();
        double double39 = node8.getDouble();
        boolean boolean40 = node8.isTrue();
        com.google.javascript.rhino.Node node42 = node8.getAncestor((int) (short) 10);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 40.0\n" + "'", str38, "NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 40.0d + "'", double39 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isDefaultCase();
        int int22 = node14.getSourceOffset();
        boolean boolean23 = node14.isLabel();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        boolean boolean30 = node15.isRegExp();
        boolean boolean31 = node15.isQualifiedName();
        boolean boolean32 = node15.isFor();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(0, node15);
        boolean boolean34 = node33.isInc();
        boolean boolean35 = node33.isScript();
        boolean boolean36 = node33.isTry();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "NUMBER 40.0\n    NUMBER 40.0\n", 53, (int) (byte) -1);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        boolean boolean16 = node6.isFromExterns();
        boolean boolean17 = node6.isOptionalArg();
        com.google.javascript.rhino.Node node18 = node4.srcrefTree(node6);
        node18.setLineno(41);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNULL\n\n\nTree2:\nSTRING STRING  10\n\n\nSubtree1: NULL\n\n\nSubtree2: STRING STRING  10\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int18 = node17.getChildCount();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        java.lang.String str25 = node20.checkTreeEquals(node23);
        boolean boolean26 = node20.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        boolean boolean28 = node20.isDebugger();
        boolean boolean29 = node20.isTrue();
        com.google.javascript.rhino.Node node30 = node17.copyInformationFrom(node20);
        node30.setSourceEncodedPositionForTree((int) (short) 0);
        node30.setLineno((int) ' ');
        boolean boolean35 = node30.isCatch();
        boolean boolean36 = node30.isDebugger();
        com.google.javascript.rhino.Node node37 = node5.srcrefTree(node30);
        node37.detachChildren();
        boolean boolean39 = node37.isEmpty();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        boolean boolean55 = node44.isNE();
        node44.setSourceEncodedPosition((int) (short) -1);
        boolean boolean58 = node44.isThrow();
        java.util.Set<java.lang.String> strSet59 = node44.getDirectives();
        boolean boolean60 = node44.isDo();
        boolean boolean61 = node44.isParamList();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (byte) 100, "NUMBER 40.0\n    NUMBER 40.0\n");
        boolean boolean65 = node64.isAnd();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(12, node37, node44, node64);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(52);
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        node28.setDouble((double) 1.0f);
        int int31 = node28.getSourceOffset();
        boolean boolean32 = node28.isArrayLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean33 = node32.isGetProp();
        boolean boolean34 = node32.isUnscopedQualifiedName();
        boolean boolean35 = node32.isAssignAdd();
        java.lang.String str36 = node32.toString();
        boolean boolean37 = node32.isSyntheticBlock();
        com.google.javascript.rhino.Node node38 = node32.cloneNode();
        boolean boolean39 = node32.isFor();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(159748, node32);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean43 = node42.isFalse();
        boolean boolean44 = node42.isVarArgs();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildAfter(node32, node42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER 40.0" + "'", str36, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node15.isComma();
        node15.putIntProp(37, 36);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(0, node15);
        com.google.javascript.rhino.Node node22 = node20.getAncestor(47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node20.getJSDocInfo();
        com.google.javascript.rhino.InputId inputId24 = node20.getInputId();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertNull(inputId24);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        node4.setVarArgs(false);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int42 = node41.getChildCount();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node45 = node44.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        java.lang.String str49 = node44.checkTreeEquals(node47);
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node44.getJSDocInfo();
        boolean boolean52 = node44.isDebugger();
        boolean boolean53 = node44.isTrue();
        com.google.javascript.rhino.Node node54 = node41.copyInformationFrom(node44);
        double double55 = node44.getDouble();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int58 = node57.getChildCount();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node61 = node60.removeChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        java.lang.String str65 = node60.checkTreeEquals(node63);
        boolean boolean66 = node60.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node60.getJSDocInfo();
        boolean boolean68 = node60.isDebugger();
        boolean boolean69 = node60.isTrue();
        com.google.javascript.rhino.Node node70 = node57.copyInformationFrom(node60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        node60.setJSDocInfo(jSDocInfo71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 0, node38, node44, node60);
        java.lang.String str74 = node44.toStringTree();
        com.google.javascript.rhino.Node node75 = node4.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean76 = node75.hasChildren();
        boolean boolean77 = node75.isNoSideEffectsCall();
        boolean boolean78 = node75.isThrow();
        boolean boolean79 = node75.isFunction();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 40.0d + "'", double55 == 40.0d);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER 40.0\n" + "'", str74, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.setSourceEncodedPosition((int) (short) -1);
        boolean boolean18 = node4.isThrow();
        java.util.Set<java.lang.String> strSet19 = node4.getDirectives();
        boolean boolean20 = node4.isDo();
        boolean boolean21 = node4.isVar();
        boolean boolean22 = node4.isOr();
        boolean boolean23 = node4.isTry();
        boolean boolean24 = node4.isVar();
        boolean boolean25 = node4.isDo();
        java.lang.String str26 = node4.getSourceFileName();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int29 = node28.getChildCount();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        java.lang.String str36 = node31.checkTreeEquals(node34);
        boolean boolean37 = node31.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node31.getJSDocInfo();
        boolean boolean39 = node31.isDebugger();
        boolean boolean40 = node31.isTrue();
        com.google.javascript.rhino.Node node41 = node28.copyInformationFrom(node31);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node45 = node28.useSourceInfoIfMissingFrom(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = null;
        node28.setJSDocInfo(jSDocInfo46);
        node28.detachChildren();
        int int49 = node28.getLength();
        node28.putIntProp(1, (int) (byte) -1);
        boolean boolean53 = node28.isNew();
        boolean boolean54 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node55 = node4.useSourceInfoFromForTree(node28);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "NUMBER 1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = null;
        node19.setJSDocInfo(jSDocInfo30);
        node4.putProp((int) (short) 0, (java.lang.Object) node19);
        boolean boolean33 = node4.isIf();
        boolean boolean34 = node4.isReturn();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node4.siblings();
        com.google.javascript.rhino.Node node36 = node2.useSourceInfoIfMissingFromForTree(node4);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.wasEmptyNode();
        boolean boolean17 = node4.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean3 = node2.isFalse();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100, node2, 4, (int) (short) 100);
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = null;
        node2.setJSDocInfo(jSDocInfo7);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node2.children();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable9);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        java.util.Set<java.lang.String> strSet23 = node17.getDirectives();
        int int24 = node4.getIndexOfChild(node17);
        boolean boolean25 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        java.lang.String str47 = node42.checkTreeEquals(node45);
        boolean boolean48 = node42.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        boolean boolean50 = node42.isDebugger();
        boolean boolean51 = node42.isTrue();
        com.google.javascript.rhino.Node node52 = node39.copyInformationFrom(node42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node42.setJSDocInfo(jSDocInfo53);
        node27.putProp((int) (short) 0, (java.lang.Object) node42);
        boolean boolean56 = node27.isIf();
        int int58 = node27.getIntProp((int) (byte) 100);
        int int59 = node27.getSideEffectFlags();
        boolean boolean60 = node27.isAssignAdd();
        com.google.javascript.rhino.Node node61 = node4.copyInformationFrom(node27);
        int int62 = node27.getChildCount();
        node27.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        boolean boolean31 = node21.isVoid();
        boolean boolean32 = node21.isIf();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node48 = node21.clonePropsFrom(node34);
        boolean boolean49 = node34.isRegExp();
        boolean boolean50 = node34.isQualifiedName();
        boolean boolean51 = node34.isFor();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(0, node34);
        boolean boolean53 = node34.wasEmptyNode();
        boolean boolean54 = node1.hasChild(node34);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        boolean boolean22 = node18.isBreak();
        boolean boolean23 = node18.isDefaultCase();
        boolean boolean24 = node18.isBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        boolean boolean5 = node1.isLabelName();
        java.lang.String str6 = node1.getSourceFileName();
        com.google.javascript.rhino.InputId inputId7 = node1.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(inputId7);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean3 = node2.isFalse();
        boolean boolean4 = node2.isRegExp();
        com.google.javascript.rhino.Node node5 = node2.removeChildren();
        java.lang.String str6 = node2.toString();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int9 = node8.getChildCount();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        java.lang.String str16 = node11.checkTreeEquals(node14);
        boolean boolean17 = node11.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node11.getJSDocInfo();
        boolean boolean19 = node11.isDebugger();
        boolean boolean20 = node11.isTrue();
        com.google.javascript.rhino.Node node21 = node8.copyInformationFrom(node11);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = null;
        node11.setJSDocInfo(jSDocInfo22);
        int int24 = node11.getSourceOffset();
        node11.setLength(39);
        boolean boolean27 = node11.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node11.siblings();
        int int29 = node11.getChildCount();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        java.lang.String str36 = node31.checkTreeEquals(node34);
        boolean boolean37 = node31.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node31.getJSDocInfo();
        boolean boolean39 = node31.isDebugger();
        boolean boolean40 = node31.isTrue();
        boolean boolean41 = node31.isVoid();
        boolean boolean42 = node31.isIf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node58 = node31.clonePropsFrom(node44);
        com.google.javascript.rhino.jstype.JSType jSType59 = node44.getJSType();
        boolean boolean60 = node44.isVar();
        java.lang.String str64 = node44.toString(false, false, false);
        boolean boolean65 = node44.isDelProp();
        boolean boolean66 = node11.isEquivalentTo(node44);
        boolean boolean67 = node44.isQualifiedName();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int71 = node70.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable72 = node70.siblings();
        node70.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] { node70 };
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) '#', nodeArray75, (int) (short) 1, 1);
        boolean boolean79 = node78.isInc();
        com.google.javascript.rhino.InputId inputId80 = node78.getInputId();
        int int81 = node78.getCharno();
        java.util.Set<java.lang.String> strSet82 = node78.getDirectives();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(48, node2, node44, node78, 42, 42);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "NUMBER 1.0" + "'", str6, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "NUMBER 40.0" + "'", str64, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(nodeIterable72);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(inputId80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNull(strSet82);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '#', nodeArray7, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        node26.setSourceEncodedPositionForTree((int) (short) 0);
        node26.setLineno((int) ' ');
        boolean boolean31 = node26.isCatch();
        boolean boolean32 = node26.isDebugger();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoIfMissingFrom(node49);
        boolean boolean52 = node34.isTypeOf();
        com.google.javascript.rhino.Node node53 = node26.copyInformationFromForTree(node34);
        node10.putProp((int) (byte) 1, (java.lang.Object) node26);
        boolean boolean55 = node10.isComma();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        int int32 = node1.getIntProp((int) (byte) 100);
        node1.setType(54);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        boolean boolean38 = node36.isThrow();
        boolean boolean39 = node1.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node node40 = node36.cloneTree();
        boolean boolean41 = node40.isWhile();
        com.google.javascript.rhino.Node node42 = node40.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType43 = node40.getJSType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(jSType43);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 38, 44, (int) (short) 100);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        node19.setSourceEncodedPositionForTree((int) (short) 0);
        int int23 = node19.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node19.setStaticSourceFile(staticSourceFile24);
        boolean boolean26 = node19.isNot();
        boolean boolean27 = node19.isQuotedString();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(2, node4, node19);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        node18.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(40, node24, 100, 100);
        boolean boolean28 = node18.isEquivalentToTyped(node24);
        boolean boolean29 = node18.isCatch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        node44.setSourceEncodedPositionForTree((int) (short) 0);
        int int48 = node44.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = null;
        node44.setStaticSourceFile(staticSourceFile49);
        boolean boolean51 = node44.isNot();
        com.google.javascript.rhino.Node node52 = node18.srcref(node44);
        boolean boolean53 = node18.isCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean3 = node2.isGetProp();
        boolean boolean4 = node2.isUnscopedQualifiedName();
        boolean boolean5 = node2.isAssignAdd();
        java.lang.String str6 = node2.toString();
        boolean boolean7 = node2.isBreak();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(0, node2);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "NUMBER 40.0" + "'", str6, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 38, 44, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        java.util.Set<java.lang.String> strSet23 = node17.getDirectives();
        int int24 = node4.getIndexOfChild(node17);
        int int25 = node17.getSourcePosition();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        java.lang.String str35 = node30.checkTreeEquals(node33);
        boolean boolean36 = node30.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node30.getJSDocInfo();
        boolean boolean38 = node30.isDebugger();
        boolean boolean39 = node30.isTrue();
        com.google.javascript.rhino.Node node40 = node27.copyInformationFrom(node30);
        boolean boolean41 = node30.isNE();
        node30.detachChildren();
        int int43 = node30.getLength();
        node30.setWasEmptyNode(true);
        node17.addChildrenToFront(node30);
        boolean boolean47 = node30.isNew();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags48 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags48.clearSideEffectFlags();
        sideEffectFlags48.clearAllFlags();
        sideEffectFlags48.setThrows();
        sideEffectFlags48.clearSideEffectFlags();
        sideEffectFlags48.clearSideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            node30.setSideEffectFlags(sideEffectFlags48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node1.isQuotedString();
        boolean boolean20 = node1.isParamList();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node22.siblings();
        boolean boolean25 = node22.isReturn();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        java.lang.String str32 = node27.checkTreeEquals(node30);
        boolean boolean33 = node27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isDebugger();
        boolean boolean36 = node27.isTrue();
        boolean boolean37 = node27.isFromExterns();
        boolean boolean38 = node27.isOptionalArg();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        boolean boolean50 = node40.isInstanceOf();
        int int51 = node40.getType();
        boolean boolean52 = node40.isAssignAdd();
        int int53 = node27.getIndexOfChild(node40);
        node27.setOptionalArg(true);
        com.google.javascript.rhino.Node node56 = node22.copyInformationFrom(node27);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable57 = node22.getAncestors();
        com.google.javascript.rhino.Node node58 = node1.copyInformationFromForTree(node22);
        boolean boolean59 = node58.isSyntheticBlock();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        boolean boolean69 = node61.isDebugger();
        boolean boolean70 = node61.isTrue();
        boolean boolean71 = node61.isVoid();
        boolean boolean72 = node61.isIf();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int75 = node74.getChildCount();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node78 = node77.removeChildren();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node81 = node80.removeChildren();
        java.lang.String str82 = node77.checkTreeEquals(node80);
        boolean boolean83 = node77.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = node77.getJSDocInfo();
        boolean boolean85 = node77.isDebugger();
        boolean boolean86 = node77.isTrue();
        com.google.javascript.rhino.Node node87 = node74.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node88 = node61.clonePropsFrom(node74);
        com.google.javascript.rhino.Node node89 = node58.copyInformationFromForTree(node88);
        node58.addSuppression("NUMBER 40.0 [source_file: ]");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 39 + "'", int51 == 39);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(ancestorIterable57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSDocInfo84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node1.addChildToFront(node26);
        boolean boolean28 = node1.isDebugger();
        boolean boolean29 = node1.isOnlyModifiesThisCall();
        boolean boolean30 = node1.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        java.lang.String str17 = node14.getSourceFileName();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean20 = node19.isGetProp();
        boolean boolean21 = node19.isUnscopedQualifiedName();
        boolean boolean22 = node19.isAssignAdd();
        java.lang.String str23 = node19.toString();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node node43 = node19.copyInformationFrom(node25);
        boolean boolean44 = node19.isRegExp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node19.getJSDocInfo();
        com.google.javascript.rhino.Node node46 = node14.copyInformationFrom(node19);
        boolean boolean47 = node14.isOptionalArg();
        int int48 = node14.getSourceOffset();
        boolean boolean49 = node14.isHook();
        boolean boolean50 = node14.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 40.0" + "'", str23, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        double double15 = node4.getDouble();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        java.util.Set<java.lang.String> strSet23 = node17.getDirectives();
        int int24 = node4.getIndexOfChild(node17);
        int int25 = node17.getSourcePosition();
        boolean boolean26 = node17.isDo();
        boolean boolean27 = node17.isSetterDef();
        boolean boolean28 = node17.hasChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) '4', 31, 0);
        java.lang.String str33 = node17.checkTreeEquals(node32);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 40.0d + "'", double15 == 40.0d);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 52.0 31\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 52.0 31\n" + "'", str33, "Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 52.0 31\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 52.0 31\n");
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        node17.setSourceEncodedPositionForTree((int) (short) 0);
        int int21 = node17.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFromForTree(node17);
        boolean boolean23 = node22.isThrow();
        boolean boolean24 = node22.isVarArgs();
        int int25 = node22.getCharno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isRegExp();
        boolean boolean16 = node4.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        java.lang.String str17 = node14.getSourceFileName();
        boolean boolean18 = node14.isWith();
        boolean boolean19 = node14.isIn();
        node14.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        int int4 = node1.getIntProp(45);
        boolean boolean5 = node1.isOnlyModifiesThisCall();
        boolean boolean6 = node1.isFalse();
        int int7 = node1.getLineno();
        java.util.Set<java.lang.String> strSet8 = node1.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = null;
        node47.setJSDocInfo(jSDocInfo58);
        node32.putProp((int) (short) 0, (java.lang.Object) node47);
        node14.putProp(0, (java.lang.Object) node47);
        boolean boolean62 = node14.isDelProp();
        boolean boolean63 = node14.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoIfMissingFrom(node36);
        node38.putBooleanProp(31, true);
        boolean boolean42 = node38.isBreak();
        boolean boolean43 = node38.isOptionalArg();
        com.google.javascript.rhino.Node node44 = node18.useSourceInfoFromForTree(node38);
        boolean boolean45 = node18.isBreak();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        boolean boolean57 = node47.isVoid();
        boolean boolean58 = node47.isIf();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int61 = node60.getChildCount();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        java.lang.String str68 = node63.checkTreeEquals(node66);
        boolean boolean69 = node63.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = node63.getJSDocInfo();
        boolean boolean71 = node63.isDebugger();
        boolean boolean72 = node63.isTrue();
        com.google.javascript.rhino.Node node73 = node60.copyInformationFrom(node63);
        com.google.javascript.rhino.Node node74 = node47.clonePropsFrom(node60);
        boolean boolean75 = node47.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder76 = node47.getJsDocBuilderForNode();
        boolean boolean77 = node47.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = node47.getJSDocInfo();
        boolean boolean79 = node47.isAssign();
        com.google.javascript.rhino.Node node80 = node18.useSourceInfoIfMissingFromForTree(node47);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSDocInfo78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        int int21 = node14.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType22 = node14.getJSType();
        boolean boolean23 = node14.isBreak();
        int int24 = node14.getLineno();
        com.google.javascript.rhino.jstype.JSType jSType25 = node14.getJSType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(jSType25);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isCall();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        boolean boolean29 = node28.isFunction();
        com.google.javascript.rhino.Node node30 = node2.useSourceInfoIfMissingFrom(node28);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        node45.setSourceEncodedPositionForTree((int) (short) 0);
        node45.setLineno((int) ' ');
        boolean boolean50 = node45.isCatch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        java.lang.String str57 = node52.checkTreeEquals(node55);
        com.google.javascript.rhino.Node node58 = node45.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100, node30, node45, 37, 16);
        boolean boolean62 = node30.isVarArgs();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node1.addChildToFront(node26);
        boolean boolean28 = node1.isAnd();
        com.google.javascript.rhino.Node node29 = node1.cloneNode();
        node1.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        boolean boolean20 = node19.wasEmptyNode();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoIfMissingFrom(node37);
        node39.putBooleanProp(31, true);
        boolean boolean43 = node39.isBreak();
        boolean boolean44 = node39.isOptionalArg();
        com.google.javascript.rhino.Node node45 = node19.useSourceInfoFromForTree(node39);
        boolean boolean46 = node45.isWith();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(47, node45, 30, 49);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node5.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        node5.addChildrenToBack(node32);
        boolean boolean34 = node5.isComma();
        boolean boolean35 = node5.isGetProp();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] { node5 };
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray36, 4, 0);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node39.setStaticSourceFile(staticSourceFile40);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable42 = node39.getAncestors();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(ancestorIterable42);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        node17.setSourceEncodedPositionForTree((int) (short) 0);
        int int21 = node17.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFromForTree(node17);
        boolean boolean23 = node22.isThrow();
        boolean boolean24 = node22.isDelProp();
        node22.setSourceFileForTesting("NUMBER 40.0 [length: 39]\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        node46.setSourceEncodedPositionForTree((int) (short) 0);
        node46.setLineno((int) ' ');
        boolean boolean51 = node46.isCatch();
        boolean boolean52 = node46.isDebugger();
        com.google.javascript.rhino.Node node53 = node21.srcrefTree(node46);
        boolean boolean54 = node21.isString();
        boolean boolean55 = node21.isQualifiedName();
        boolean boolean56 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node57 = node14.useSourceInfoFromForTree(node21);
        node14.setSourceEncodedPositionForTree((int) '4');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        int int4 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearSideEffectFlags();
        boolean boolean7 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        boolean boolean9 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        boolean boolean27 = node17.isVoid();
        boolean boolean28 = node17.isIf();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int31 = node30.getChildCount();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        java.lang.String str38 = node33.checkTreeEquals(node36);
        boolean boolean39 = node33.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node33.getJSDocInfo();
        boolean boolean41 = node33.isDebugger();
        boolean boolean42 = node33.isTrue();
        com.google.javascript.rhino.Node node43 = node30.copyInformationFrom(node33);
        com.google.javascript.rhino.Node node44 = node17.clonePropsFrom(node30);
        boolean boolean45 = node17.isRegExp();
        boolean boolean46 = node17.isCall();
        java.lang.String str47 = node17.toString();
        boolean boolean48 = node4.isEquivalentToTyped(node17);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int51 = node50.getChildCount();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node54 = node53.removeChildren();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node57 = node56.removeChildren();
        java.lang.String str58 = node53.checkTreeEquals(node56);
        boolean boolean59 = node53.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = node53.getJSDocInfo();
        boolean boolean61 = node53.isDebugger();
        boolean boolean62 = node53.isTrue();
        com.google.javascript.rhino.Node node63 = node50.copyInformationFrom(node53);
        boolean boolean64 = node63.isComma();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean67 = node66.isGetProp();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int70 = node69.getChildCount();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node76 = node75.removeChildren();
        java.lang.String str77 = node72.checkTreeEquals(node75);
        boolean boolean78 = node72.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = node72.getJSDocInfo();
        boolean boolean80 = node72.isDebugger();
        boolean boolean81 = node72.isTrue();
        com.google.javascript.rhino.Node node82 = node69.copyInformationFrom(node72);
        node82.setSourceEncodedPositionForTree((int) (short) 0);
        int int86 = node82.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node87 = node66.useSourceInfoFromForTree(node82);
        boolean boolean88 = node87.isContinue();
        com.google.javascript.rhino.Node node89 = node63.srcref(node87);
        boolean boolean90 = node89.isSwitch();
        boolean boolean91 = node89.isEmpty();
        com.google.javascript.rhino.Node node92 = node4.copyInformationFromForTree(node89);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER 40.0" + "'", str47, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSDocInfo60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSDocInfo79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        int int6 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        com.google.javascript.rhino.jstype.JSType jSType29 = node14.getJSType();
        boolean boolean30 = node14.isVar();
        com.google.javascript.rhino.Node node31 = node14.getLastSibling();
        boolean boolean32 = node14.isGetElem();
        boolean boolean33 = node14.isString();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        node14.setStaticSourceFile(staticSourceFile34);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        boolean boolean2 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isDebugger();
        boolean boolean12 = node3.isTrue();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node18.setJSDocInfo(jSDocInfo29);
        node3.putProp((int) (short) 0, (java.lang.Object) node18);
        com.google.javascript.rhino.Node node32 = node1.copyInformationFrom(node3);
        boolean boolean33 = node32.isInc();
        boolean boolean34 = node32.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(52);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setAllFlags();
        boolean boolean7 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 1.0\n");
        node1.setQuotedString();
        java.lang.Appendable appendable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("STRING ", 10, (int) (short) 100);
        com.google.javascript.rhino.Node node24 = node4.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node25 = node23.cloneTree();
        boolean boolean26 = node25.isWhile();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int29 = node28.getChildCount();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        java.lang.String str36 = node31.checkTreeEquals(node34);
        boolean boolean37 = node31.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node31.getJSDocInfo();
        boolean boolean39 = node31.isDebugger();
        boolean boolean40 = node31.isTrue();
        com.google.javascript.rhino.Node node41 = node28.copyInformationFrom(node31);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = null;
        node31.setStaticSourceFile(staticSourceFile42);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        node31.addChildrenToBack(node58);
        boolean boolean60 = node31.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node31.getJSDocInfo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable62 = node31.getAncestors();
        boolean boolean63 = node31.isVar();
        boolean boolean64 = node31.isNew();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile65 = node31.getStaticSourceFile();
        boolean boolean66 = node25.isEquivalentTo(node31);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertNotNull(ancestorIterable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(staticSourceFile65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        int int2 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node30 = node14.getLastSibling();
        boolean boolean31 = node30.isDo();
        boolean boolean32 = node30.isWith();
        java.lang.Object obj34 = node30.getProp((int) (byte) -1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '#');
        boolean boolean2 = node1.isRegExp();
        com.google.javascript.rhino.Node node3 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node23 = node6.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = null;
        node6.setJSDocInfo(jSDocInfo24);
        node6.detachChildren();
        int int27 = node6.getLength();
        boolean boolean28 = node6.isLabel();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(51, node6, 12, 38);
        boolean boolean32 = node31.isThrow();
        com.google.javascript.rhino.InputId inputId33 = node31.getInputId();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        boolean boolean49 = node38.isNE();
        node38.setSourceEncodedPosition((int) (short) -1);
        boolean boolean52 = node38.isThrow();
        java.util.Set<java.lang.String> strSet53 = node38.getDirectives();
        boolean boolean54 = node38.isDo();
        boolean boolean55 = node38.isVar();
        boolean boolean56 = node38.isOr();
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node38.setJSType(jSType57);
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildBefore(node31, node38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        boolean boolean6 = node1.isVar();
        boolean boolean7 = node1.isTrue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        boolean boolean50 = node49.isComma();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean53 = node52.isGetProp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        node68.setSourceEncodedPositionForTree((int) (short) 0);
        int int72 = node68.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node73 = node52.useSourceInfoFromForTree(node68);
        boolean boolean74 = node73.isContinue();
        com.google.javascript.rhino.Node node75 = node49.srcref(node73);
        com.google.javascript.rhino.Node node76 = node4.useSourceInfoFrom(node49);
        node76.setVarArgs(true);
        com.google.javascript.rhino.Node node79 = node76.removeFirstChild();
        boolean boolean80 = node79.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }
}


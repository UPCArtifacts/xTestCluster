import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 2, (int) (short) 100, 50);
        boolean boolean4 = node3.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(49, node1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        boolean boolean26 = node1.isIf();
        int int28 = node1.getIntProp(0);
        boolean boolean29 = node1.wasEmptyNode();
        boolean boolean31 = node1.getBooleanProp(36);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        int int39 = node8.getSourcePosition();
        boolean boolean40 = node8.isRegExp();
        node8.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = node8.getParent();
        boolean boolean44 = node43.isFromExterns();
        int int45 = node43.getLineno();
        boolean boolean46 = node43.isTrue();
        boolean boolean47 = node43.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.detachChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        double double33 = node22.getDouble();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        java.util.Set<java.lang.String> strSet41 = node35.getDirectives();
        int int42 = node22.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(39, node5, node22);
        com.google.javascript.rhino.Node node44 = node22.cloneNode();
        boolean boolean45 = node44.isWith();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 40.0d + "'", double33 == 40.0d);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        node19.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(40, node25, 100, 100);
        boolean boolean29 = node19.isEquivalentToTyped(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node48 = node31.useSourceInfoIfMissingFrom(node46);
        node48.putBooleanProp(31, true);
        boolean boolean52 = node48.isHook();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int67 = node66.getChildCount();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node70 = node69.removeChildren();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        java.lang.String str74 = node69.checkTreeEquals(node72);
        boolean boolean75 = node69.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = node69.getJSDocInfo();
        boolean boolean77 = node69.isDebugger();
        boolean boolean78 = node69.isTrue();
        com.google.javascript.rhino.Node node79 = node66.copyInformationFrom(node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = null;
        node69.setJSDocInfo(jSDocInfo80);
        node54.putProp((int) (short) 0, (java.lang.Object) node69);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100, node19, node48, node54, 0, 15);
        boolean boolean86 = node19.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder87 = node19.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder87);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        boolean boolean3 = node1.isAssignAdd();
        boolean boolean4 = node1.isFor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.detachChildren();
        boolean boolean17 = node4.isTrue();
        int int18 = node4.getLineno();
        boolean boolean19 = node4.isReturn();
        node4.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isCall();
        node1.removeProp(30);
        int int15 = node1.getLength();
        com.google.javascript.rhino.Node node16 = node1.getNext();
        boolean boolean17 = node1.isCase();
        boolean boolean18 = node1.isCall();
        int int19 = node1.getSourcePosition();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        double double20 = node9.getDouble();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = null;
        node25.setJSDocInfo(jSDocInfo36);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 0, node3, node9, node25);
        boolean boolean39 = node9.isAdd();
        int int40 = node9.getSourcePosition();
        boolean boolean41 = node9.isRegExp();
        node9.setType((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(15, node9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 40.0d + "'", double20 == 40.0d);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        java.lang.String str30 = node14.toString();
        com.google.javascript.rhino.InputId inputId31 = null;
        node14.setInputId(inputId31);
        node14.setVarArgs(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER 40.0" + "'", str30, "NUMBER 40.0");
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isHook();
        boolean boolean16 = node4.isReturn();
        boolean boolean17 = node4.isParamList();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        java.lang.String str24 = node19.checkTreeEquals(node22);
        boolean boolean25 = node19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node19.getJSDocInfo();
        boolean boolean27 = node19.isDebugger();
        boolean boolean28 = node19.isTrue();
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node19);
        node29.setSourceEncodedPositionForTree((int) (short) 0);
        node29.setLineno((int) ' ');
        boolean boolean34 = node29.isCatch();
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node4.srcrefTree(node29);
        boolean boolean37 = node4.isString();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(40, node40, 100, 100);
        boolean boolean44 = node43.hasChildren();
        node4.addChildToFront(node43);
        boolean boolean46 = node4.isSwitch();
        boolean boolean47 = node4.isNot();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(15);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        boolean boolean32 = node22.isInstanceOf();
        int int33 = node22.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node35.setJSDocInfo(jSDocInfo53);
        node35.detachChildren();
        node22.addChildToBack(node35);
        node22.setDouble(0.0d);
        node5.addChildToFront(node22);
        boolean boolean60 = node22.isSyntheticBlock();
        boolean boolean61 = node22.isEmpty();
        boolean boolean62 = node22.isGetterDef();
        boolean boolean63 = node22.isScript();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        int int17 = node14.getSourceOffset();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        boolean boolean33 = node22.isVoid();
        com.google.javascript.rhino.Node node34 = node22.getParent();
        boolean boolean35 = node22.isNew();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node22.getStaticSourceFile();
        int int37 = node14.getIndexOfChild(node22);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean18 = node17.isGetProp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        node33.setSourceEncodedPositionForTree((int) (short) 0);
        int int37 = node33.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node38 = node17.useSourceInfoFromForTree(node33);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node14.srcref(node38);
        com.google.javascript.rhino.Node node42 = node40.getAncestor(0);
        boolean boolean43 = node42.isNot();
        boolean boolean44 = node42.isNull();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "NUMBER 40.0\n    NUMBER 40.0\n", 53, (int) (byte) -1);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        java.lang.String str11 = node6.checkTreeEquals(node9);
        boolean boolean12 = node6.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        boolean boolean14 = node6.isDebugger();
        boolean boolean15 = node6.isTrue();
        boolean boolean16 = node6.isFromExterns();
        boolean boolean17 = node6.isOptionalArg();
        com.google.javascript.rhino.Node node18 = node4.srcrefTree(node6);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int21 = node20.getChildCount();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        java.lang.String str28 = node23.checkTreeEquals(node26);
        boolean boolean29 = node23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node23.getJSDocInfo();
        boolean boolean31 = node23.isDebugger();
        boolean boolean32 = node23.isTrue();
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node37 = node20.useSourceInfoIfMissingFrom(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = null;
        node20.setJSDocInfo(jSDocInfo38);
        node20.detachChildren();
        int int41 = node20.getLength();
        node20.detachChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node60 = node59.removeChildren();
        com.google.javascript.rhino.Node node61 = node44.useSourceInfoIfMissingFrom(node59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = null;
        node44.setJSDocInfo(jSDocInfo62);
        node44.detachChildren();
        int int65 = node44.getLength();
        boolean boolean66 = node44.isTry();
        boolean boolean67 = node44.isContinue();
        com.google.javascript.rhino.Node node68 = node44.getLastChild();
        int int69 = node44.getSourcePosition();
        com.google.javascript.rhino.Node node70 = node20.useSourceInfoFromForTree(node44);
        node4.addChildToBack(node44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = null;
        node4.setJSDocInfo(jSDocInfo72);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node42 = node41.getNext();
        node8.putProp((int) (byte) -1, (java.lang.Object) node41);
        boolean boolean44 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        java.lang.String str51 = node46.checkTreeEquals(node49);
        boolean boolean52 = node46.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = node46.getJSDocInfo();
        boolean boolean54 = node46.isDebugger();
        boolean boolean55 = node46.isTrue();
        boolean boolean56 = node46.isVoid();
        boolean boolean57 = node46.isIf();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int60 = node59.getChildCount();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node63 = node62.removeChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        java.lang.String str67 = node62.checkTreeEquals(node65);
        boolean boolean68 = node62.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node62.getJSDocInfo();
        boolean boolean70 = node62.isDebugger();
        boolean boolean71 = node62.isTrue();
        com.google.javascript.rhino.Node node72 = node59.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node73 = node46.clonePropsFrom(node59);
        boolean boolean74 = node59.isRegExp();
        boolean boolean75 = node59.isQualifiedName();
        boolean boolean76 = node59.hasMoreThanOneChild();
        node59.setWasEmptyNode(false);
        int int79 = node8.getIndexOfChild(node59);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSDocInfo53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.detachChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        double double33 = node22.getDouble();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        java.util.Set<java.lang.String> strSet41 = node35.getDirectives();
        int int42 = node22.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(39, node5, node22);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable44 = node5.getAncestors();
        boolean boolean45 = node5.isRegExp();
        java.lang.String str46 = node5.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 40.0d + "'", double33 == 40.0d);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node1.isRegExp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node1.getJSDocInfo();
        int int31 = node1.getSideEffectFlags();
        java.lang.Appendable appendable32 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 100);
        boolean boolean2 = node1.isLabel();
        com.google.javascript.rhino.Node node3 = node1.getLastSibling();
        com.google.javascript.rhino.Node node4 = node1.getNext();
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        int int7 = sideEffectFlags0.valueOf();
        int int8 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 10, 12, 54);
        com.google.javascript.rhino.Node node5 = node4.cloneNode();
        boolean boolean6 = node4.isTry();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(45, node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        boolean boolean21 = node1.isNot();
        node1.setSourceEncodedPositionForTree(4);
        boolean boolean24 = node1.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(46, (int) (byte) 100, (int) (short) 100);
        boolean boolean4 = node3.isIn();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean7 = node6.isGetProp();
        com.google.javascript.rhino.Node node8 = node3.srcrefTree(node6);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isVoid();
        com.google.javascript.rhino.Node node17 = node5.getParent();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 100, node5, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        boolean boolean32 = node22.isInstanceOf();
        int int33 = node22.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        node35.setJSDocInfo(jSDocInfo53);
        node35.detachChildren();
        node22.addChildToBack(node35);
        node22.setDouble(0.0d);
        node5.addChildToFront(node22);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        java.lang.String str66 = node61.checkTreeEquals(node64);
        boolean boolean67 = node61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node61.getJSDocInfo();
        boolean boolean69 = node61.isDebugger();
        boolean boolean70 = node61.isTrue();
        boolean boolean71 = node61.isVoid();
        boolean boolean72 = node61.isIf();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int75 = node74.getChildCount();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node78 = node77.removeChildren();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node81 = node80.removeChildren();
        java.lang.String str82 = node77.checkTreeEquals(node80);
        boolean boolean83 = node77.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = node77.getJSDocInfo();
        boolean boolean85 = node77.isDebugger();
        boolean boolean86 = node77.isTrue();
        com.google.javascript.rhino.Node node87 = node74.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node88 = node61.clonePropsFrom(node74);
        boolean boolean89 = node61.isRegExp();
        com.google.javascript.rhino.Node node90 = node5.srcrefTree(node61);
        com.google.javascript.rhino.Node node91 = node90.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder92 = node91.new FileLevelJsDocBuilder();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to com.google.javascript.rhino.Node$FileLevelJsDocBuilder with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSDocInfo84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNull(node91);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node1.getAncestors();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable14 = node1.getAncestors();
        boolean boolean15 = node1.isEmpty();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertNotNull(ancestorIterable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        boolean boolean3 = node1.isThrow();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        double double20 = node9.getDouble();
        boolean boolean21 = node9.isNull();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node27 = node26.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        java.lang.String str31 = node26.checkTreeEquals(node29);
        boolean boolean32 = node26.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node26.getJSDocInfo();
        boolean boolean34 = node26.isDebugger();
        boolean boolean35 = node26.isTrue();
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node26);
        boolean boolean37 = node26.isNE();
        node26.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean42 = node41.isGetProp();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        node57.setSourceEncodedPositionForTree((int) (short) 0);
        int int61 = node57.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node62 = node41.useSourceInfoFromForTree(node57);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node65 = node64.removeChildren();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        java.lang.String str69 = node64.checkTreeEquals(node67);
        boolean boolean70 = node64.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = node64.getJSDocInfo();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (byte) 100, node9, node26, node57, node64, 46, (int) (byte) 1);
        boolean boolean75 = node26.isIn();
        com.google.javascript.rhino.Node node76 = node1.copyInformationFrom(node26);
        boolean boolean77 = node1.isGetProp();
        boolean boolean78 = node1.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 40.0d + "'", double20 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSDocInfo71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        boolean boolean50 = node40.isInstanceOf();
        node8.addChildrenToBack(node40);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isInstanceOf();
        int int12 = node1.getType();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node1.getAncestors();
        boolean boolean14 = node1.isBlock();
        boolean boolean15 = node1.isFunction();
        boolean boolean16 = node1.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        com.google.javascript.rhino.jstype.JSType jSType29 = node14.getJSType();
        boolean boolean30 = node14.isVar();
        com.google.javascript.rhino.Node node31 = node14.getLastSibling();
        boolean boolean32 = node31.isNew();
        boolean boolean33 = node31.wasEmptyNode();
        node31.detachChildren();
        boolean boolean35 = node31.isInstanceOf();
        boolean boolean36 = node31.isIn();
        int int38 = node31.getIntProp(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.getJsDocBuilderForNode();
        node1.setIsSyntheticBlock(true);
        boolean boolean5 = node1.isCase();
        com.google.javascript.rhino.Node node6 = node1.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node1.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder7.append("Node tree inequality:\nTree1:\nNUMBER 16.0\n\n\nTree2:\nNUMBER 40.0\n\n\nSubtree1: NUMBER 16.0\n\n\nSubtree2: NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        boolean boolean30 = node15.isRegExp();
        java.lang.String str31 = node15.toString();
        com.google.javascript.rhino.InputId inputId32 = null;
        node15.setInputId(inputId32);
        node15.setSourceFileForTesting("NUMBER 1.0\n");
        com.google.javascript.rhino.Node node36 = node15.getNext();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(44, node15, (int) (short) 0, 49);
        boolean boolean40 = node15.isSwitch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 40.0" + "'", str31, "NUMBER 40.0");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 100.0\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(12);
        boolean boolean2 = node1.isUnscopedQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isCatch();
        boolean boolean20 = node14.isDebugger();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoIfMissingFrom(node37);
        boolean boolean40 = node22.isTypeOf();
        com.google.javascript.rhino.Node node41 = node14.copyInformationFromForTree(node22);
        boolean boolean42 = node41.isEmpty();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node14.isNot();
        node14.setDouble((double) 10L);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        node38.setSourceEncodedPositionForTree((int) (short) 0);
        int int42 = node38.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node38.setStaticSourceFile(staticSourceFile43);
        boolean boolean45 = node38.isNot();
        node14.addChildrenToFront(node38);
        boolean boolean47 = node38.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        int int16 = node14.getLength();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        node4.putBooleanProp(38, false);
        boolean boolean36 = node4.isGetterDef();
        node4.putBooleanProp((int) (short) 0, false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        java.lang.String str17 = node14.getSourceFileName();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean20 = node19.isGetProp();
        boolean boolean21 = node19.isUnscopedQualifiedName();
        boolean boolean22 = node19.isAssignAdd();
        java.lang.String str23 = node19.toString();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int26 = node25.getChildCount();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        boolean boolean36 = node28.isDebugger();
        boolean boolean37 = node28.isTrue();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node node43 = node19.copyInformationFrom(node25);
        boolean boolean44 = node19.isRegExp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node19.getJSDocInfo();
        com.google.javascript.rhino.Node node46 = node14.copyInformationFrom(node19);
        boolean boolean47 = node46.isBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 40.0" + "'", str23, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isTry();
        boolean boolean25 = node2.isContinue();
        com.google.javascript.rhino.Node node26 = node2.getLastChild();
        int int27 = node2.getSourcePosition();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 1, node2, (int) (short) 1, 35);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 16);
        com.google.javascript.rhino.Node node33 = node32.getLastSibling();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("NUMBER 40.0", 36, (int) (short) 100);
        com.google.javascript.rhino.Node node38 = node37.getLastSibling();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int41 = node40.getChildCount();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        java.lang.String str48 = node43.checkTreeEquals(node46);
        boolean boolean49 = node43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node43.getJSDocInfo();
        boolean boolean51 = node43.isDebugger();
        boolean boolean52 = node43.isTrue();
        com.google.javascript.rhino.Node node53 = node40.copyInformationFrom(node43);
        boolean boolean54 = node43.isVoid();
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node43.setJSType(jSType55);
        boolean boolean57 = node38.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node58 = node38.getLastSibling();
        com.google.javascript.rhino.Node node59 = node33.useSourceInfoIfMissingFromForTree(node38);
        com.google.javascript.rhino.Node node60 = node30.useSourceInfoIfMissingFromForTree(node33);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 40.0\n");
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.isGetElem();
        boolean boolean4 = node1.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "STRING NUMBER 40.0\n" + "'", str2, "STRING NUMBER 40.0\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        int int39 = node8.getSourcePosition();
        boolean boolean40 = node8.isRegExp();
        node8.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = node8.getParent();
        boolean boolean44 = node8.isDelProp();
        node8.setLength(0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node2.setJSDocInfo(jSDocInfo20);
        node2.detachChildren();
        int int23 = node2.getLength();
        boolean boolean24 = node2.isTry();
        boolean boolean25 = node2.isThis();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int28 = node27.getChildCount();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        java.lang.String str35 = node30.checkTreeEquals(node33);
        boolean boolean36 = node30.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node30.getJSDocInfo();
        boolean boolean38 = node30.isDebugger();
        boolean boolean39 = node30.isTrue();
        com.google.javascript.rhino.Node node40 = node27.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        com.google.javascript.rhino.Node node44 = node27.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = null;
        node27.setJSDocInfo(jSDocInfo45);
        node27.detachChildren();
        int int48 = node27.getLength();
        boolean boolean49 = node27.isTry();
        boolean boolean50 = node27.isContinue();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node27.addChildToFront(node52);
        boolean boolean54 = node27.isAnd();
        com.google.javascript.rhino.Node node55 = node27.cloneNode();
        boolean boolean56 = node55.isOptionalArg();
        boolean boolean57 = node2.isEquivalentToTyped(node55);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(23, node2);
        boolean boolean59 = node2.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.detachChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        double double33 = node22.getDouble();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        java.util.Set<java.lang.String> strSet41 = node35.getDirectives();
        int int42 = node22.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(39, node5, node22);
        boolean boolean44 = node22.isLocalResultCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 40.0d + "'", double33 == 40.0d);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        java.util.Set<java.lang.String> strSet8 = node2.getDirectives();
        node2.setIsSyntheticBlock(true);
        boolean boolean11 = node2.isVoid();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, 47, 4);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int9 = node8.getChildCount();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        java.lang.String str16 = node11.checkTreeEquals(node14);
        boolean boolean17 = node11.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node11.getJSDocInfo();
        boolean boolean19 = node11.isDebugger();
        boolean boolean20 = node11.isTrue();
        com.google.javascript.rhino.Node node21 = node8.copyInformationFrom(node11);
        boolean boolean22 = node11.isVoid();
        com.google.javascript.rhino.Node node23 = node11.getParent();
        node4.addChildToFront(node11);
        boolean boolean25 = node4.isSetterDef();
        boolean boolean26 = node4.isContinue();
        boolean boolean27 = node4.isVarArgs();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node4.getJSDocInfo();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int31 = node30.getChildCount();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        java.lang.String str38 = node33.checkTreeEquals(node36);
        boolean boolean39 = node33.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node33.getJSDocInfo();
        boolean boolean41 = node33.isDebugger();
        boolean boolean42 = node33.isTrue();
        com.google.javascript.rhino.Node node43 = node30.copyInformationFrom(node33);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node46 = node45.removeChildren();
        com.google.javascript.rhino.Node node47 = node30.useSourceInfoIfMissingFrom(node45);
        boolean boolean48 = node47.wasEmptyNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node49 = node4.getChildBefore(node47);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node29 = node2.clonePropsFrom(node15);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        boolean boolean42 = node32.isVoid();
        boolean boolean43 = node32.isIf();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        com.google.javascript.rhino.Node node59 = node32.clonePropsFrom(node45);
        boolean boolean60 = node32.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node32.getJsDocBuilderForNode();
        boolean boolean62 = node32.isInstanceOf();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(48, node32);
        boolean boolean64 = node63.isWith();
        boolean boolean65 = node63.isCase();
        boolean boolean66 = node63.isNew();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node29, node63, 44, (int) (short) -1);
        boolean boolean70 = node29.isNot();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        boolean boolean23 = node1.hasChild(node22);
        boolean boolean24 = node1.isObjectLit();
        node1.setSourceEncodedPositionForTree(47);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        java.lang.String str33 = node28.checkTreeEquals(node31);
        boolean boolean34 = node28.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node28.getJSDocInfo();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int38 = node37.getChildCount();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        java.lang.String str45 = node40.checkTreeEquals(node43);
        boolean boolean46 = node40.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node40.getJSDocInfo();
        boolean boolean48 = node40.isDebugger();
        boolean boolean49 = node40.isTrue();
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node54 = node37.useSourceInfoIfMissingFrom(node52);
        node54.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node58 = node28.useSourceInfoIfMissingFrom(node54);
        node1.addChildToBack(node28);
        java.lang.String str60 = node28.toStringTree();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(40, node63, 100, 100);
        boolean boolean67 = node63.isNull();
        com.google.javascript.rhino.Node node68 = node28.useSourceInfoIfMissingFrom(node63);
        boolean boolean69 = node68.isWith();
        boolean boolean70 = node68.isScript();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER 40.0\n" + "'", str60, "NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean24 = node23.isGetProp();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        boolean boolean26 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node27 = node1.copyInformationFrom(node23);
        node27.setVarArgs(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node27.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node49 = node32.useSourceInfoIfMissingFrom(node47);
        boolean boolean50 = node32.isTypeOf();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int53 = node52.getChildCount();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        java.lang.String str60 = node55.checkTreeEquals(node58);
        boolean boolean61 = node55.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = node55.getJSDocInfo();
        boolean boolean63 = node55.isDebugger();
        boolean boolean64 = node55.isTrue();
        com.google.javascript.rhino.Node node65 = node52.copyInformationFrom(node55);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        com.google.javascript.rhino.Node node69 = node52.useSourceInfoIfMissingFrom(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = null;
        node52.setJSDocInfo(jSDocInfo70);
        node52.detachChildren();
        int int73 = node52.getLength();
        boolean boolean74 = node52.isTry();
        boolean boolean75 = node52.isContinue();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node52.addChildToFront(node77);
        boolean boolean79 = node52.isDebugger();
        com.google.javascript.rhino.Node node80 = node32.clonePropsFrom(node52);
        node27.addChildrenToFront(node80);
        double double82 = node80.getDouble();
        // The following exception was thrown during execution in test generation
        try {
            node80.setString("NUMBER 40.0 32");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 40.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSDocInfo62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 40.0d + "'", double82 == 40.0d);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        node14.setLineno((int) ' ');
        boolean boolean19 = node14.isCatch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        com.google.javascript.rhino.Node node27 = node14.useSourceInfoIfMissingFrom(node21);
        boolean boolean28 = node14.isFunction();
        boolean boolean29 = node14.hasChildren();
        boolean boolean30 = node14.isLabel();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node14.isComma();
        boolean boolean16 = node14.isComma();
        node14.putBooleanProp((int) (short) 1, true);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        boolean boolean31 = node21.isVoid();
        boolean boolean32 = node21.isIf();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int35 = node34.getChildCount();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node41 = node40.removeChildren();
        java.lang.String str42 = node37.checkTreeEquals(node40);
        boolean boolean43 = node37.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node37.getJSDocInfo();
        boolean boolean45 = node37.isDebugger();
        boolean boolean46 = node37.isTrue();
        com.google.javascript.rhino.Node node47 = node34.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node48 = node21.clonePropsFrom(node34);
        boolean boolean49 = node34.isRegExp();
        com.google.javascript.rhino.Node node50 = node34.getLastSibling();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int53 = node52.getChildCount();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        java.lang.String str60 = node55.checkTreeEquals(node58);
        boolean boolean61 = node55.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = node55.getJSDocInfo();
        boolean boolean63 = node55.isDebugger();
        boolean boolean64 = node55.isTrue();
        com.google.javascript.rhino.Node node65 = node52.copyInformationFrom(node55);
        boolean boolean66 = node55.isNE();
        node55.detachChildren();
        com.google.javascript.rhino.Node node68 = node50.useSourceInfoFromForTree(node55);
        node14.addChildToFront(node50);
        boolean boolean70 = node14.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSDocInfo62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        node15.setSourceEncodedPositionForTree((int) (short) 0);
        int int19 = node15.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node15.setStaticSourceFile(staticSourceFile20);
        boolean boolean22 = node15.isNot();
        node15.setDouble((double) 10L);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int27 = node26.getChildCount();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        java.lang.String str34 = node29.checkTreeEquals(node32);
        boolean boolean35 = node29.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node29.getJSDocInfo();
        boolean boolean37 = node29.isDebugger();
        boolean boolean38 = node29.isTrue();
        com.google.javascript.rhino.Node node39 = node26.copyInformationFrom(node29);
        node39.setSourceEncodedPositionForTree((int) (short) 0);
        int int43 = node39.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = null;
        node39.setStaticSourceFile(staticSourceFile44);
        boolean boolean46 = node39.isNot();
        node15.addChildrenToFront(node39);
        boolean boolean48 = node39.isNumber();
        boolean boolean49 = node39.isWith();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int52 = node51.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node54);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        com.google.javascript.rhino.Node node68 = node51.useSourceInfoIfMissingFrom(node66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = null;
        node51.setJSDocInfo(jSDocInfo69);
        node51.detachChildren();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean74 = node73.isGetProp();
        boolean boolean75 = node73.isUnscopedQualifiedName();
        boolean boolean76 = node73.isAssignAdd();
        com.google.javascript.rhino.Node node77 = node51.copyInformationFrom(node73);
        node77.setVarArgs(false);
        boolean boolean80 = node77.isComma();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(10, node39, node77, 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        node46.setSourceEncodedPositionForTree((int) (short) 0);
        node46.setLineno((int) ' ');
        boolean boolean51 = node46.isCatch();
        boolean boolean52 = node46.isDebugger();
        com.google.javascript.rhino.Node node53 = node21.srcrefTree(node46);
        boolean boolean54 = node21.isString();
        boolean boolean55 = node21.isQualifiedName();
        boolean boolean56 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node57 = node14.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node58 = node57.removeFirstChild();
        node57.setType(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node57.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node57.setJSType(jSType62);
        boolean boolean64 = node57.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node20 = node19.removeChildren();
        java.lang.String str21 = node16.checkTreeEquals(node19);
        boolean boolean22 = node16.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        boolean boolean24 = node16.isDebugger();
        boolean boolean25 = node16.isTrue();
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node16.setJSDocInfo(jSDocInfo27);
        node1.putProp((int) (short) 0, (java.lang.Object) node16);
        boolean boolean30 = node1.isIf();
        boolean boolean31 = node1.isReturn();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node1.siblings();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags34 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags34.setReturnsTainted();
        boolean boolean36 = sideEffectFlags34.areAllFlagsSet();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(sideEffectFlags34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int4 = node3.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node3.siblings();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) '#', nodeArray8, (int) (short) 1, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        node27.setSourceEncodedPositionForTree((int) (short) 0);
        node27.setLineno((int) ' ');
        boolean boolean32 = node27.isCatch();
        boolean boolean33 = node27.isDebugger();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        com.google.javascript.rhino.Node node52 = node35.useSourceInfoIfMissingFrom(node50);
        boolean boolean53 = node35.isTypeOf();
        com.google.javascript.rhino.Node node54 = node27.copyInformationFromForTree(node35);
        node11.putProp((int) (byte) 1, (java.lang.Object) node27);
        boolean boolean56 = node11.isTrue();
        boolean boolean57 = node11.isGetterDef();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(12, node11);
        boolean boolean59 = node11.isParamList();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        java.lang.String str2 = node1.toString();
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) 29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "STRING " + "'", str2, "STRING ");
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        int int4 = node1.getLength();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        node19.setSourceEncodedPositionForTree((int) (short) 0);
        node19.setLineno((int) ' ');
        boolean boolean24 = node19.isAnd();
        boolean boolean25 = node19.isHook();
        com.google.javascript.rhino.Node node26 = node1.srcref(node19);
        node19.setType((int) (byte) 0);
        boolean boolean29 = node19.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        node1.putIntProp(1, (int) (byte) -1);
        boolean boolean26 = node1.hasOneChild();
        boolean boolean27 = node1.isObjectLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int30 = node29.getChildCount();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        com.google.javascript.rhino.Node node42 = node29.copyInformationFrom(node32);
        boolean boolean43 = node29.wasEmptyNode();
        com.google.javascript.rhino.Node node44 = node1.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean45 = node29.isInstanceOf();
        boolean boolean46 = node29.isFromExterns();
        com.google.javascript.rhino.InputId inputId47 = null;
        node29.setInputId(inputId47);
        boolean boolean49 = node29.isNew();
        boolean boolean50 = node29.isIf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        boolean boolean30 = node14.isExprResult();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isRegExp();
        boolean boolean16 = node4.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        java.lang.String str17 = node14.getSourceFileName();
        boolean boolean18 = node14.isWith();
        boolean boolean19 = node14.isIn();
        node14.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        int int4 = node1.getIntProp(45);
        boolean boolean5 = node1.isOnlyModifiesThisCall();
        boolean boolean6 = node1.isFalse();
        int int7 = node1.getLineno();
        java.util.Set<java.lang.String> strSet8 = node1.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node33 = node32.removeChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        java.lang.String str37 = node32.checkTreeEquals(node35);
        boolean boolean38 = node32.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = node32.getJSDocInfo();
        boolean boolean40 = node32.isDebugger();
        boolean boolean41 = node32.isTrue();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        com.google.javascript.rhino.Node node57 = node44.copyInformationFrom(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = null;
        node47.setJSDocInfo(jSDocInfo58);
        node32.putProp((int) (short) 0, (java.lang.Object) node47);
        node14.putProp(0, (java.lang.Object) node47);
        boolean boolean62 = node14.isDelProp();
        boolean boolean63 = node14.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean19 = node18.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoIfMissingFrom(node36);
        node38.putBooleanProp(31, true);
        boolean boolean42 = node38.isBreak();
        boolean boolean43 = node38.isOptionalArg();
        com.google.javascript.rhino.Node node44 = node18.useSourceInfoFromForTree(node38);
        boolean boolean45 = node18.isBreak();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node48 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node51 = node50.removeChildren();
        java.lang.String str52 = node47.checkTreeEquals(node50);
        boolean boolean53 = node47.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node47.getJSDocInfo();
        boolean boolean55 = node47.isDebugger();
        boolean boolean56 = node47.isTrue();
        boolean boolean57 = node47.isVoid();
        boolean boolean58 = node47.isIf();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int61 = node60.getChildCount();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node64 = node63.removeChildren();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        java.lang.String str68 = node63.checkTreeEquals(node66);
        boolean boolean69 = node63.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = node63.getJSDocInfo();
        boolean boolean71 = node63.isDebugger();
        boolean boolean72 = node63.isTrue();
        com.google.javascript.rhino.Node node73 = node60.copyInformationFrom(node63);
        com.google.javascript.rhino.Node node74 = node47.clonePropsFrom(node60);
        boolean boolean75 = node47.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder76 = node47.getJsDocBuilderForNode();
        boolean boolean77 = node47.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = node47.getJSDocInfo();
        boolean boolean79 = node47.isAssign();
        com.google.javascript.rhino.Node node80 = node18.useSourceInfoIfMissingFromForTree(node47);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSDocInfo78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        node14.setSourceEncodedPositionForTree((int) (short) 0);
        int int18 = node14.getIntProp((int) (short) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node14.setStaticSourceFile(staticSourceFile19);
        int int21 = node14.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType22 = node14.getJSType();
        boolean boolean23 = node14.isBreak();
        int int24 = node14.getLineno();
        com.google.javascript.rhino.jstype.JSType jSType25 = node14.getJSType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(jSType25);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        java.lang.String str7 = node2.checkTreeEquals(node5);
        boolean boolean8 = node2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node2.getJSDocInfo();
        boolean boolean10 = node2.isDebugger();
        boolean boolean11 = node2.isTrue();
        boolean boolean12 = node2.isVoid();
        boolean boolean13 = node2.isCall();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        boolean boolean29 = node28.isFunction();
        com.google.javascript.rhino.Node node30 = node2.useSourceInfoIfMissingFrom(node28);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int33 = node32.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        boolean boolean41 = node35.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node35.getJSDocInfo();
        boolean boolean43 = node35.isDebugger();
        boolean boolean44 = node35.isTrue();
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node35);
        node45.setSourceEncodedPositionForTree((int) (short) 0);
        node45.setLineno((int) ' ');
        boolean boolean50 = node45.isCatch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node53 = node52.removeChildren();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        java.lang.String str57 = node52.checkTreeEquals(node55);
        com.google.javascript.rhino.Node node58 = node45.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100, node30, node45, 37, 16);
        boolean boolean62 = node30.isVarArgs();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node17 = node16.removeChildren();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        node1.setJSDocInfo(jSDocInfo19);
        node1.detachChildren();
        int int22 = node1.getLength();
        boolean boolean23 = node1.isTry();
        boolean boolean24 = node1.isContinue();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        node1.addChildToFront(node26);
        boolean boolean28 = node1.isAnd();
        com.google.javascript.rhino.Node node29 = node1.cloneNode();
        node1.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        boolean boolean20 = node19.wasEmptyNode();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        java.lang.String str30 = node25.checkTreeEquals(node28);
        boolean boolean31 = node25.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node25.getJSDocInfo();
        boolean boolean33 = node25.isDebugger();
        boolean boolean34 = node25.isTrue();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoIfMissingFrom(node37);
        node39.putBooleanProp(31, true);
        boolean boolean43 = node39.isBreak();
        boolean boolean44 = node39.isOptionalArg();
        com.google.javascript.rhino.Node node45 = node19.useSourceInfoFromForTree(node39);
        boolean boolean46 = node45.isWith();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(47, node45, 30, 49);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node5.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        node5.addChildrenToBack(node32);
        boolean boolean34 = node5.isComma();
        boolean boolean35 = node5.isGetProp();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] { node5 };
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray36, 4, 0);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node39.setStaticSourceFile(staticSourceFile40);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable42 = node39.getAncestors();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(ancestorIterable42);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        java.lang.String str12 = node7.checkTreeEquals(node10);
        boolean boolean13 = node7.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isDebugger();
        boolean boolean16 = node7.isTrue();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node7);
        node17.setSourceEncodedPositionForTree((int) (short) 0);
        int int21 = node17.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFromForTree(node17);
        boolean boolean23 = node22.isThrow();
        boolean boolean24 = node22.isDelProp();
        node22.setSourceFileForTesting("NUMBER 40.0 [length: 39]\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        java.lang.String str41 = node36.checkTreeEquals(node39);
        boolean boolean42 = node36.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        boolean boolean44 = node36.isDebugger();
        boolean boolean45 = node36.isTrue();
        com.google.javascript.rhino.Node node46 = node33.copyInformationFrom(node36);
        node46.setSourceEncodedPositionForTree((int) (short) 0);
        node46.setLineno((int) ' ');
        boolean boolean51 = node46.isCatch();
        boolean boolean52 = node46.isDebugger();
        com.google.javascript.rhino.Node node53 = node21.srcrefTree(node46);
        boolean boolean54 = node21.isString();
        boolean boolean55 = node21.isQualifiedName();
        boolean boolean56 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node57 = node14.useSourceInfoFromForTree(node21);
        node14.setSourceEncodedPositionForTree((int) '4');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        int int4 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearSideEffectFlags();
        boolean boolean7 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        boolean boolean9 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        boolean boolean27 = node17.isVoid();
        boolean boolean28 = node17.isIf();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int31 = node30.getChildCount();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node34 = node33.removeChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node37 = node36.removeChildren();
        java.lang.String str38 = node33.checkTreeEquals(node36);
        boolean boolean39 = node33.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node33.getJSDocInfo();
        boolean boolean41 = node33.isDebugger();
        boolean boolean42 = node33.isTrue();
        com.google.javascript.rhino.Node node43 = node30.copyInformationFrom(node33);
        com.google.javascript.rhino.Node node44 = node17.clonePropsFrom(node30);
        boolean boolean45 = node17.isRegExp();
        boolean boolean46 = node17.isCall();
        java.lang.String str47 = node17.toString();
        boolean boolean48 = node4.isEquivalentToTyped(node17);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int51 = node50.getChildCount();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node54 = node53.removeChildren();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node57 = node56.removeChildren();
        java.lang.String str58 = node53.checkTreeEquals(node56);
        boolean boolean59 = node53.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = node53.getJSDocInfo();
        boolean boolean61 = node53.isDebugger();
        boolean boolean62 = node53.isTrue();
        com.google.javascript.rhino.Node node63 = node50.copyInformationFrom(node53);
        boolean boolean64 = node63.isComma();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean67 = node66.isGetProp();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int70 = node69.getChildCount();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node76 = node75.removeChildren();
        java.lang.String str77 = node72.checkTreeEquals(node75);
        boolean boolean78 = node72.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = node72.getJSDocInfo();
        boolean boolean80 = node72.isDebugger();
        boolean boolean81 = node72.isTrue();
        com.google.javascript.rhino.Node node82 = node69.copyInformationFrom(node72);
        node82.setSourceEncodedPositionForTree((int) (short) 0);
        int int86 = node82.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node87 = node66.useSourceInfoFromForTree(node82);
        boolean boolean88 = node87.isContinue();
        com.google.javascript.rhino.Node node89 = node63.srcref(node87);
        boolean boolean90 = node89.isSwitch();
        boolean boolean91 = node89.isEmpty();
        com.google.javascript.rhino.Node node92 = node4.copyInformationFromForTree(node89);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER 40.0" + "'", str47, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSDocInfo60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSDocInfo79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        int int6 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        com.google.javascript.rhino.jstype.JSType jSType29 = node14.getJSType();
        boolean boolean30 = node14.isVar();
        com.google.javascript.rhino.Node node31 = node14.getLastSibling();
        boolean boolean32 = node14.isGetElem();
        boolean boolean33 = node14.isString();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        node14.setStaticSourceFile(staticSourceFile34);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        boolean boolean2 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node4 = node3.removeChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node7 = node6.removeChildren();
        java.lang.String str8 = node3.checkTreeEquals(node6);
        boolean boolean9 = node3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isDebugger();
        boolean boolean12 = node3.isTrue();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        java.lang.String str23 = node18.checkTreeEquals(node21);
        boolean boolean24 = node18.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        boolean boolean26 = node18.isDebugger();
        boolean boolean27 = node18.isTrue();
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        node18.setJSDocInfo(jSDocInfo29);
        node3.putProp((int) (short) 0, (java.lang.Object) node18);
        com.google.javascript.rhino.Node node32 = node1.copyInformationFrom(node3);
        boolean boolean33 = node32.isInc();
        boolean boolean34 = node32.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(52);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setAllFlags();
        boolean boolean7 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 1.0\n");
        node1.setQuotedString();
        java.lang.Appendable appendable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = null;
        node4.setJSDocInfo(jSDocInfo15);
        int int17 = node4.getSourceOffset();
        node4.setLength(39);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("STRING ", 10, (int) (short) 100);
        com.google.javascript.rhino.Node node24 = node4.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node25 = node23.cloneTree();
        boolean boolean26 = node25.isWhile();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int29 = node28.getChildCount();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node32 = node31.removeChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        java.lang.String str36 = node31.checkTreeEquals(node34);
        boolean boolean37 = node31.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node31.getJSDocInfo();
        boolean boolean39 = node31.isDebugger();
        boolean boolean40 = node31.isTrue();
        com.google.javascript.rhino.Node node41 = node28.copyInformationFrom(node31);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = null;
        node31.setStaticSourceFile(staticSourceFile42);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int46 = node45.getChildCount();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node49 = node48.removeChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node52 = node51.removeChildren();
        java.lang.String str53 = node48.checkTreeEquals(node51);
        boolean boolean54 = node48.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node48.getJSDocInfo();
        boolean boolean56 = node48.isDebugger();
        boolean boolean57 = node48.isTrue();
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node48);
        node31.addChildrenToBack(node58);
        boolean boolean60 = node31.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node31.getJSDocInfo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable62 = node31.getAncestors();
        boolean boolean63 = node31.isVar();
        boolean boolean64 = node31.isNew();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile65 = node31.getStaticSourceFile();
        boolean boolean66 = node25.isEquivalentTo(node31);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertNotNull(ancestorIterable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(staticSourceFile65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        int int2 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        java.lang.String str6 = node1.checkTreeEquals(node4);
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        boolean boolean9 = node1.isDebugger();
        boolean boolean10 = node1.isTrue();
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int15 = node14.getChildCount();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = node20.removeChildren();
        java.lang.String str22 = node17.checkTreeEquals(node20);
        boolean boolean23 = node17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node17.getJSDocInfo();
        boolean boolean25 = node17.isDebugger();
        boolean boolean26 = node17.isTrue();
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node28 = node1.clonePropsFrom(node14);
        boolean boolean29 = node14.isRegExp();
        com.google.javascript.rhino.Node node30 = node14.getLastSibling();
        boolean boolean31 = node30.isDo();
        boolean boolean32 = node30.isWith();
        java.lang.Object obj34 = node30.getProp((int) (byte) -1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '#');
        boolean boolean2 = node1.isRegExp();
        com.google.javascript.rhino.Node node3 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node13 = node12.removeChildren();
        java.lang.String str14 = node9.checkTreeEquals(node12);
        boolean boolean15 = node9.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        boolean boolean17 = node9.isDebugger();
        boolean boolean18 = node9.isTrue();
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node23 = node6.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = null;
        node6.setJSDocInfo(jSDocInfo24);
        node6.detachChildren();
        int int27 = node6.getLength();
        boolean boolean28 = node6.isLabel();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(51, node6, 12, 38);
        boolean boolean32 = node31.isThrow();
        com.google.javascript.rhino.InputId inputId33 = node31.getInputId();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int36 = node35.getChildCount();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        java.lang.String str43 = node38.checkTreeEquals(node41);
        boolean boolean44 = node38.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node38.getJSDocInfo();
        boolean boolean46 = node38.isDebugger();
        boolean boolean47 = node38.isTrue();
        com.google.javascript.rhino.Node node48 = node35.copyInformationFrom(node38);
        boolean boolean49 = node38.isNE();
        node38.setSourceEncodedPosition((int) (short) -1);
        boolean boolean52 = node38.isThrow();
        java.util.Set<java.lang.String> strSet53 = node38.getDirectives();
        boolean boolean54 = node38.isDo();
        boolean boolean55 = node38.isVar();
        boolean boolean56 = node38.isOr();
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node38.setJSType(jSType57);
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildBefore(node31, node38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        boolean boolean6 = node1.isVar();
        boolean boolean7 = node1.isTrue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node4.setStaticSourceFile(staticSourceFile15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int19 = node18.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node22 = node21.removeChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        java.lang.String str26 = node21.checkTreeEquals(node24);
        boolean boolean27 = node21.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node21.getJSDocInfo();
        boolean boolean29 = node21.isDebugger();
        boolean boolean30 = node21.isTrue();
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node21);
        node4.addChildrenToBack(node31);
        boolean boolean33 = node4.isDo();
        boolean boolean34 = node4.isFunction();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int37 = node36.getChildCount();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node43 = node42.removeChildren();
        java.lang.String str44 = node39.checkTreeEquals(node42);
        boolean boolean45 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node39.getJSDocInfo();
        boolean boolean47 = node39.isDebugger();
        boolean boolean48 = node39.isTrue();
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node39);
        boolean boolean50 = node49.isComma();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean53 = node52.isGetProp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int56 = node55.getChildCount();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node59 = node58.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node62 = node61.removeChildren();
        java.lang.String str63 = node58.checkTreeEquals(node61);
        boolean boolean64 = node58.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node58.getJSDocInfo();
        boolean boolean66 = node58.isDebugger();
        boolean boolean67 = node58.isTrue();
        com.google.javascript.rhino.Node node68 = node55.copyInformationFrom(node58);
        node68.setSourceEncodedPositionForTree((int) (short) 0);
        int int72 = node68.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node73 = node52.useSourceInfoFromForTree(node68);
        boolean boolean74 = node73.isContinue();
        com.google.javascript.rhino.Node node75 = node49.srcref(node73);
        com.google.javascript.rhino.Node node76 = node4.useSourceInfoFrom(node49);
        node76.setVarArgs(true);
        com.google.javascript.rhino.Node node79 = node76.removeFirstChild();
        boolean boolean80 = node79.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 2, (int) (short) 100, 50);
        boolean boolean4 = node3.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(49, node1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isAssignAdd();
        java.lang.String str5 = node1.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node11 = node10.removeChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node14 = node13.removeChildren();
        java.lang.String str15 = node10.checkTreeEquals(node13);
        boolean boolean16 = node10.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        boolean boolean18 = node10.isDebugger();
        boolean boolean19 = node10.isTrue();
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node25 = node1.copyInformationFrom(node7);
        boolean boolean26 = node1.isIf();
        int int28 = node1.getIntProp(0);
        boolean boolean29 = node1.wasEmptyNode();
        boolean boolean31 = node1.getBooleanProp(36);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 40.0" + "'", str5, "NUMBER 40.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node12 = node11.removeChildren();
        java.lang.String str13 = node8.checkTreeEquals(node11);
        boolean boolean14 = node8.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node8.getJSDocInfo();
        boolean boolean16 = node8.isDebugger();
        boolean boolean17 = node8.isTrue();
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node8);
        double double19 = node8.getDouble();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        java.lang.String str29 = node24.checkTreeEquals(node27);
        boolean boolean30 = node24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node24.getJSDocInfo();
        boolean boolean32 = node24.isDebugger();
        boolean boolean33 = node24.isTrue();
        com.google.javascript.rhino.Node node34 = node21.copyInformationFrom(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        node24.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, node8, node24);
        boolean boolean38 = node8.isAdd();
        int int39 = node8.getSourcePosition();
        boolean boolean40 = node8.isRegExp();
        node8.setType((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = node8.getParent();
        boolean boolean44 = node43.isFromExterns();
        int int45 = node43.getLineno();
        boolean boolean46 = node43.isTrue();
        boolean boolean47 = node43.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 40.0d + "'", double19 == 40.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        boolean boolean16 = node5.isNE();
        node5.detachChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int20 = node19.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node26 = node25.removeChildren();
        java.lang.String str27 = node22.checkTreeEquals(node25);
        boolean boolean28 = node22.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node22.getJSDocInfo();
        boolean boolean30 = node22.isDebugger();
        boolean boolean31 = node22.isTrue();
        com.google.javascript.rhino.Node node32 = node19.copyInformationFrom(node22);
        double double33 = node22.getDouble();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node36 = node35.removeChildren();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        java.lang.String str40 = node35.checkTreeEquals(node38);
        java.util.Set<java.lang.String> strSet41 = node35.getDirectives();
        int int42 = node22.getIndexOfChild(node35);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(39, node5, node22);
        com.google.javascript.rhino.Node node44 = node22.cloneNode();
        boolean boolean45 = node44.isWith();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 40.0d + "'", double33 == 40.0d);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int3 = node2.getChildCount();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node6 = node5.removeChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node9 = node8.removeChildren();
        java.lang.String str10 = node5.checkTreeEquals(node8);
        boolean boolean11 = node5.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isDebugger();
        boolean boolean14 = node5.isTrue();
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node18 = node17.removeChildren();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node17);
        node19.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(40, node25, 100, 100);
        boolean boolean29 = node19.isEquivalentToTyped(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int32 = node31.getChildCount();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node35 = node34.removeChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node38 = node37.removeChildren();
        java.lang.String str39 = node34.checkTreeEquals(node37);
        boolean boolean40 = node34.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node34.getJSDocInfo();
        boolean boolean42 = node34.isDebugger();
        boolean boolean43 = node34.isTrue();
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node47 = node46.removeChildren();
        com.google.javascript.rhino.Node node48 = node31.useSourceInfoIfMissingFrom(node46);
        node48.putBooleanProp(31, true);
        boolean boolean52 = node48.isHook();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        java.lang.String str59 = node54.checkTreeEquals(node57);
        boolean boolean60 = node54.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node54.getJSDocInfo();
        boolean boolean62 = node54.isDebugger();
        boolean boolean63 = node54.isTrue();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int67 = node66.getChildCount();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node70 = node69.removeChildren();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node73 = node72.removeChildren();
        java.lang.String str74 = node69.checkTreeEquals(node72);
        boolean boolean75 = node69.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = node69.getJSDocInfo();
        boolean boolean77 = node69.isDebugger();
        boolean boolean78 = node69.isTrue();
        com.google.javascript.rhino.Node node79 = node66.copyInformationFrom(node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = null;
        node69.setJSDocInfo(jSDocInfo80);
        node54.putProp((int) (short) 0, (java.lang.Object) node69);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100, node19, node48, node54, 0, 15);
        boolean boolean86 = node19.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder87 = node19.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder87);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        boolean boolean3 = node1.isAssignAdd();
        boolean boolean4 = node1.isFor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        int int2 = node1.getChildCount();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node8 = node7.removeChildren();
        java.lang.String str9 = node4.checkTreeEquals(node7);
        boolean boolean10 = node4.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        boolean boolean12 = node4.isDebugger();
        boolean boolean13 = node4.isTrue();
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node4);
        boolean boolean15 = node4.isNE();
        node4.detachChildren();
        boolean boolean17 = node4.isTrue();
        int int18 = node4.getLineno();
        boolean boolean19 = node4.isReturn();
        node4.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }
}


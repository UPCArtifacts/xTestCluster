/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 06 01:03:29 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("O[*Aj?", "}{>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = StringUtils.abbreviate("_*%dxx/yokMsZEg", 6, 7);
      assertNotNull(string0);
      assertEquals(".../...", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.abbreviate("java.vm.vendor", 1345, 13);
      assertNotNull(string0);
      assertEquals("java.vm.ve...", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.abbreviate(" is less than 0: ", 17);
      assertNotNull(string0);
      assertEquals(" is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 4);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("E\u0000g29E\u0000g29");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.center(" is less than 0: ", 17, (String) null);
      assertNotNull(string0);
      assertEquals(" is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.center("O[*Aj?", 0, "a");
      assertNotNull(string0);
      assertEquals("O[*Aj?", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.center("HY`6qc~ Ug!z}a4!UB>", 19, 'C');
      assertNotNull(string0);
      assertEquals("HY`6qc~ Ug!z}a4!UB>", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.center(")9i@&r", 0, '*');
      assertNotNull(string0);
      assertEquals(")9i@&r", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.leftPad("km#t2%c]", 8, '1');
      assertNotNull(string0);
      assertEquals("km#t2%c]", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.rightPad("             arW", 16, "arW");
      assertNotNull(string0);
      assertEquals("             arW", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.rightPad("<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C <eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<", 122);
      assertNotNull(string0);
      assertEquals("<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C <eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<eKj/C<", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.chop("C&");
      assertNotNull(string0);
      assertEquals("C", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.overlay("The Array must not be null", "Irix", 0, 54);
      assertNotNull(string0);
      assertEquals("Irix", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.replaceChars("@o40oXy<kl1b/ ~t5^[", "@o40oXy<kl1b/ ~t5^[", "1!tQP;96!$:");
      assertNotNull(string0);
      assertEquals("1!tQ!;96!$:", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.replace(".", ".", "fzge", 111);
      assertNotNull(string0);
      assertEquals("fzge", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String[] stringArray1 = StringUtils.split("NoSuchFieldException occurred during 1.6 backcompat code", stringArray0[3], 757);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(6, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("nosuchfieldexceptio-,x1-=d17\u0006~ding 1.6 backcompat code", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("normalize", "&_nG", " >T$g(vH{\"-KZ. I");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.mid("", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.right("uring 1.6 backco", 16);
      assertNotNull(string0);
      assertEquals("uring 1.6 backco", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.left("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.left("_^[;frzr@`*sY(W]6", 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = StringUtils.substring(string0, 4, 4);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.substring("", (-206), 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "8";
      int int0 = StringUtils.lastIndexOfAny(" CD&vH^S{'tY", stringArray0);
      assertEquals(12, int0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "OS/2";
      int int0 = StringUtils.indexOfAny("OS/2", stringArray0);
      assertEquals(0, int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      boolean boolean0 = StringUtils.containsNone("cTSNN@x'dC~c!>", charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("org.apache.commons.lang3.SystemUtils", "v6G&9A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("java.io.tmpdir", "v");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String string0 = StringUtils.upperCase("", locale0);
      assertNotNull(string0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.upperCase("o[*}{>");
      assertNotNull(string0);
      assertEquals("O[*}{>", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.trim("hVfKjl=`i(vZg");
      assertNotNull(string0);
      assertEquals("hVfKjl=`i(vZg", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.substringBetween("TimeToLive of )", "", "v");
      assertNotNull(string0);
      assertEquals("TimeToLi", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, "1.1");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "SecurityException occurred during 1.6 backcompat code");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, "0<m4in");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.substringAfter("v", "");
      assertNotNull(string0);
      assertEquals("v", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.substring("46KL", 0, 13);
      assertNotNull(string0);
      assertEquals("46KL", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.substring("java.text.Normalizer$Form", 0);
      assertNotNull(string0);
      assertEquals("java.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.stripAccents("+jt#x:w};v.ar{2Fe");
      assertNotNull(string0);
      assertEquals("+jt#x:w};v.ar{2Fe", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, "v3*%?I2hP!u~@~RO");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("java.awt.fonts", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 122);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "use.naWe", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'Z');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '5');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null, 13);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "F", 509);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 9);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "java.version", (-1));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Search and Replace array lengths don't match: ", ">;W");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "R");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, "{F6CD@pc$6,", 3485);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("`5E_G", "`5E_G", 122);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, "XU");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-1049), "R]MX+f");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-2840), 'a');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 3026);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-779));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'K');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = StringUtils.reverse("I");
      assertNotNull(string0);
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, "", ", Length: ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", ';', '+');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, (String) null, "(4<+4[Y$'#C6+.X**a", 636);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, "", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = StringUtils.replace("", "%&.", ":");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = StringUtils.repeat("java.library.path", "java.library.path", 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, "[]");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = StringUtils.removeEnd((String) null, "Minimum abbreviation width is 4");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, "wR/48$^hP3<cG*");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'f');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("C");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = StringUtils.lowerCase("", locale0);
      assertNotNull(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1266), 'm');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 926);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-305));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("`HFGz}ogU{pUL>{t", "", 5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("~db\"ox'0", "~db\"ox'0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("h-%FF", "");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(" negative", ' ', 102);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("WK1XI=D$#j L bk", ' ', 956);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("`(unb{*j$)^6r,14", '`');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("TimeToLive of )", 'm');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "MzoQaVmu\"4I";
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("MzoQaVmu\"4I", string0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string0 = StringUtils.join((Iterable<?>) serviceLoader0, "i:hf>];`dJFR");
      assertNotNull(string0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("NoSuchFieldException occurred during 1.6 backcompat code", "NFD");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[3] = '/';
      int int0 = StringUtils.indexOfAnyBut("/zqN", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '/', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, int0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("F9?TszrO`;Ud\"q\"Axid", ">;JrmF`u+|qxu*py");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" jh");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny("ccurred during 1", stringArray0);
      assertEquals(7, int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      int int0 = StringUtils.indexOfAny("_5v|i0hCrXQ1u/-n1", charArray0);
      assertArrayEquals(new char[] {'_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("G;o@.Y}K Gbms)", "O6[mq[");
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = StringUtils.indexOf("java.vm.vendor", "", 17);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = StringUtils.indexOf("P#|O~&,Icx/kF A8", "F");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = StringUtils.indexOf("%;)(-fTG?g\r~bc+", 'G', (-1968));
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = StringUtils.indexOf("ng3.stringut", 'r');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("java.runtime.version", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("B", "B");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "E,5I0i");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 0, 34);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 2315);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.upperCase("O6[mq[", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = StringUtils.repeat("W", 6409);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.rightPad("", 6409);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("Minimum abbreviation width is 4", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 7 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.repeat("51)@/4B-+qRn", 2549);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.replaceChars(string0, "illegalargumentex|eptian occujava.awt.printerjobj)ompat code", "f+;]~URrg0I+slzFp");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Integer integer0 = new Integer(23);
      assertNotNull(integer0);
      assertEquals(23, (int)integer0);
      
      boolean boolean0 = arrayList0.add((Object) integer0);
      assertTrue(arrayList0.contains(23));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "AIllegalArgumentException occurred during 1.6 backcompat code");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.rightPad("&", 8172, "&");
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance("&", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.repeat("C<4~h", 4628);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.deleteWhitespace(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.repeat("-!D!|:^4]t:9jO", 4096);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      StringUtils.containsAny(string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("OE3G%++8C", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "HP-UX";
      stringArray0[1] = "HP-UX";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&_nG";
      stringArray0[1] = "Windows";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[3];
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("X=G'y>DnE&)sZ", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("UPx+<fX84DKqO", "UPx+<fX84DKqO");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("KZ-{jmObJFixNIQ", "O}r4M#f-t\"");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("ze;t\"-W\"'{,UgX7+M", "ze;t\"-W\"'{,UgX7+M");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.center("", (-3814), '%');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 1756, 'x');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.leftPad("The stripAccents(String) method is not supported until Java 1.6", 64, " ]");
      assertNotNull(string0);
      assertEquals(" The stripAccents(String) method is not supported until Java 1.6", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.leftPad(",5(0!", 2524, "O6[mq[");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8209, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.leftPad("java.library.path", 1594, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.leftPad("P-UJX", (-6212), "P-UJX");
      assertNotNull(string0);
      assertEquals("P-UJX", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.leftPad(" vs ", 220, 't');
      assertNotNull(string0);
      assertEquals("tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt vs ", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.rightPad("*j?z", 16, "ClassNotFoundException occurred during 1.6 backcompat code");
      assertNotNull(string0);
      assertEquals("*j?zClassNotFoun", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.replace("o*CC?,QFyW'.&=", "o*CC?,QFyW'.&=", "R", 64);
      assertNotNull(string0);
      assertEquals("R", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.replace("Cannot pad a negative amount: ", "Cannot pad a negative amount: ", "Cannot pad a negative amount: ", (-2377));
      assertNotNull(string0);
      assertEquals("Cannot pad a negative amount: ", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.replace("UEkPzfzid9:wV&)sZ:>", "D,9Bz9c[S;gZ", "Yby{|!P?V>", 509);
      assertNotNull(string0);
      assertEquals("UEkPzfzid9:wV&)sZ:>", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.replace("", (String) null, (String) null, (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.replace("N", "", "}", 57);
      assertNotNull(string0);
      assertEquals("N", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("is0+Y<");
      assertNotNull(string0);
      assertEquals("is0+Y<", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Integer integer0 = new Integer(64);
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      boolean boolean0 = arrayDeque0.add(integer0);
      assertTrue(arrayDeque0.contains(integer0));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayDeque0.add(integer0);
      assertTrue(arrayDeque0.contains(integer0));
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayDeque0.contains(integer0));
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string0);
      assertTrue(arrayDeque0.contains(integer0));
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals("6464", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((Object) ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
      assertTrue(arrayList0.contains(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayList0.contains(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      String string0 = StringUtils.join(iterator0, 'K');
      assertNotNull(string0);
      assertFalse(arrayList0.contains('K'));
      assertTrue(arrayList0.contains(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("NFD");
      assertTrue(priorityQueue0.contains("NFD"));
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = priorityQueue0.add("java.text.Normalizer$Form");
      assertTrue(priorityQueue0.contains("java.text.Normalizer$Form"));
      assertEquals(2, priorityQueue0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Iterator<String> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertTrue(priorityQueue0.contains("java.text.Normalizer$Form"));
      assertEquals(2, priorityQueue0.size());
      
      String string0 = StringUtils.join(iterator0, ';');
      assertNotNull(string0);
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains("java.text.Normalizer$Form"));
      assertEquals(2, priorityQueue0.size());
      assertEquals("NFD;java.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Integer integer0 = new Integer((-606));
      assertNotNull(integer0);
      assertEquals((-606), (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(stack0.contains(integer0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-606]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, 'h');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      String string0 = StringUtils.join(iterator0, 'K');
      assertNotNull(string0);
      assertFalse(stack0.contains('K'));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "B";
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "java.specification.vendor", 0, 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = StringUtils.join(objectArray0, (String) null, 3893, 95);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "D\"dnX\"E:i58bcnavXX");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '*', 0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("`5E_G", "`5E_G");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, 'B', 1, 4);
      assertNotNull(string0);
      assertEquals("BB", string0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, '\"', 115, 3);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBetween("z", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringBetween("-a{x}f[{tg]^>", "-a{x}f[{tg]^>", "java.text.NormalizerN8x}f[{tg]^>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "f\f%t,", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "_i", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringBetween("D\"dnX\"E:i58bcnavXX", (String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[4] = '!';
      boolean boolean0 = StringUtils.containsNone(";!lxn8u~ex@t+*r3!", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '!', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      boolean boolean0 = StringUtils.containsOnly("#", charArray0);
      assertArrayEquals(new char[] {'#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly("'fzgE", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsOnly("", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly(" ", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 2210, 'A');
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      int int0 = StringUtils.indexOfAnyBut(string0, charArray0);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 2210, 'A');
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      int int0 = StringUtils.indexOfAnyBut(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = '^';
      boolean boolean0 = StringUtils.containsAny("^c58X@jbU\"&2;f!", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '^', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[5] = 'g';
      int int0 = StringUtils.indexOfAny("@F-5>w: M)sDg=*h", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'g', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(12, int0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = StringUtils.indexOfAny("#0y>", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.stripEnd("ze;t\"-W\"'{,UgX7+M", (String) null);
      assertNotNull(string0);
      assertEquals("ze;t\"-W\"'{,UgX7+M", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.stripStart(" ", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.stripStart(" is less than 0: ", (String) null);
      assertNotNull(string0);
      assertEquals("is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.strip("", "1.3");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.strip("OE3G%++8C", "[Y2d>B|cWiF/=RJj4>l");
      assertNotNull(string0);
      assertEquals("OE3G%++8C", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Z", "Caught a SecurityException reading the system property '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("D", ">c-e\"6$L6@.!ylu", 8);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.startsWithAny("I-aA$i)\"Ri0f:'LO", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.startsWithAny("z", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "`ucp]v>fKu+K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("illegalaccessexception occurred the array must not be null", "normalize");
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("SecurityException occurred during 1.6 backcompat code", "");
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", ")");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("Bc[yjxr", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("The stripAccents(String) method is not supported util Java 1.6", "The stripAccents(String) method is not supported util Java 1.6");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((String) null, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'fzgE";
      stringArray0[1] = "'FZGe";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("'", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.util.pta<v}t\"m";
      stringArray0[1] = "java.util.pta<v}t\"m+hqencesfactory";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(19, int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The stripAccents(String) method is not supported until Java 1.6";
      stringArray0[1] = "The stripAccents(String) method is not supported until Java 1.6";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("The stripAccents(String) method is not supported until Java 1.6", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B", "B", 1414);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("java.text.Normalizer");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.difference("float", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("I*8^D{b@o'_g $", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String) null, "h[R'sc]}V?_=QM +@");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.difference("Minimum abbreviation width is 4", "LINUX");
      assertNotNull(string0);
      assertEquals("LINUX", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.difference("--z=A@_", (String) null);
      assertNotNull(string0);
      assertEquals("--z=A@_", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.abbreviate("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", 8, 16);
      assertNotNull(string0);
      assertEquals("...\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011...", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("{*.>w Y~", 62, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.abbreviate("sUv+Xx4r0d]V7tM@&nQ", 56, 13);
      assertNotNull(string0);
      assertEquals("...d]V7tM@&nQ", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", (-154), (-154));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 65, 65);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '5');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("P>Is>u_6Nb*", ' ');
      assertNotNull(string0);
      assertEquals("P>Is>u_6Nb*", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, "k");
      assertNotNull(string0);
      assertEquals("k", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String string0 = StringUtils.defaultString(stringArray0[15], stringArray0[15]);
      assertNull(string0);
      assertEquals(16, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.defaultString("B", "B");
      assertNotNull(string0);
      assertEquals("B", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.defaultString("{hkgZi@r");
      assertNotNull(string0);
      assertEquals("{hkgZi@r", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("{gme$flclt,'-ZP+u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("DD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("marks}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" is less than 0: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("8b!WJ\"wpmaZ9*8pG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("Y,7u4/$egd>YU'wE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("gEuE~|M[;o50*I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("I");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("TimeToLive of ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("The stripAccents(String) method is not supported until Java 1.6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("The stripAccents(String) method is not supported until Java 1.6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("java.specification.name");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(" vs ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("U~[x&_B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = StringUtils.countMatches("y ,[N}m/I8DhJ", "y ,[N}m/I8DhJ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = StringUtils.countMatches("illegalargumentex|eptian occurren{^kj<aic(^oqo0j)ompat code", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "O=:q|`5");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.swapCase("The character ");
      assertNotNull(string0);
      assertEquals("tHE CHARACTER ", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("java.vend");
      assertNotNull(string0);
      assertEquals("java.vend", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.capitalize("OS/");
      assertNotNull(string0);
      assertEquals("OS/", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String string0 = StringUtils.capitalize(stringArray0[15]);
      assertNull(string0);
      assertEquals(16, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      String string0 = StringUtils.lowerCase("[", locale0);
      assertNotNull(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.lowerCase("v");
      assertNotNull(string0);
      assertEquals("v", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null, (Locale) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string0 = StringUtils.upperCase("B", locale0);
      assertNotNull(string0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("B", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.upperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.center("java.runtime.name", 2, "java.runtime.name");
      assertNotNull(string0);
      assertEquals("java.runtime.name", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.center("", (-1297), "Minimum bbeviation width with offset is 7");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 20, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.center("6G*", 2, '(');
      assertNotNull(string0);
      assertEquals("6G*", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.center("", (-1178));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 3748);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int int0 = StringUtils.length((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int int0 = StringUtils.length("1.3");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.center("", 8, " vs ");
      assertNotNull(string0);
      assertEquals(" vs  vs ", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 122, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.leftPad("Linux", 8207, 'J');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 606, '~');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.rightPad("X@5VcqnYTAp>", 15, "nC");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.rightPad("MZWgNn+g1?'C3W#f", 48, (String) null);
      assertNotNull(string0);
      assertEquals("MZWgNn+g1?'C3W#f                                ", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 306, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, Integer.MAX_VALUE, '*');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.repeat(" vs ", (String) null, 46);
      assertNotNull(string0);
      assertEquals(" vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs ", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.repeat("BHhAGxae3P{yhJILEv", "BHhAGxae3P{yhJILEv", 3473);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "'y,?x3dp{x_y[5", 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.repeat(" z", 20);
      assertNotNull(string0);
      assertEquals(" z z z z z z z z z z z z z z z z z z z z", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.repeat("j9", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      // Undeclared exception!
      StringUtils.repeat("The stripAccents(String) method is not supported until Java 1.6", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.repeat("", 59);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.repeat("int", (-2147483631));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, Integer.MAX_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.chop("+jt#x:w};v.ar{2Fe;");
      assertNotNull(string0);
      assertEquals("+jt#x:w};v.ar{2Fe", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.chop("L");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.chomp("mJDc\" c(qK2 C4Ubt/", "=!hp-ux");
      assertNotNull(string0);
      assertEquals("mJDc\" c(qK2 C4Ubt/", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.chomp("_KenHD09B7_Jq?X$_!P", (String) null);
      assertNotNull(string0);
      assertEquals("_KenHD09B7_Jq?X$_!P", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.chomp("Y0p;", "Y0p;");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.chomp("z");
      assertNotNull(string0);
      assertEquals("z", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.chomp("#+)");
      assertNotNull(string0);
      assertEquals("#+)", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.overlay("o[*}{>", "I", 3239, 0);
      assertNotNull(string0);
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", (-1750), (-1750));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.overlay("", (String) null, 4684, 104);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "", 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.replaceChars("L1-", "'|'HvMy?GY", (String) null);
      assertNotNull(string0);
      assertEquals("L1-", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = StringUtils.replaceChars("L", (String) null, "BHhAGxae3P{yhJILEv");
      assertNotNull(string0);
      assertEquals("L", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.replaceChars(")", "The stripAccents(String) method is not supported until Java 1.6", ")");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "AIX", "AIX");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '5', '5');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.replaceChars("_^[;frzr@`*sY(W]6", '%', 'Z');
      assertNotNull(string0);
      assertEquals("_^[;frzr@`*sY(W]6", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(",>Q]X\nnZ[O<Qi^2", "PyZ99Vm[2?v");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceEach(",>Q]X\nnZ[O<Qi^2", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(",>Q]X\nnZ[O<Qi^2", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[4] = ";";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("(;d_!a", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: (;d_!a
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "java.at.headlclss";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("java.at.headlclss", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: java.at.headlclss
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = " ";
      stringArray0[2] = "j<aic(^oqo0j)ompat ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("j<aic(^oqo0j)ompat ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: j<aic(^oqo0j)ompat 
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("7jh");
      String string0 = StringUtils.replaceEachRepeatedly("^", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("^", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "HP-UX";
      String[] stringArray1 = new String[3];
      String string0 = StringUtils.replaceEachRepeatedly("HP-UX", stringArray0, stringArray1);
      assertEquals("HP-UX", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[4];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("6 backcompat c", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("HP-UX", stringArray0, stringArray1);
      assertEquals("HP-UX", string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("$0", stringArray0, stringArray0);
      assertEquals("$0", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("=Rq/FAlb,d5qEya", (String[]) null, (String[]) null);
      assertEquals("=Rq/FAlb,d5qEya", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Hh^I't", "Hh^I't", "Hh^I't");
      assertEquals("Hh^I't", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.replace("Sarch and eplace aruay lengths don't ach: ", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7", 0);
      assertEquals("Sarch and eplace aruay lengths don't ach: ", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = StringUtils.replace("9$X-c", "8]$K|", (String) null, 46);
      assertEquals("9$X-c", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = StringUtils.remove("cT{A=>}db", 'w');
      assertEquals("cT{A=>}db", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.remove("!Z7b|]I9\"", '\"');
      assertEquals("!Z7b|]I9", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = StringUtils.remove("", 'T');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.remove("R]M", (String) null);
      assertNotNull(string0);
      assertEquals("R]M", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = StringUtils.remove("'I(X[Z'8!", "'I(X[Z'8!");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(" vs ", "TimeToLive of ");
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("B ", "");
      assertEquals("B ", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("NJda=^}Ns)J*>G", "NJda=^}Ns)J*>G");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.removeEnd("HP-UX", "g<tw5pX,");
      assertEquals("HP-UX", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.removeEnd("5.0", "5.0");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.removeEnd("&", "");
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("normalize", "normalize");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Ne", (String) null);
      assertEquals("Ne", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.removeStart(" ", " ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.removeStart("]Rk \"/~E'gLgu@9'2/", "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.removeStart("b[b", "6gvna>-arb0wcej");
      assertEquals("b[b", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("h)X L?8C/");
      assertEquals("h)XL?8C/", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "int");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'H');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add((String) null);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(stack0);
      Object object0 = new Object();
      linkedHashSet0.add(object0);
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, (String) null);
      assertFalse(stack0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer(109);
      arrayDeque0.add(integer0);
      arrayDeque0.add(integer0);
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      String string0 = StringUtils.join(iterator0, "Z|Gf`GfYMMGNL9u0");
      assertEquals("109Z|Gf`GfYMMGNL9u0109", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, "InvocationTargetException occurred during 1.6 backcompat code");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "i");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Iterator<Integer> iterator0 = stack0.iterator();
      String string0 = StringUtils.join(iterator0, "xkmMU");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category0, locale_Category0);
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'P');
      assertNotNull(string0);
      assertEquals("DISPLAYPFORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '<');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, 't');
      assertFalse(priorityQueue0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, "{!Hh!q!sk]J54", (-668), (-668));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "ST", 2799, 2799);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("BHhAGxae3P{yhJILEv", "BHhAGxae3P{yhJILEv", 0);
      String string0 = StringUtils.join((Object[]) stringArray0, "5.0");
      assertEquals("5.0", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.join((Object[]) stringArray0, '6');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '.', Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 't');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ClassNotFoundException occurred during 1.6 backcompat code", "ClassNotFoundException occurred during 1.6 backcompat code", 32);
      assertEquals(32, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NoSuchFieldException occurred during 1.6 backcompat code", "NoSuchFieldException occurred during 1.6 backcompat code");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("java.vm.ta<v}t\"m+hqon.name", "-aa\"Yz85K6");
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ", " ");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The stripAccents(String) method is not supported until Java 1.6", ")", (-1));
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("The stripAccents(String) method is not supported until Java 1.6", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: The stripAccents(String) method is not supported until Java 1.6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("[", "[");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("ClassNotFoundException occurred during 1.6 backcompat code", (String) null, 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("9", "(<>H");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "S");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("int", 't');
      String string0 = StringUtils.replaceEachRepeatedly("9pZWoqg@(,aliz", stringArray0, (String[]) null);
      assertEquals("9pZWoqg@(,aliz", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("f8Bo]#AdN#6\"EZ+", 'f');
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("short", 't');
      boolean boolean0 = StringUtils.startsWithAny("short", stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", 'K');
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, '6');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("[I", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Strings must not be null", "Strings must not be null", "3D");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("3D", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "'I(*X[q'8y!", "{}");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "'I(X[Z'8!", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("3D", "3D", "3D");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Agv9{/k", "Eu&X%Tb ]F4|4N@");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" ", " ", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("InvocationTargetException occurred during 1.6 backcompat code", "I");
      assertEquals("nvocationTargetException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("q|/hb8-W", "q|/hb8-W");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("hVfKjl=`i(vZg", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Minimum abbreviation width is 4", "x/[iUE.d>`F,!vX^3[b");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("|,", "vKH2rM^");
      assertEquals("|,", string0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("j", (String) null);
      assertNotNull(string0);
      assertEquals("j", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("The stripAccents(String) method is not supported until Java 1.6", "The stripAccents(String) method is not supported until Java 1.6");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = StringUtils.substringAfter("java.'b2vx;tse_catin.name", "hp-u;");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = StringUtils.substringAfter("bK", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = StringUtils.substringBefore("ad", "0qRF~5w^zzK");
      assertEquals("ad", string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Strings must not be null", (String) null);
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = StringUtils.substringBefore("4*f-A18J\"cr%)da1]=x", "4*f-A18J\"cr%)da1]=x");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = StringUtils.mid("NoSuchFieldException occurred du", 2, 2);
      assertEquals("Su", string0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = StringUtils.mid("BHhAGxae3P{yhJILEv", 16, 16);
      assertEquals("Ev", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = StringUtils.mid("J@s3V3N4R>}|", (-1820), 256);
      assertEquals("J@s3V3N4R>}|", string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = StringUtils.mid("java.vm.info", (-1962), (-1962));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.mid(stringArray0[0], (-152), 2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = StringUtils.mid("d during 1.6 b", 54, 54);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = StringUtils.right("B", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = StringUtils.right("user.dir", 28);
      assertEquals("user.dir", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 122);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = StringUtils.right("E5&|;gf$;%QJ", (-314));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = StringUtils.center("O6[mq[", 2524, '>');
      String string1 = StringUtils.left(string0, 'K');
      assertEquals(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = StringUtils.left("TimeToLive of ", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = StringUtils.left("Cannot rad a negative amount: ", Integer.MAX_VALUE);
      assertEquals("Cannot rad a negative amount: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 2, 2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String string0 = StringUtils.substring("B8lSDv@8!", 57, 57);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 13);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = StringUtils.substring("EyoPV%}.&;7Xy1O|", 1423);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "69w,v";
      stringArray0[1] = "69w,v";
      int int0 = StringUtils.lastIndexOfAny("69w,v", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.lastIndexOfAny("NoSuchFieldExcption occurred durig 1.6 backcompt code", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("FI4f1/#:?K", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The stripAccents(String) method is not supported until Java 1.6");
      int int0 = StringUtils.indexOfAny("The stripAccents(String) method is not supported until Java 1.6", stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("Sx", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("j9");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("4$ ", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("k$Tv; .t", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("strings m, ' not be null", "strings m, ' not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, "java.runtime.version");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("|{h'ny\"+", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("org.apache.commons.lang3.ObjectUtils$Null", "s3fS?8P'8Vu~");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("#K/b`nWP", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("NFD", "NFD");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((String) null, ":-\"s)&dqU>zAfEx");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("6gvna>-arb0wcej", "L3s1XIl%gTH[!Y;KkJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut(")Mz-^_G:", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAnyBut((String) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("W=IR_DniT@:f&_{", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny("org.apache.commons.lang3.ObjectUtils$Null", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny("1O=:q|`5", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("org.apache.commons.lang3.ObjectUtils$Null", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny("", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny(", length: ", ", length: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((String) null, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("#", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny("KZ-{jmObJFixNIQ", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("!Z7b|]I9\"", "!Z7b|]I9\"");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((String) null, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("l", "l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("`_AlVl;V+ |", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Search and Replace arrayolennths don't maAch: ", "f8Bo]9!IGht6fKAp]()");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "!vtvv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("g_R", ",hkz67ky1<JM<e1=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("java.text.Normalizer$Form", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("rred dNring .6 backcompat", "rred dNring .6 backcompat");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Windows", '`');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, '`');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Strings must not be null", 't');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("1.3", (String) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("p", "p", 3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "ZI", 91);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "HP-UX");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 'S', 78);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", ' ');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "", (-167));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      int int0 = StringUtils.indexOf("java.text.Norm", (String) null, 763);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      int int0 = StringUtils.indexOf("...", "...", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "", 64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" vs \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", "\"", 7);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 492);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("rrayolennths don't ", "rrayolennths don't ", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("8!I:!4\"%u.83+b", (String) null, 2336);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("The stripAccents(String) method is not supported until Java 1.6", "The stripAccents(String) method is not supported until Java 1.6", 3610);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, "", 492);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      int int0 = StringUtils.indexOf("NoSuchMethodException occurred during 1.6 backcompat code", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      int int0 = StringUtils.indexOf("ozLqpyT)#6e1t?/+", "ozLqpyT)#6e1t?/+");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "o");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'R', (-2072));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'g');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      int int0 = StringUtils.indexOf("EOTJQ&7LeMz", 'E');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "#l)#)&ygL0*cb!OART");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("o", "o");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, ":Ye-._j4I'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      boolean boolean0 = StringUtils.equals("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "is0+Y<");
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      String string0 = StringUtils.stripEnd("i&0+Y<", "i&0+Y<");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      String string0 = StringUtils.stripEnd("IllegalAccessException occurred during 1.6 backcompat code", "j9");
      assertEquals("IllegalAccessException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      String string0 = StringUtils.stripEnd("#kP", "");
      assertEquals("#kP", string0);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      String string0 = StringUtils.stripStart("e", "=Tvf");
      assertEquals("e", string0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String string0 = StringUtils.stripStart("M vs ", "");
      assertEquals("M vs ", string0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      String string0 = StringUtils.stripStart("Wa5P8N", "Wa5P8N");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "float");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "I");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("B\"uXzr$(u6AgT#S5rE");
      assertEquals("B\"uXzr$(u6AgT#S5rE", string0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String string0 = StringUtils.stripToNull("DD");
      assertEquals("DD", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("75V:");
      assertEquals("75V:", string0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Sarch and eplace aruay lengths don't ach: ");
      assertEquals("Sarch and eplace aruay lengths don't ach:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String string0 = StringUtils.trim("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("IllealArgumentException occurred uring 1.6 backcompat cod@");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("The stripAccents(String) method is not supported until Java 1.6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("java.class.path");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "<");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      String string0 = StringUtils.replace("Sach and eplace aruay lengths don't ach: ", "Sach and eplace aruay lengths don't ach: ", "Sach and eplace aruay lengths don't ach: ");
      assertEquals("Sach and eplace aruay lengths don't ach: ", string0);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("0t_)XoG/vpryr@*2& ^", "rP&yzv{");
      assertEquals("0t_)XoG/vpryr@*2& ^", string0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("'fzgE", "z");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      String string0 = StringUtils.strip(" ov ");
      assertEquals("ov", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      String string0 = StringUtils.leftPad("4*f-A18J\"cr%)da1]=x", (-1153));
      assertEquals("4*f-A18J\"cr%)da1]=x", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "file.encoding", "file.encoding");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("LRu:Z3qxPFk");
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      String string0 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      String string0 = StringUtils.center("S{e9O", 1231);
      boolean boolean0 = StringUtils.isEmpty(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("M*v", "M*v", (-708902085));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ", (String) null);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      String string0 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "N<ufgp[S&1]!mSi\"@\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("|{h'ny\"6");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Minimum abbreviation width is 4");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("BHhAGxae3P{yhJILEv", "BHhAGxae3P{yhJILEv", 0);
      String string0 = StringUtils.join((Object[]) stringArray0, '6');
      assertNotNull(string0);
      assertEquals("6", string0);
  }
}

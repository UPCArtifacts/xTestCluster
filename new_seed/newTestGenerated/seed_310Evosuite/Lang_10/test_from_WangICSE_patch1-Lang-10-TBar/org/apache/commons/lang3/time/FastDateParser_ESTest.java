/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 06 00:30:24 GMT 2023
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(125, ")9ga7;XPq>}l[NH");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(")9ga7;XPq>}l[NH", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(6);
      Object object0 = fastDateParser0.parseObject("GMTEAT", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6(p/19mNJC_5Zf");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("6(p/19mNJC_5Zf", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("6(p/19mNJC_5Zf", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "h8{@\"h@5#o7QI+P'sx!");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("h8{@\"h@5#o7QI+P'sx!", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2428), "::%A<n");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("::%A<n", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals((-2428), timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2428), "::%A<n");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("6S8:jjeNpz:3,(", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2428));
      assertEquals((-428), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("G", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-5480));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("G", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("d!<kt5hd");
      FastDateParser fastDateParser0 = new FastDateParser("d!<kt5hd", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3249);
      // Undeclared exception!
      try { 
        fastDateParser0.parse(",", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("y&gf{6E{c{S1az?V0L(");
      FastDateParser fastDateParser0 = new FastDateParser("y&gf{6E{c{S1az?V0L(", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("y&gf{6E{c{S1az?V0L(", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("&>[`M{wc~7m6;+");
      FastDateParser fastDateParser0 = new FastDateParser("&>[`M{wc~7m6;+", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9[F&`mV9U");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("9[F&`mV9U", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "&>[`M{wc~7m6;+");
      String string0 = "Zp`?\\";
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("Zp`?", simpleTimeZone0, locale0);
      fastDateParser0.isNextNumber();
      ParsePosition parsePosition0 = new ParsePosition(1258);
      Integer integer0 = new Integer((-568));
      Locale locale1 = Locale.FRANCE;
      Locale locale2 = Locale.TAIWAN;
      FastDateParser fastDateParser1 = new FastDateParser("Zp`?", simpleTimeZone0, locale1);
      try { 
        fastDateParser1.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Zp`?\\\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMST|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZST|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRST|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HADT|HAST|Heure d'Afghanistan|Heure d'Afrique centrale|Heure d'Afrique de l'Est|Heure d'Afrique de l'Ouest|Heure d'Alma-Ata|Heure d'Anadyr|Heure d'Aqtau|Heure d'Aqtobe|Heure D'Argentine|Heure d'Arm\u00E9nie|Heure d'Azerba\u00EFdjan|Heure d'Europe centrale|Heure d'Europe de l'Est|Heure d'Europe de l'Ouest|Heure d'Indochine|Heure d'Indon\u00E9sie centrale|Heure d'Indon\u00E9sie orientale|Heure d'Irkutsk|Heure d'Omsk|Heure d'Oral|Heure d'Ust-Nera|Heure de Bolivie|Heure de Cap-Vert|Heure de Choibalsan|Heure de Chuuk|Heure de Colombie|Heure de Davis|Heure de Dumont-d'Urville|Heure de Fernando de Noronha|Heure de Fidji|Heure de Gambi|Heure de Greenwich|Heure de Guyana|Heure de Guyane fran\u00E7aise|Heure de G\u00E9orgie|Heure de Hong Kong|Heure de Hovd|Heure de Khandyga|Heure de Kiribati|Heure de Krasno\u00EFarsk|Heure de Kusaie|Heure de Kyzylorda|Heure de l'Acre|Heure de l'Europe centrale|Heure de l'Ile de P\u00E2ques|Heure de l'Ile Macquarie|Heure de l'Indon\u00E9sie occidentale|Heure de l'oc\u00E9an Indien|Heure de l'Ouzb\u00E9kistan|Heure de l'Ulaanbaatar|Heure de l'Uruguay|Heure de l'\u00C9quateur|Heure de l'\u00CEle Christmas|Heure de l'\u00CEle de Line|Heure de l'\u00CEle de Phoenix|Heure de la R\u00E9union|Heure de Magadan|Heure de Malaisie|Heure de Maurice|Heure de Mawson|Heure de Myanmar|Heure de Nauru|Heure de Niue|Heure de Norfolk|Heure de Nouvelle-Cal\u00E9donie|Heure de Novossibirsk|Heure de Palaos|Heure de Papouasie-Nouvelle-Guin\u00E9e|Heure de Petropavlovsk-Kamchatski|Heure de Pohnpei|Heure de Rothera|Heure de Sakhalin|Heure de Singapour|Heure de Syowa|Heure de Tahiti|Heure de Timor-Leste|Heure de Tokelau|Heure de Tonga|Heure de Tuvalu|Heure de Vladivostok|Heure de Vostok|Heure de Wake|Heure de Wallis et Futuna|Heure de Yekaterinburg|Heure des A\u00E7ores|Heure des Galapagos|Heure des Iles Marshall|Heure des Maldives|Heure des Marquises|Heure des Philippines|Heure des Samoas occidentales|Heure des Seychelles|Heure des Terres australes antartiques fran\u00E7aises|Heure des \u00CEles Cocos|Heure des \u00CEles Cook|Heure des \u00EEles Falkland|Heure des \u00CEles Salomon|Heure du Bangladesh|Heure du Bhoutan|Heure du Brunei|Heure du Br\u00E9sil|Heure du Chili|Heure du Ghana|Heure du Groenland de l'Est|Heure du Groenland de l'Ouest|Heure du Iakoutsk|Heure du Kirghizistan|Heure du m\u00E9ridien de Greenwich|Heure du N\u00E9pal|Heure du Pakistan|Heure du Paraguay|Heure du P\u00E9rou|Heure du Surinam|Heure du Tadjikistan|Heure du Turkm\u00E9nistan|Heure du Vanuatu|Heure du Venezuela|Heure normale d'Afrique du Sud|Heure normale d'Alaska|Heure normale d'Amazonie|Heure normale d'Arabie|Heure normale d'Hawa\u00EF|Heure normale d'Hawa\u00EF-Al\u00E9outiennes|Heure normale d'Inde|Heure normale d'Iran|Heure normale de Chine|Heure normale de Cor\u00E9e|Heure normale de G\u00E9orgie du Sud|Heure normale de l'Atlantique|Heure normale de l'Est|Heure normale de l'Est \\(Nouvelle-Galles du Sud\\)|Heure normale de l'Ouest \\(Australie\\)|Heure normale de Nouvelle-Z\u00E9lande|Heure normale de Saint-Pierre et Miquelon|Heure normale de Samara|Heure normale de Terre-Neuve|Heure normale des Rocheuses|Heure normale des \u00EEles Mariannes|Heure normale du Centre|Heure normale du Golfe|Heure normale du Japon|Heure normale du Pacifique|Heure standard d'Australie centrale \\(Australie du sud\\)|Heure standard d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure standard d'Australie centrale \\(Territoire du Nord\\)|Heure standard d'Australie orientale \\(Queensland\\)|Heure standard d'Australie orientale \\(Tasmanie\\)|Heure standard d'Australie orientale \\(Victoria\\)|Heure standard d'Isra\u00EBl|Heure standard de Chatham|Heure standard de Cuba|Heure standard de l'Australie occidentale \\(centre\\)|Heure standard de Lord Howe|Heure standard de Moscou|Heure standard de Samoa|Heure standard des Pitcairn|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|PHOT|PHT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|TAHT|Temps universel coordonn\u00E9|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYST|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAST|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2428), "::%A<n");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("^De(lF", simpleTimeZone0, locale0);
      assertEquals("^De(lF", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1474, "&>[`M{wc~7m6;+");
      Locale locale0 = Locale.KOREA;
      ParsePosition parsePosition0 = new ParsePosition(5);
      FastDateParser fastDateParser0 = new FastDateParser(";<|k]P|5nv#nbvyb!k", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("&>[`M{wc~7m6;+", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9F&`mVU");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("9F&`mVU", timeZone0, locale0);
      try { 
        fastDateParser0.parse("9F&`mVU");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"9F&`mVU\" does not match 9(\\p{IsNd}++)&`(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("ZxNd&Y=*GlRDp\"vt");
      FastDateParser fastDateParser0 = new FastDateParser("ZxNd&Y=*GlRDp\"vt", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTCST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("_WKt`9bg>:dg");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("_WKt`9bg>:dg", timeZone0, locale0);
      assertEquals("_WKt`9bg>:dg", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(14, "G]sN$}++)");
      FastDateParser fastDateParser0 = new FastDateParser("G]sN$}++)", simpleTimeZone0, locale0);
      assertEquals("G]sN$}++)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(36, "");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("?$IqcGt.$|(iu&Osa", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9h>*`H`mV9U");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("9h>*`H`mV9U", timeZone0, locale0);
      assertEquals("9h>*`H`mV9U", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("l#eT");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("=X6ym8 #", timeZone0, locale0);
      assertEquals("=X6ym8 #", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9[F&`mV9U");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("<)n*0,)@i]c(lq*", timeZone0, locale0);
      assertEquals("<)n*0,)@i]c(lq*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("7^uhSf^+4~", timeZone0, locale0);
      assertEquals("7^uhSf^+4~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(p{IsNd}++)");
      FastDateParser fastDateParser0 = new FastDateParser("k3.!SM", simpleTimeZone0, locale0);
      assertEquals("k3.!SM", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTAGT");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("2X", timeZone0, locale0);
      assertEquals("2X", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9[F&`mV9U");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("M9&z0Knq6", timeZone0, locale0);
      assertEquals("M9&z0Knq6", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("/Qh");
      FastDateParser fastDateParser0 = new FastDateParser("/Qh", timeZone0, locale0);
      assertEquals("/Qh", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("y&gf{6E{c{S1az?V0L(");
      FastDateParser fastDateParser0 = new FastDateParser("{@&K._h-5v{ )6&X0", timeZone0, locale0);
      assertEquals("{@&K._h-5v{ )6&X0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("*Ut8@@U=W`Kr");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("*Ut8@@U=W`Kr", timeZone0, locale0);
      assertEquals("*Ut8@@U=W`Kr", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(nOs;O");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("(nOs;O", timeZone0, locale0);
      assertEquals("(nOs;O", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("5y1", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-1));
      assertEquals(1999, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1474, "&>[`M{wc~7m6;+");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("&>[`M{wc~7m6;+", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1474);
      assertEquals(3374, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("}+5");
      FastDateParser fastDateParser0 = new FastDateParser("}+5", timeZone0, locale0);
      assertEquals("}+5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(p{IsNd}++)");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(36, "&");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("45?b\fihpr@%I|I", simpleTimeZone0, locale0);
      assertEquals("45?b\fihpr@%I|I", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("&>[`M{wc~7m6;+");
      FastDateParser fastDateParser0 = new FastDateParser("&>[`M{wc~7m6;+", timeZone0, locale0);
      try { 
        fastDateParser0.parse("&>[`M{wc~7m6;+");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"&>[`M{wc~7m6;+\" does not match &>\\[`(\\p{IsNd}++)\\{(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-22), "GMT");
      Locale locale1 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("ECT", simpleTimeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("ECT", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(51, "{KS$g0_s$.%i+AM");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("{KS$g0_s$.%i+AM", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("WQ :oC?5OlGn?aM", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("DDnEhyu}|");
      FastDateParser fastDateParser0 = new FastDateParser("DDnEhyu}|", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-22), "Wi");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("Wi", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("JST");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("JST", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9h[F&(`mV9U");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("9h[F&(`mV9U", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("9(\\p{IsNd}++)\\[(\\p{IsNd}++)&\\(`(\\p{IsNd}++)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("d!<kt5hd");
      FastDateParser fastDateParser0 = new FastDateParser("d!<kt5hd", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9[F&`mV9U");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("9[F&`mV9U", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("9[F&`mV9U", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(94, "5*");
      FastDateParser fastDateParser0 = new FastDateParser("5*", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("5*", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9h[F&(`mV9U");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("9h[F&(`mV9U", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[9h[F&(`mV9U,de,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(36, "&");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("&", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Fe7]J]qvBy6.C<@a");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("Fe7]J]qvBy6.C<@a", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("A4-", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("wzDdEJV");
      FastDateParser fastDateParser0 = new FastDateParser("wzDdEJV", timeZone0, locale0);
      assertEquals("wzDdEJV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("ZxNd&Y=*GlRDp\"vt");
      FastDateParser fastDateParser0 = new FastDateParser("ZxNd&Y=*GlRDp\"vt", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("BST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }
}

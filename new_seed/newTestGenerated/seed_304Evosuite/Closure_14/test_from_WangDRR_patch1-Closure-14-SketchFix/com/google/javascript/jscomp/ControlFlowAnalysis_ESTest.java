/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 04 05:14:02 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.InferJSDocInfo;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ControlFlowAnalysis_ESTest extends ControlFlowAnalysis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(108, 108, (-479));
      Node node1 = new Node(108, node0, node0, node0, node0, 45, 2309);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(105);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node1 = new Node(105);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(111, 115, (-2458));
      Compiler compiler0 = new Compiler();
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "}v;ry", "))");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit((NodeTraversal) null, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(115);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node((-552), node0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(";L");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(50);
      Node node1 = new Node(119);
      Compiler compiler0 = new Compiler();
      node1.addChildToBack(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node1, node1);
      assertFalse(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(115);
      Compiler compiler0 = new Compiler();
      node0.addChildToBack(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(120);
      Compiler compiler0 = new Compiler((PrintStream) null);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      assertFalse(node0.isInc());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(3823);
      Node node1 = ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(49);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      Node node1 = ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(122);
      Node node1 = Node.newString("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph", 36, 48);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      Node node2 = new Node(48, node1, node0, 52, 23);
      Node node3 = ControlFlowAnalysis.computeFollowNode(node1, controlFlowAnalysis0);
      assertFalse(node3.equals((Object)node2));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      Node node1 = new Node(4);
      Node node2 = new Node(4);
      Node node3 = new Node(1170, node2, node2, node1, node0, 41, 115);
      Node node4 = ControlFlowAnalysis.computeFollowNode(node2);
      assertFalse(node4.isName());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(122);
      Node node1 = new Node((-112), 1519, 38);
      Node node2 = new Node(43, node0, node1, node0, node0, 31, (-780));
      Node node3 = ControlFlowAnalysis.computeFollowNode(node1);
      assertFalse(node3.isContinue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(122);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(108, 108, (-479));
      node0.putIntProp(30, 143);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(118);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString("_HELP");
      Node node1 = new Node(77, node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node2.isFunction());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(110);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertEquals(41, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(4);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(39, (-646), 30);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString("Ar\"$@;f!]((", (-2025), 113);
      Node node1 = new Node(30, node0, node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node2.isFalse());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newNumber((double) 902);
      Node node1 = new Node(52, node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node2.isLabelName());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      Node node1 = new Node(98, node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node2.isDelProp());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString("_HELP");
      Node node1 = new Node(105, node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node2.isName());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node1.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(31);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(117);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node1.isLabelName());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      Node node1 = new Node(37, node0, node0, node0, node0, 4095, 41);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node1.isFor());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(88, "");
      Node node1 = new Node(4787);
      Node node2 = new Node(1, node0, node1);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node2);
      assertSame(node3, node2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(0, node0, node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node2.isFunction());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node((-1062));
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node1.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(46, nodeArray0);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node1.isDelProp());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("S(YO?2'2", "");
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node1.isSwitch());
  }

//   @Test(timeout = 4000)
//   public void test040()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       Node node0 = new Node(113);
//       Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
//       Node node2 = new Node(2, node1);
//       node1.addChildToBack(node2);
//       ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
//       // Undeclared exception!
//       try { 
//         controlFlowAnalysis0.process(node0, node1);
//         fail("Expecting exception: IllegalStateException");
//       
//       } catch(IllegalStateException e) {
//          //
//          // 2
//          //
//          verifyException("com.google.javascript.rhino.Token", e);
//       }
//   }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.mayThrowException((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isContinueStructure((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakStructure((Node) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(108, 108, (-479));
      node0.addChildToFront(node0);
      // Undeclared exception!
      ControlFlowAnalysis.getExceptionHandler(node0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getCatchHandlerForBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode((Node) null, (ControlFlowAnalysis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ControlFlowAnalysis");
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(103, (-1536), 3);
      Node node1 = new Node(15, node0);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      Node node1 = new Node(108, node0, node0, node0, node0, 45, 15);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString("_HELP");
      Node node1 = new Node(49, node0);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString((-2197), "C<@J[Zrx6idxw{]bT");
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, "C<@J[Zrx6idxw{]bT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "9", "9");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(108, 108, (-479));
      MockPrintStream mockPrintStream0 = new MockPrintStream("G^/xS(V_/n4;wG");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(49);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
      assertEquals(52, Node.LENGTH);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("_HELP");
      Node node1 = new Node(110, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(50);
      Node node1 = new Node(4);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("_HELP");
      Node node1 = new Node(77, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(129);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Node node1 = new Node(130, 44, 49);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(108, 108, (-479));
      Node node1 = Node.newString("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph", 37, 2);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Node node1 = new Node(49, (-1), 119);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(23, 117, 90);
      Node node1 = new Node(110, node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      controlFlowAnalysis0.process(node1, node0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, syntacticScopeCreator0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(112);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(113);
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      Node node1 = Node.newNumber(4809.767060490469, 38, 39);
      controlFlowAnalysis0.process(node0, node1);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("_HELP");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Node node1 = new Node(4, 1805, 2471);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("_HELP");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process((Node) null, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, (Node) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(23, 117, 90);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      controlFlowAnalysis0.process(node0, node0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, syntacticScopeCreator0);
      Node node1 = new Node(105, 39, 43);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("_HELP");
      Node node1 = new Node(77, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(125, node0, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      Node node1 = ControlFlowAnalysis.getExceptionHandler(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "9", "9");
      Node node1 = ControlFlowAnalysis.getExceptionHandler(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(115);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(114);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(113);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, "**iy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(115);
      boolean boolean0 = ControlFlowAnalysis.isBreakStructure(node0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(114);
      boolean boolean0 = ControlFlowAnalysis.isBreakStructure(node0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString("_HELP");
      Node node1 = new Node(110, node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(77);
      boolean boolean0 = ControlFlowAnalysis.isBreakStructure(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(103, (-1536), (-1536));
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(102, 16, 36);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString(88, "");
      Node node1 = new Node(86, node0, node0, node0, node0, 1270, 47);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newNumber((double) 902);
      Node node1 = new Node(52, node0);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(37, node0, node0, node0, node0, 4095, 41);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(50);
      node0.setType(35);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(122);
      Node node1 = new Node(30, node0, node0, node0, node0, 45, 53);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(113);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(108, 108, (-479));
      Node node1 = new Node(108, node0, node0, node0, node0, 45, 29);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(126, 126, (-479));
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFallThrough(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node((-329));
      Node node1 = new Node(115);
      Node node2 = new Node(1, node0, node0, node1, node1, 2164, 2);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(113, nodeArray0);
      node0.addChildToBack(node0);
      Node node1 = ControlFlowAnalysis.computeFollowNode(node0);
      assertFalse(node1.isAssignAdd());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = new Node(150);
      node0.addChildToBack(node1);
      Node node2 = ControlFlowAnalysis.computeFollowNode(node1);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(108, 108, (-479));
      Node node1 = new Node(108, node0, node0, node0, node0, 45, 29);
      Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(117);
      Node node1 = new Node(124, node0, node0, node0, node0, 54, 29);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot find continue target.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(108, 108, (-479));
      Node node1 = new Node(117, node0, node0, node0, node0, 43, 46);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // IF is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(116);
      Compiler compiler0 = new Compiler();
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "9", "9");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // Cannot find break target.
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(37, node0, node0, node0, node0, 4095, 41);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(116);
      Compiler compiler0 = new Compiler();
      node0.addChildToFront(node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BREAK is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "9", "9");
      Node node1 = new Node(83, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node1);
      assertEquals(1, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(125, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node1, node0);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Node node1 = new Node(126, 12, 31);
      controlFlowAnalysis0.visit(nodeTraversal0, node1, node0);
      assertFalse(node1.isDefaultCase());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(125);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(112);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Node node1 = new Node(115, 57, 2595);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Node node1 = new Node(126, 12, 31);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(31);
      Node node1 = new Node(119);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(50, 117, 50);
      Node node1 = new Node(118, node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      controlFlowAnalysis0.process(node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      Node node1 = new Node(4);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      controlFlowAnalysis0.process(node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(116);
      Compiler compiler0 = new Compiler();
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "9", "9");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      controlFlowAnalysis0.process(node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(115);
      Compiler compiler0 = new Compiler();
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "every", "6#w");
      node0.addChildToBack(node1);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(112);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      Node node1 = new Node(114, 57, 2595);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString("_HELP");
      Node node1 = new Node(113, node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node(50);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      controlFlowAnalysis0.process(node0, node0);
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, syntacticScopeCreator0);
      Node node1 = new Node(111, 42, 31);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("_HELP");
      Node node1 = new Node(110, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node1);
      assertFalse(node0.isScript());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(108, 108, (-479));
      Node node1 = new Node(108, node0, node0, node0, node0, 45, 2309);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("_HppP");
      Node node1 = new Node(105, node0);
      Node node2 = Node.newNumber(969.949684, 16, 903);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node2, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("_HELP");
      Node node1 = new Node(49, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      controlFlowAnalysis0.process(node1, node1);
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(129);
      Node node1 = new Node(4, node0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node1, node1);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(50, 117, 50);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, syntacticScopeCreator0);
      Node node1 = new Node(105, 39, 43);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("_HELP");
      Node node1 = new Node(105, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(120);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(114);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowGraph<Node> controlFlowGraph0 = controlFlowAnalysis0.getCfg();
      assertNull(controlFlowGraph0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(113);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(112);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("_HELP");
      Node node1 = new Node(77, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(118);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node(119);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }
}

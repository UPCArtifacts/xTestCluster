/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 02 05:11:26 GMT 2023
 */

package org.apache.commons.math.optimization.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
import org.apache.commons.math.analysis.MultivariateMatrixFunction;
import org.apache.commons.math.optimization.ConvergenceChecker;
import org.apache.commons.math.optimization.VectorialPointValuePair;
import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LevenbergMarquardtOptimizer_ESTest extends LevenbergMarquardtOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-1455.8167611244626), (-1455.8167611244626), (-1455.8167611244626), (-1455.8167611244626), (-1455.8167611244626));
      double[] doubleArray0 = new double[3];
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[3][5];
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      double[] doubleArray2 = new double[1];
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(140, differentiableMultivariateVectorialFunction0, levenbergMarquardtOptimizer0.objective, levenbergMarquardtOptimizer0.objective, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-1454.3902530668292), (-1454.3902530668292), (-1454.3902530668292), (-1454.3902530668292), (-1454.3902530668292));
      double[] doubleArray0 = new double[1];
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[1][5];
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) levenbergMarquardtOptimizer0.objective).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new LevenbergMarquardtOptimizer(Double.NaN, 102, (-1454.3902530668292), (-1454.3902530668292), 102);
      double[] doubleArray2 = new double[3];
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer1.optimize(3379, differentiableMultivariateVectorialFunction0, levenbergMarquardtOptimizer0.objective, doubleArray0, doubleArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // orthogonality tolerance is too small (CONVERGENCE_FAILED), solution is orthogonal to the jacobian
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // evaluations
         //
         verifyException("org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[1];
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[1][5];
      double[] doubleArray2 = new double[0];
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) doubleArray0, (Object) doubleArray2).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      levenbergMarquardtOptimizer0.optimize(140, differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // dimensions mismatch: 0 != 1
         //
         verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      levenbergMarquardtOptimizer0.rows = (-1860);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-1455.8167611244626), (-1455.8167611244626), (-1455.8167611244626), (-1455.8167611244626), (-1455.8167611244626));
      double[] doubleArray0 = new double[3];
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[3][5];
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn(levenbergMarquardtOptimizer0.objective).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(140, differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, levenbergMarquardtOptimizer0.objective);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unable to perform Q.R decomposition on the CONVERGENCE_FAILEDx3 jacobian matrix
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-1440.2978262577142), (-1440.2978262577142), (-1440.2978262577142), (-1440.2978262577142), (-1440.2978262577142));
      double[] doubleArray0 = new double[1];
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[1][5];
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) levenbergMarquardtOptimizer0.objective).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      double[] doubleArray2 = new double[0];
      VectorialPointValuePair vectorialPointValuePair0 = levenbergMarquardtOptimizer0.optimize(30, differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray2);
      assertNotNull(vectorialPointValuePair0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-1455.8167611244626), (-1455.8167611244626), (-1455.8167611244626), (-1455.8167611244626), (-1455.8167611244626));
      double[] doubleArray0 = new double[3];
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[3][5];
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) levenbergMarquardtOptimizer0.objective).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new LevenbergMarquardtOptimizer(Double.NaN, 140, (-1455.8167611244626), (-1455.8167611244626), 140);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer1.optimize(140, differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, levenbergMarquardtOptimizer0.objective);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // orthogonality tolerance is too small (CONVERGENCE_FAILED), solution is orthogonal to the jacobian
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-1455.1), (-1455.1), (-1455.1), (-1455.1), (-1455.1));
      double[] doubleArray0 = new double[1];
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[1][5];
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new LevenbergMarquardtOptimizer((-1455.1), Double.NaN, (-1455.1));
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer1.optimize(140, differentiableMultivariateVectorialFunction0, levenbergMarquardtOptimizer0.objective, levenbergMarquardtOptimizer0.objective, levenbergMarquardtOptimizer0.objective);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(385.779338609776, 385.779338609776, 0.0, 385.779338609776, 0.0);
      double[] doubleArray0 = new double[0];
      levenbergMarquardtOptimizer0.residuals = doubleArray0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 385.779338609776;
      levenbergMarquardtOptimizer0.objective = doubleArray1;
      levenbergMarquardtOptimizer0.getMaxEvaluations();
      ConvergenceChecker<VectorialPointValuePair> convergenceChecker0 = levenbergMarquardtOptimizer0.getConvergenceChecker();
      levenbergMarquardtOptimizer0.setConvergenceChecker(convergenceChecker0);
      levenbergMarquardtOptimizer0.getRMS();
      double[][] doubleArray2 = new double[1][5];
      doubleArray2[0] = levenbergMarquardtOptimizer0.objective;
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray2).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(180, differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[1];
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[1][5];
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((double[]) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 120;
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(31, differentiableMultivariateVectorialFunction0, doubleArray2, doubleArray2, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e);
      }
  }
}

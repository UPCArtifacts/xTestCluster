/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 02 01:21:58 GMT 2023
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.integration.RombergIntegrator;
import org.apache.commons.math.analysis.integration.SimpsonIntegrator;
import org.apache.commons.math.analysis.integration.TrapezoidIntegrator;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvergingAlgorithmImpl_ESTest extends ConvergingAlgorithmImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.setMaximalIterationCount(763);
      assertEquals(763, secantSolver0.getMaximalIterationCount());
      
      secantSolver0.resetMaximalIterationCount();
      assertEquals(0, secantSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.setAbsoluteAccuracy(1.0E-6);
      assertEquals(1.0E-6, trapezoidIntegrator0.getAbsoluteAccuracy(), 0.01);
      
      trapezoidIntegrator0.resetAbsoluteAccuracy();
      assertEquals(1.0E-6, trapezoidIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0, Double.NaN);
      assertEquals(Double.NaN, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0, brentSolver0.getMaximalIterationCount());
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, brentSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.setRelativeAccuracy((-2797.1799));
      assertEquals((-2797.1799), riddersSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      bisectionSolver0.setMaximalIterationCount(4);
      assertEquals(4, bisectionSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      rombergIntegrator0.setAbsoluteAccuracy((-450.7));
      assertEquals((-450.7), rombergIntegrator0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      assertEquals(1.0E-6, simpsonIntegrator0.getRelativeAccuracy(), 0.01);
      
      simpsonIntegrator0.resetRelativeAccuracy();
      assertEquals(0.0, simpsonIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.resetAbsoluteAccuracy();
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(0.0, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      double double0 = simpsonIntegrator0.getRelativeAccuracy();
      assertEquals(1.0E-6, double0, 0.01);
      assertEquals(64, simpsonIntegrator0.getMaximalIterationCount());
      assertEquals(0, simpsonIntegrator0.getIterationCount());
      assertEquals(1.0E-15, simpsonIntegrator0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.setRelativeAccuracy((-2712.18807393));
      double double0 = riddersSolver0.getRelativeAccuracy();
      assertEquals((-2712.18807393), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.setMaximalIterationCount((-2299));
      int int0 = riddersSolver0.getMaximalIterationCount();
      assertEquals((-2299), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double[] doubleArray0 = new double[3];
      laguerreSolver0.solveAll(doubleArray0, 2804.337502);
      int int0 = laguerreSolver0.getIterationCount();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver((-886), 0.0);
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals((-886), brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(2155, (-942.03214451));
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-942.03214451), double0, 0.01);
      assertEquals(2155, brentSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      double double0 = riddersSolver0.getRelativeAccuracy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      assertEquals(1.0E-15, trapezoidIntegrator0.getAbsoluteAccuracy(), 0.01);
      
      trapezoidIntegrator0.setAbsoluteAccuracy(1.0E-6);
      double double0 = trapezoidIntegrator0.getAbsoluteAccuracy();
      assertEquals(1.0E-6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      
      riddersSolver0.setMaximalIterationCount(0);
      int int0 = riddersSolver0.getMaximalIterationCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      int int0 = riddersSolver0.getIterationCount();
      assertEquals(0, int0);
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      assertEquals(0.0, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      int int0 = riddersSolver0.getMaximalIterationCount();
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(100, int0);
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getRelativeAccuracy(), 0.01);
  }
}

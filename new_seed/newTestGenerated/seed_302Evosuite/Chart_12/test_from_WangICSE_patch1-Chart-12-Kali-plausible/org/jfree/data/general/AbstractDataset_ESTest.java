/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 02 01:34:13 GMT 2023
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.SubSeriesDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractDataset_ESTest extends AbstractDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, (-198));
      defaultKeyedValueDataset0.addChangeListener(categoryToPieDataset0);
      BigInteger bigInteger0 = BigInteger.ONE;
      defaultKeyedValueDataset0.addChangeListener(categoryToPieDataset0);
      defaultKeyedValueDataset0.setValue(fixedMillisecond0, bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1802, 1802);
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      waferMapDataset0.setGroup(datasetGroup0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent("", defaultKeyedValueDataset0);
      defaultKeyedValueDataset0.notifyListeners(datasetChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(histogramDataset0, 10);
      subSeriesDataset0.fireDatasetChanged();
      assertEquals(1, subSeriesDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1798), (-1798));
      waferMapDataset0.addChangeListener((DatasetChangeListener) null);
      assertEquals((-1798), waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Object object0 = defaultKeyedValues2DDataset0.clone();
      assertNotSame(object0, defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2, 2);
      // Undeclared exception!
      try { 
        waferMapDataset0.setGroup((DatasetGroup) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'group' argument.
         //
         verifyException("org.jfree.data.general.AbstractDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1798), (-1798));
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      waferMapDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals((-1798), waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 1054);
      jDBCPieDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(1054, categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 1054);
      DatasetGroup datasetGroup0 = categoryToPieDataset0.getGroup();
      categoryToPieDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      boolean boolean0 = defaultKeyedValues2DDataset0.hasListener(xIntervalSeriesCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.validateObject();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
  }
}

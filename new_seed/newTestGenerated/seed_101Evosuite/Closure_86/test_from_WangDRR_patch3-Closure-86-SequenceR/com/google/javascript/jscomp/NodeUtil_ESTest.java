/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 24 08:53:36 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newNumber(766.91233566, (-5049), 115);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1554));
      Node node1 = new Node(184, node0);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1143);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "meaning", "meaning");
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(1426);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString(102, "7?n'h$;?Hxb");
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(2672, 640, 38);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLatin("c[:vp^me,+u|JCa$");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node((-1554));
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newNumber((-2925.72426), (-311), 2951);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "meaning", "meaning");
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "c(?Y&^$.?fY~w2t_b?", "WjNv*)%:I~I,");
      boolean boolean0 = NodeUtil.isFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node((-56));
      Node node1 = new Node(2416, node0, 24, 16);
      boolean boolean0 = NodeUtil.isThis(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString("", 33, 1269);
      Node node1 = new Node(1269, node0, 44, 49);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString(1, "9$pVs!o");
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: EOL 9$pVs!o of EOL 9$pVs!o
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber((double) 57296, 57296, 57296);
      Node node1 = new Node(3522, node0, node0, node0, node0, (-608), 94);
      boolean boolean0 = NodeUtil.isLabelName(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "timers:\n{0}", "Tz{yYXWGIcPi)?_'i0");
      assertEquals(40, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("Y>wyEM)XPZE_JbRC");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(2672, 640, 38);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString("Infinity", 122, 12);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.isAssign(node1);
      assertFalse(boolean0);
      assertEquals(122, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "meaning", "meaning");
      boolean boolean0 = NodeUtil.isExprAssign(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber(631.237109, 112, 969);
      boolean boolean0 = NodeUtil.isString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Y>wyEM)XPZE_JbRC", "Y>wyEM)XPZE_JbRC");
      boolean boolean0 = NodeUtil.isVar(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString(17, "5.s{47vXW}\"jDpaO)");
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString(12, "W&.s2d:S");
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newNumber(238.292130536, 49, 1251);
      Node node1 = new Node(24, node0);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "c(?Y&^$.?fY~w2t_b?", "WjNv*)%:I~I,");
      Node node1 = new Node(25, node0, node0, node0, node0, 98, 17);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node1, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got MOD
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1143);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber(631.237109, 112, 969);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("631.237109", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber((-2925.72426), (-311), 2951);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(4035);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString("", 33, 1273);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      boolean boolean0 = nodeUtil_MatchNotFunction0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString(0, "]$}El=");
      NodeUtil.setDebugInformation(node0, node0, "d)");
      assertEquals(29, Node.JSDOC_INFO_PROP);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString(1, "]$}El=");
      Stack<Node> stack0 = new Stack<Node>();
      stack0.add(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("==", stack0, node0, 11, (-3787));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node((-4145));
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(112, 105, 105);
      Node node1 = NodeUtil.newVarNode("", node0);
      assertEquals(118, node1.getType());
      assertFalse(node0.hasOneChild());
      assertEquals(105, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString(0, "", 0, 0);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newNumber((double) 100, 100, 100);
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, ".@KgF?t", node0, "Nj(a@K3iu");
      assertEquals(33, node1.getType());
      assertEquals(100, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "msg.reserved.id", (-14), (-14));
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString("NkaxPaKG", 42, 42);
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = NodeUtil.newFunctionNode("com.google.javascript.jscomp.NodeUtil$MatchNameNode", stack0, node0, 1, 47);
      assertEquals(3, node1.getChildCount());
      assertEquals(1, node1.getLineno());
      assertEquals(47, node1.getCharno());
      assertEquals(105, node1.getType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString(1, "]$}El=");
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = NodeUtil.newFunctionNode("==", stack0, node0, 11, (-3787));
      assertEquals(3, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertEquals(105, node1.getType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      Node node1 = NodeUtil.newExpr(node0);
      assertEquals(130, node1.getType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString("", 33, 1273);
      Node node1 = NodeUtil.newExpr(node0);
      assertEquals(130, node1.getType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(2);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, (AbstractCompiler) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString("", 33, 1273);
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Y>wyEM)XPZE_JbRC", "Y>wyEM)XPZE_JbRC");
      boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString("", 8, 8);
      boolean boolean0 = NodeUtil.isString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber((double) 835, 835, 122);
      boolean boolean0 = NodeUtil.isStatementBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.NodeUtil$MatchNotFunction");
      boolean boolean0 = NodeUtil.isObjectCallMethod(node0, "STRING_TYPE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node((-464));
      boolean boolean0 = NodeUtil.isNew(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString("", 33, 1273);
      boolean boolean0 = NodeUtil.isName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString("NkaxPaKG", 42, 42);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber((double) 122, 835, 122);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "WjNv*)%:I~I,", "7:*'V3ug");
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(33, (-3600), 33);
      boolean boolean0 = NodeUtil.isFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(105);
      boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node((-571));
      boolean boolean0 = NodeUtil.isFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newNumber(53.0, 121, 121);
      boolean boolean0 = NodeUtil.isFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newNumber(1729.33433750446, 12288, 157);
      boolean boolean0 = NodeUtil.isFunction(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString((-464), "lZhy^A");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      boolean boolean0 = NodeUtil.isConstantByConvention(closureCodingConvention0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-44));
      boolean boolean0 = NodeUtil.isCallOrNew(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node((byte) (-3), (byte) (-3), 1002);
      boolean boolean0 = NodeUtil.isCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 835, 122);
      boolean boolean0 = NodeUtil.isAssignmentOp(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString((-476), "lZhy^A");
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(4035);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchDeclaration0, nodeUtil_MatchDeclaration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("", 33, 1273);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node((-4145));
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNameNode", node0);
      String string0 = NodeUtil.getPrototypePropertyName(node1);
      assertEquals(".javascript.jscomp.NodeUtil$MatchNameNode", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      int int0 = NodeUtil.getNameReferenceCount(node0, "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("", 33, 1273);
      boolean boolean0 = NodeUtil.containsType(node0, 27);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newNumber((double) 57296, 57296, 57296);
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString(36, "call");
      Class<String> class0 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Iterator<String> iterator0 = serviceLoader0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSortedSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node((byte)71, (byte)71, (byte) (-3));
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      // Undeclared exception!
      try { 
        NodeUtil.visitPreOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNotFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node((-1035), (-1035), (-1035));
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.referencesThis((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-476));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -476
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.nodeTypeMayHaveSideEffects((Node) null, compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.nodeTypeMayHaveSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode((String) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, "==", (Node) null, "+=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.newQualifiedNameNode((CodingConvention) null, "+=", 1075, (-1421));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(120);
      // Undeclared exception!
      try { 
        NodeUtil.newName(googleCodingConvention0, (String) null, node0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Y>wyEM)XPZE_JbRC", "Y>wyEM)XPZE_JbRC");
      // Undeclared exception!
      try { 
        NodeUtil.newName((CodingConvention) null, "9$pVs!o", node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("9$pVs!o", 63, 63);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.newName(googleCodingConvention0, (String) null, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node((byte) (-3), (byte) (-3), 1002);
      NodeUtil.newExpr(node0);
      Stack<Node> stack0 = new Stack<Node>();
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("@2a&'f<>ablm}9yF'7j", stack0, node0, 21, 2690);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.newExpr((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-5049));
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isVar((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isValidPropertyName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.TokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isThis((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isSwitchCase((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isString((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isStatementBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isStatement((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString("java.lang.Character");
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isSimpleFunctionObjectCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isReferenceName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isPrototypePropertyDeclaration((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isPrototypeProperty((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isObjectLitKey((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isObjectCallMethod((Node) null, "WG-\"j35oz,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isNew((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(1400);
      // Undeclared exception!
      try { 
        NodeUtil.isNameReferenced(node0, "EvalError", (Predicate<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isNameReferenced((Node) null, "prototype");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isLoopStructure((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue((Node) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isLhs((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isLatin((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isHoistedFunctionDeclaration((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isGetProp((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isGetOrSetKey((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isGet((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectCallOrApply((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectApply((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isForIn((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isExpressionNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isExprAssign((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isEmptyFunctionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isEmptyBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructure((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isConstantName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newNumber((-179.0532), (-5069), 115);
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention(googleCodingConvention0, node0, (Node) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -179.0532 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString("", 33, 1273);
      Node node1 = new Node(1273, node0, 44, 49);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention(closureCodingConvention0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1273
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isAssignmentOp((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isAssign((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      // Undeclared exception!
      try { 
        NodeUtil.has((Node) null, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getVarsDeclaredInBranch((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$VarCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getStringValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(77);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "^=", node0, "iiJ8)Oj");
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypeClassName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getNumberValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      // Undeclared exception!
      try { 
        NodeUtil.getNodeTypeReferenceCount((Node) null, (-524), nodeUtil_MatchDeclaration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newNumber(238.292130536, 49, 49);
      Node node1 = new Node(24, node0);
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 238.292130536 49 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getLoopCodeBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.CodeConsumer", 121, 149);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionName(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GETPROP 121 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node((-14));
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString(290, "]$}El=", (-459), 0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 290
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getBooleanValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction((Node) null, 1188);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew((Node) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects((Node) null, (AbstractCompiler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.jscomp.AmbiguateProperties", 0, 0);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0, (AbstractCompiler) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got EOF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.copyNameAnnotations((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString("/=", (-1250), 17);
      // Undeclared exception!
      try { 
        NodeUtil.containsType(node0, 285, (Predicate<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.containsType((Node) null, 1193);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.containsFunction((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "c(?Y&^$.?fY~w2t_b?", "WjNv*)%:I~I,");
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got BLOCK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.canBeSideEffected((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.jscomp.AmbiguateProperties", 0, 0);
      boolean boolean0 = NodeUtil.isGet(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Collection<Node> collection0 = NodeUtil.getVarsDeclaredInBranch(node0);
      assertFalse(collection0.contains(node0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString(102, "7?n'h$;?Hxb");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.CodeConsumer", 121, 149);
      NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(149, node0.getCharno());
      assertEquals(121, node0.getLineno());
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-5049));
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("*R2:2Bf+Dd(u@7>KMx");
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertEquals(37, node1.getType());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString("prototype", (-58), (-1793));
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "c(?Y&^$.?fY~w2t_b?", "WjNv*)%:I~I,");
      String string0 = NodeUtil.getSourceName(node0);
      assertNotNull(string0);
      assertEquals(" [testcode] ", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("sa.yKzuY=2eQ\"6");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newNumber((double) 100, 100, 100);
      Node node1 = new Node(83, node0);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString("%4d");
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.AliasStrings$StringOccurrence", "7?n'h$;?Hxb");
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(120, 72, 72);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newString("", 1295, 1295);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node(77, 77, 77);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1554));
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1554));
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("Y>wyEM)XPZE_JbRC");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node1 = new Node(184, node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 37, sourceMap_DetailLevel0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "%=", 833, 833);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNotFunction0, nodeUtil_MatchNotFunction0);
      assertEquals(1, int0);
      assertEquals(833, node0.getLineno());
      assertEquals(833, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(120);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ")Nmv!8o-", "omzc'");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString(105, "]$}El=", 105, (-984));
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(1, (-750), 35);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.containsType(node0, 1, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = NodeUtil.newVarNode("common", node0);
      assertEquals(118, node1.getType());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("U-1o)?s>GT ", (Node) null);
      assertNotNull(node0);
      assertEquals(118, node0.getType());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString(1, "]$}El=");
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.CodeConsumer", 121, 149);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertEquals(2, node0.getChildCount());
      assertFalse(boolean0);
      assertEquals(121, node0.getLineno());
      assertEquals(149, node0.getCharno());
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node(105);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "meaning", "meaning");
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(47, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("xterm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("?w'^Xaxuw3h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.newName(googleCodingConvention0, "JSC_BAD_PROTECTED_PROPERTY_ACCESS", (Node) null, "undefined");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "JSC_CATCH_BLOCK_VAR_ERROR", (-537), 132);
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ":8!!GP6s0bLs.YB>XNx", 1251, 112);
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertEquals(33, node0.getType());
      assertEquals(1251, node0.getLineno());
      assertEquals(1251, node1.getLineno());
      assertEquals(112, node1.getCharno());
      assertEquals(112, node0.getCharno());
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Stack<Node> stack0 = new Stack<Node>();
      stack0.add((Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode((String) null, stack0, (Node) null, (byte)99, (byte)99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newNumber(631.237109, 112, 969);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertFalse(node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = NodeUtil.opToStr(1904);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = NodeUtil.opToStr(121);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = NodeUtil.opToStr(119);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = NodeUtil.opToStr(118);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = NodeUtil.opToStr(117);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = NodeUtil.opToStr(115);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 114: DO
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = NodeUtil.opToStr(113);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = NodeUtil.opToStr(112);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = NodeUtil.opToStr(111);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = NodeUtil.opToStr(110);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = NodeUtil.opToStr(108);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = NodeUtil.opToStr(107);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = NodeUtil.opToStr(105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = NodeUtil.opToStr(104);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = NodeUtil.opToStr(102);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = NodeUtil.opToStr(101);
      assertEquals("&&", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = NodeUtil.opToStr(100);
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 99: COLON
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = NodeUtil.opToStr(98);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(97);
      assertEquals("%=", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = NodeUtil.opToStr(96);
      assertEquals("/=", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = NodeUtil.opToStr(95);
      assertEquals("*=", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = NodeUtil.opToStr(94);
      assertEquals("-=", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(93);
      assertEquals("+=", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = NodeUtil.opToStr(92);
      assertEquals(">>>=", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = NodeUtil.opToStr(91);
      assertEquals(">>=", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(90);
      assertEquals("<<=", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = NodeUtil.opToStr(87);
      assertEquals("|=", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = NodeUtil.opToStr(86);
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = NodeUtil.opToStr(84);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 82: RC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = NodeUtil.opToStr(81);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = NodeUtil.opToStr(80);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = NodeUtil.opToStr(79);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = NodeUtil.opToStr(78);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = NodeUtil.opToStr(77);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(76);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 76: REF_NS_NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = NodeUtil.opToStr(70);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = NodeUtil.opToStr(69);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = NodeUtil.opToStr((byte)63);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = NodeUtil.opToStr(58);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = NodeUtil.opToStr(55);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = NodeUtil.opToStr(49);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = NodeUtil.opToStr(48);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = NodeUtil.opToStr(47);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = NodeUtil.opToStr(46);
      assertNotNull(string0);
      assertEquals("!==", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = NodeUtil.opToStr(45);
      assertEquals("===", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(44);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 44: TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = NodeUtil.opToStr(43);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = NodeUtil.opToStr(42);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = NodeUtil.opToStr(41);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 40: STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(39);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 39: NUMBER
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(38);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 38: NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = NodeUtil.opToStr(37);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = NodeUtil.opToStr(36);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = NodeUtil.opToStr(35);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = NodeUtil.opToStr(34);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = NodeUtil.opToStr(33);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = NodeUtil.opToStr(32);
      assertEquals("typeof", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 31: DELPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = NodeUtil.opToStr(30);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = NodeUtil.opToStr(29);
      assertEquals("-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = NodeUtil.opToStr(28);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = NodeUtil.opToStr(27);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(26);
      assertEquals("!", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = NodeUtil.opToStr(25);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = NodeUtil.opToStr(23);
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(20);
      assertEquals(">>>", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = NodeUtil.opToStr(19);
      assertEquals(">>", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = NodeUtil.opToStr(18);
      assertEquals("<<", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(17);
      assertEquals(">=", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = NodeUtil.opToStr(16);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = NodeUtil.opToStr(15);
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = NodeUtil.opToStr(14);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(13);
      assertEquals("!=", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = NodeUtil.opToStr(12);
      assertEquals("==", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = NodeUtil.opToStr(11);
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(10);
      assertEquals("^", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = NodeUtil.opToStr(75);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(9);
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(120, 72, 72);
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = new Node((-4145));
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = new Node(2);
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newNumber(631.237109, 112, 969);
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = new Node(105, 105, 105);
      // Undeclared exception!
      try { 
        nodeUtil_MatchDeclaration0.apply(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newString("%4d");
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = NodeUtil.getFunctionBody(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node(37, (byte)100, (byte) (-3));
      boolean boolean0 = NodeUtil.isCall(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "*R2:2Bf+Dd(u@7>KMx", "*R2:2Bf+Dd(u@7>KMx");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 8186, 8186);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = new Node(120, 72, 72);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: CATCH 72 of CATCH 72
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node(77);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TRY does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(2);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newNumber(631.237109, 112, 969);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1143);
      node0.addChildToBack(node0);
      // Undeclared exception!
      NodeUtil.isWithinLoop(node0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newString("", 8, 8);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString("c[:vp^me,+u|JCa$", (-1283), (-1283));
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.CodeConsumer", 121, 149);
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertEquals(33, node0.getType());
      assertEquals(149, node0.getCharno());
      assertFalse(boolean0);
      assertEquals(121, node0.getLineno());
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newNumber(631.237109, 112, 969);
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = new Node(106, 79, 113);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newString("jsSet_");
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isExprAssign(node1);
      assertEquals(130, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node((byte)107, (byte) (-3), 1002);
      boolean boolean0 = NodeUtil.isString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString(0, "%", 0, 0);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "%", node0);
      node0.addChildrenToBack(node1);
      assertEquals(38, node1.getType());
      
      NodeUtil.getAssignedValue(node1);
      assertEquals(0, node1.getCharno());
      assertEquals(0, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newNumber(766.91233566, (-5049), 115);
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "uW6]l}.9$pVs!o", node0, "uW6]l}.9$pVs!o");
      Node node2 = NodeUtil.getPrototypeClassName(node1);
      assertEquals(33, node1.getType());
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(34, 192, 192);
      boolean boolean0 = NodeUtil.isGetProp(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ":8!!GP6s0bLs.YB>XNx", 1251, 112);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      boolean boolean0 = NodeUtil.containsType(node0, 1550, sourceMap_DetailLevel0);
      assertEquals(1251, node0.getLineno());
      assertEquals(112, node0.getCharno());
      assertFalse(boolean0);
      assertFalse(node0.hasOneChild());
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = new Node(3065, 3065, (-1696));
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newString(1, "]$}El=");
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = Node.newNumber((double) 100, 100, 100);
      Node node1 = new Node(92, node0);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newNumber((-2925.72426), (-311), 2951);
      Node node1 = new Node(87, node0);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(31);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(101);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative((byte)100);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-4378));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-4378> (type -4378)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int int0 = NodeUtil.precedence(124);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      int int0 = NodeUtil.precedence(122);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for catch (type 120)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for with (type 119)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for var (type 118)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for continue (type 117)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for break (type 116)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for for (type 115)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for do (type 114)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for while (type 113)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for default (type 112)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for switch (type 110)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence((byte)109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for else (type 109)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence((byte)107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for import (type 107)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for export (type 106)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      int int0 = NodeUtil.precedence(105);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for dot (type 104)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = NodeUtil.precedence(103);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = NodeUtil.precedence(101);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      int int0 = NodeUtil.precedence(100);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for colon (type 99)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      int int0 = NodeUtil.precedence(98);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      int int0 = NodeUtil.precedence(96);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      int int0 = NodeUtil.precedence(95);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      int int0 = NodeUtil.precedence(93);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      int int0 = NodeUtil.precedence(91);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      int int0 = NodeUtil.precedence(90);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      int int0 = NodeUtil.precedence(88);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int int0 = NodeUtil.precedence(85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rp (type 84)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      int int0 = NodeUtil.precedence(83);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rc (type 82)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(81);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lc (type 81)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(71);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=71> (type 71)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=70> (type 70)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(60);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=60> (type 60)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(58);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=58> (type 58)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=50> (type 50)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for throw (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for bindname (type 48)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      int int0 = NodeUtil.precedence(47);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      int int0 = NodeUtil.precedence(46);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      int int0 = NodeUtil.precedence(44);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int int0 = NodeUtil.precedence(43);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      int int0 = NodeUtil.precedence(41);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int int0 = NodeUtil.precedence(40);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int int0 = NodeUtil.precedence(39);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      int int0 = NodeUtil.precedence(38);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      int int0 = NodeUtil.precedence(37);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int int0 = NodeUtil.precedence(35);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setprop (type 34)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      int int0 = NodeUtil.precedence(33);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      int int0 = NodeUtil.precedence(32);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      int int0 = NodeUtil.precedence(30);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int int0 = NodeUtil.precedence(29);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      int int0 = NodeUtil.precedence(28);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      int int0 = NodeUtil.precedence(26);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      int int0 = NodeUtil.precedence(24);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      int int0 = NodeUtil.precedence(23);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      int int0 = NodeUtil.precedence(21);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      int int0 = NodeUtil.precedence(20);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      int int0 = NodeUtil.precedence(19);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      int int0 = NodeUtil.precedence(18);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      int int0 = NodeUtil.precedence(17);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int int0 = NodeUtil.precedence(16);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = NodeUtil.precedence(15);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      int int0 = NodeUtil.precedence((byte)14);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      int int0 = NodeUtil.precedence(13);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      int int0 = NodeUtil.precedence(12);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int int0 = NodeUtil.precedence(9);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setname (type 8)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifeq (type 6)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for goto (type 5)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setelem (type 36)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      int int0 = NodeUtil.precedence(4);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      // Undeclared exception!
      try { 
        NodeUtil.canBeSideEffected(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = new Node(33, (-3617), 33);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = Node.newString(102, "7?n'h$;?Hxb");
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = Node.newString(89, "w", 3694, 3694);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = Node.newNumber((double) 17, 121, 17);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "WjNv*)%:I~I,", ">");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = Node.newString("==", 1, 0);
      MockFile mockFile0 = new MockFile("Marker {0} can only be used in a simple call expression");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Node node1 = new Node(132, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(122);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(121);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(119);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(117);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(116);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(115);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node node0 = new Node((byte)107, (byte) (-3), 1002);
      Node node1 = new Node(114, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeDO
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(113);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(112);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(109);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = new Node((byte)107, (byte) (-3), 1002);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(106);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(104);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(103);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = Node.newString(102, "7?n'h$;?Hxb");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType((byte)99);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(97);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(92);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(91);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(90);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = Node.newString(89, "w", 3694, 3694);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(87);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(84);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(82);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(78);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = new Node(77);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeTRY
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = new Node(74, (-1035), (-1035));
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(73);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(68);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(65);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(58);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(56);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(48);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(46);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(45);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(36);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(35);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(34);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(33);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(31);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = new Node(11, 11, 11);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, (AbstractCompiler) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "meaning", "meaning");
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Y>wyEM)XPZE_JbRC", "Y>wyEM)XPZE_JbRC");
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = new Node(77);
      ImmutableSet<String> immutableSet0 = ImmutableSet.of("i", "i", "B-n", "B-n", "1|IRJXAe}[q.");
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = Node.newString("Kh<m", (-1718), 106);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = new Node(34, (byte)100, (byte) (-3));
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Iterator<String> iterator0 = arrayDeque0.iterator();
      ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf((Iterator<? extends String>) iterator0);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSortedSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.CodeConsumer", 121, 149);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = Node.newNumber(631.237109, 112, 969);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node node0 = new Node(105);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node node0 = Node.newString("", (-2), 37);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3), 26, (-2596));
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      // Undeclared exception!
      try { 
        NodeUtil.isImmutableValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = new Node(103, 120, 103);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = new Node((-4145));
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNameNode", node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNull(double0);
      assertEquals(38, node1.getType());
      assertTrue(node1.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = Node.newNumber((-2406.5625), 969, 969);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("-2406.5625", string0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = new Node(34, (byte)100, (byte) (-3));
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertNotNull(node0);
      
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("undefined", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = Node.newNumber((double) 17, 121, 17);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("17", string0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "-Pd1-;^^", 92, (byte) (-3));
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "Infinity", node0, (String) null);
      NodeUtil.getBooleanValue(node1);
      assertNotSame(node1, node0);
      assertFalse(node0.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 833, 111);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = Node.newString("", 33, 1273);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = new Node((byte)107, (byte) (-3), 1002);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = Node.newString("", 33, 1273);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getExpressionBooleanValue(node1);
      assertEquals(122, node1.getType());
      assertEquals(1273, node1.getCharno());
      assertEquals(33, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = Node.newString("%4d");
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Node node0 = new Node(100);
      // Undeclared exception!
      try { 
        NodeUtil.getExpressionBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = Node.newNumber((double) 17, 121, 17);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = Node.newString("Infinity", 122, 12);
      boolean boolean0 = NodeUtil.isConstantName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Node node0 = Node.newString("jsSet_");
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node1);
      assertEquals(130, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLP
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = new Node(33, (-3617), 33);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node node0 = new Node((byte)107, (byte) (-3), 1002);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got IMPORT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      SyntheticAst syntheticAst0 = new SyntheticAst("sa.yKzuY=2eQ\"6");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, (-575), nodeUtil_MatchDeclaration0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.CodeConsumer", 121, 149);
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "|UQW3NESX4hyg*Mq");
      assertFalse(boolean0);
      assertEquals(121, node0.getLineno());
      assertEquals(149, node0.getCharno());
      assertTrue(node0.hasMoreThanOneChild());
      assertTrue(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, ">", node0, "Marker {0} can only be used in a simple call expression");
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertEquals(38, node1.getType());
      assertFalse(boolean0);
      assertEquals(29, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = Node.newNumber((-2925.72426), (-311), 2951);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString((-721), ">>>=");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "M]l;9S", node0, ",htWD\"9x(Pv+En*7m");
      NodeUtil.getBooleanValue(node1);
      assertEquals(38, node1.getType());
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.containsCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("*vhQARx", "*vhQARx");
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got BLOCK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = new Node(120, 72, 72);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ">>>=", 115, 93);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
      assertEquals(115, node0.getLineno());
      assertEquals(93, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Node node0 = new Node(13);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = Node.newString((-721), ">>>=");
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Node node0 = Node.newNumber(631.237109, 112, 969);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = new Node(77);
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = Node.newString("jsSet_");
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Node node0 = Node.newNumber(474.284692);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 110);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(46);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getNameReferenceCount((Node) null, "%=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newString("%4d");
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "-$X1^11eVC%", nodeUtil_MatchDeclaration0);
      assertFalse(boolean0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 24 00:13:21 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DeadAssignmentsElimination;
import com.google.javascript.jscomp.InferJSDocInfo;
import com.google.javascript.jscomp.MinimizeExitPoints;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoType;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MinimizeExitPoints_ESTest extends MinimizeExitPoints_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node((-522));
      minimizeExitPoints0.tryMinimizeExits(node0, (-522), "com.google.javascript.jscomp.MinimizeExitPoints");
      assertFalse(node0.isFor());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString((-1654), "7vG$gL^d5U$>%/e", (-2856), 46);
      node0.addChildrenToFront(node1);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      minimizeExitPoints0.process(node0, node0);
      assertFalse(node0.isRegExp());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = Node.newString("tADg[x%FL25b");
      Node node1 = compiler0.parseTestCode("tADg[x%FL25b");
      minimizeExitPoints0.process(node0, node1);
      assertFalse(node1.isTrue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "hp3{jw<Vl5<eTo]CGD");
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      Node node1 = new Node(113, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0);
      minimizeExitPoints0.visit(nodeTraversal0, node1, node0);
      assertFalse(node1.isParamList());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = new Node(126);
      Compiler compiler0 = new Compiler();
      Node node1 = Node.newString((-641), ">+sEbh>-mfD(", 0, 4095);
      node0.addChildrenToFront(node1);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      minimizeExitPoints0.visit(nodeTraversal0, node0, node0);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_Ut;VZA-D;(");
      Node node1 = new Node(77, node0);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node1, 40, "<M2%\"?_>{!d>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node(114, 114, 114);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      Node node1 = new Node(126, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DO 114 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node(142, 142, 142);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      Node node1 = new Node(126, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 142
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "hp3{jw<Vl5<eTo]CD");
      Node node1 = new Node(15, node0, node0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node1, 15, "hp3{jw<Vl5<eTo]CD");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SCRIPT [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000689] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000690] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Fp3{jw<Vl5<hTo]CD");
      DeadAssignmentsElimination deadAssignmentsElimination0 = new DeadAssignmentsElimination(compiler0);
      node0.putProp((-7353), deadAssignmentsElimination0);
      Node node1 = new Node(15, node0, node0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node1, 15, "Fp3{jw<Vl5<hTo]CD");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id -7353
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = new Node(145);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node(54);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, 54, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = new Node(125);
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      minimizeExitPoints0.tryMinimizeExits(node0, 47, (String) null);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = new Node(126);
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, 43, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(77);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, 43, "com.google.javascript.jscomp.MinimizeExitPoints");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = Node.newString("Fp3{jw<Vl5<hTo]CD");
      Node node1 = new Node(15, node0, node0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node1, 15, "Fp3{jw<Vl5<hTo]CD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(114, 114, 114);
      node0.addChildrenToFront(node0);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      minimizeExitPoints0.visit(nodeTraversal0, node0, node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "d;hP)qs?[fzgeD");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = mock(NoType.class, new ViolatedAssumptionAnswer());
      ImmutableList<NoType> immutableList0 = ImmutableList.of(noType0, noType0, noType0, noType0, noType0, noType0, noType0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterable<? extends JSType>) immutableList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      minimizeExitPoints0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isTry());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = new Node(126);
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = new Node((-19));
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node1 = new Node(115, (-33), (-16));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = new Node((-19));
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node1 = new Node(105, (-33), (-15));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(114, 114, 114);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }
}

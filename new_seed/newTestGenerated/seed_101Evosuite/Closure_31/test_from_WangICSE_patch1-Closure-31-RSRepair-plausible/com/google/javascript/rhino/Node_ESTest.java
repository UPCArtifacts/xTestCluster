/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 23 20:54:49 GMT 2022
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(120);
      Node node2 = new Node(8202, node0, node1, node1, node0, 39, 98);
      node2.isQualifiedName();
      node1.putIntProp(50, 1);
      node2.isBreak();
      node2.isContinue();
      Node node3 = Node.newNumber((double) 29, 53, 49);
      Node node4 = null;
      Node node5 = null;
      try {
        node5 = new Node((-2916), node2, (Node) null, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(1.0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.putBooleanProp((-852), true);
      node0.putBooleanProp((-852), true);
      node0.setDouble(1.0);
      node0.removeFirstChild();
      Node node1 = new Node(4095);
      node1.addSuppression("9!u4Oz");
      node1.isUnscopedQualifiedName();
      node0.isTypeOf();
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, 4, 47);
      node2.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      Node node3 = new Node(47);
      // Undeclared exception!
      try { 
        node2.setString("8_&;1o?8Bq7QIa^'>@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newNumber((double) (-16), (-1031), (-16));
      node0.getProp(264);
      node0.isFalse();
      node0.getInputId();
      Node node1 = new Node(177, node0, node0, node0, 125, 52);
      Node node2 = Node.newString((-2548), "!pkKRV4My]");
      node0.isThis();
      node2.isFor();
      Node.newString("!pkKRV4My]");
      node2.isInstanceOf();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 45, 45);
      MockFile mockFile0 = new MockFile("\"DBhWp69>l)u\"pb", "\"DBhWp69>l)u\"pb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('X');
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) node0;
      objectArray0[1] = (Object) node0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "\"DBhWp69>l)u\"pb";
      objectArray0[4] = (Object) mockPrintStream0;
      mockPrintStream0.printf(locale0, "", objectArray0);
      Node node1 = Node.newString(3804, "\"DBhWp69>l)u\"pb");
      node0.srcref(node1);
      node0.appendStringTree(printStream0);
      node0.isAdd();
      node0.isSetterDef();
      Node node2 = Node.newString("Y wTb}(j", 1897, 24);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node((-2333));
      node0.isString();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.isEquivalentTo(node0, false, false);
      node1.isOptionalArg();
      node1.addSuppression("");
      Node node2 = new Node(53, 4095, 29);
      node0.useSourceInfoFromForTree(node2);
      node2.isTry();
      node2.setSourceEncodedPositionForTree(31);
      node2.isString();
      node1.isGetProp();
      node0.getLastChild();
      Node.newString(93, "{tT7%?3&{{lYd:DR", 48, 4095);
      node2.isLabelName();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 50, 50);
      node0.setLineno(50);
      Node node1 = Node.newString(42, "4J", 53, 2);
      node0.addChildrenToBack(node1);
      node1.isRegExp();
      Node node2 = node1.copyInformationFrom(node0);
      node0.putIntProp(41, 53);
      node1.isBlock();
      node1.isContinue();
      node1.getStaticSourceFile();
      node0.isQuotedString();
      node2.isVarArgs();
      node2.getChildCount();
      node0.isSyntheticBlock();
      node1.getJSDocInfo();
      node1.isDelProp();
      node0.getChildCount();
      node2.getCharno();
      node0.hasChild(node1);
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node.extractCharno(23);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = Node.newNumber((double) 23);
      node0.isNot();
      node0.toString(true, false, false);
      node0.isHook();
      node0.isObjectLit();
      Node node1 = Node.newNumber((double) 1);
      node1.checkTreeEquals(node0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node(40);
      node0.isString();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.isEquivalentTo(node0, true, false);
      node1.isOptionalArg();
      node1.addSuppression("2<9`'*YC");
      Node node2 = new Node(32, 4095, 42);
      node0.useSourceInfoFromForTree(node2);
      node0.isTry();
      node1.setSourceEncodedPositionForTree(2);
      node2.isString();
      node2.isGetProp();
      node1.getLastChild();
      Node.newString(103, "com.google.common.collect.AbstractMultimap$KeySet", 0, 8);
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = Node.newString(40, "", (-870), 102);
      node0.addChildrenToBack(node1);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeRegistry0.createOptionalNullableType(jSType0);
      Node node2 = new Node(15);
      node2.isEquivalentTo(node0, false, false);
      node1.isOptionalArg();
      node0.isSyntheticBlock();
      node1.getJSDocInfo();
      node2.isDelProp();
      node0.getChildCount();
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node0.getFirstChild();
      node3.getAncestors();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 49;
      String string0 = "8_&;1o?8Bq7QIa^'>@";
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.setWasEmptyNode(false);
      try { 
        node1.setString("8_&;1o?8Bq7QIa^'>@");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NULL is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      InputId inputId0 = new InputId("ym~TvN!)J`U(Ax4");
      node1.getProp(15);
      node0.putProp(38, (Object) null);
      node0.isTry();
      Node.newString(1700, "TypeError", 8, 43);
      Node node2 = new Node((-2050), node1, node0, node0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry1.createParameters((List<JSType>) linkedList0);
      Node.mergeLineCharNo(119, (-669));
      node1.isNot();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node.extractCharno(23);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, node0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      linkedList1.add((JSType) objectType0);
      node0.putIntProp((-2191), 1);
      linkedList0.add((JSType) functionType0);
      Node node1 = new Node(4099);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.hasOneChild();
      node2.isEmpty();
      Node.newString(2, "[\"hiVoqg7e-r{{Qe ", (-1814), 15);
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 548;
      String string0 = "@.P";
      Node node0 = new Node(548);
      // Undeclared exception!
      try { 
        node0.srcrefTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 50, 50);
      node0.setLineno(50);
      Node node1 = Node.newString(42, "4J", 53, 2);
      node0.addChildrenToBack(node1);
      node1.isRegExp();
      Node node2 = node1.copyInformationFrom(node0);
      node0.putIntProp(41, 53);
      node1.isBlock();
      node1.isContinue();
      node1.getStaticSourceFile();
      node0.isQuotedString();
      node2.isVarArgs();
      node2.getChildCount();
      node0.isSyntheticBlock();
      node1.getJSDocInfo();
      node1.isDelProp();
      node0.getChildCount();
      node2.getCharno();
      node2.isNumber();
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 50, 50);
      Node node1 = Node.newString(0, "duplicate child", 35, 3269);
      Node node2 = new Node(4095);
      node2.addChildrenToBack(node1);
      node0.isFunction();
      node0.getQualifiedName();
      node0.setType(12);
      node1.isEquivalentTo(node2, false, true);
      node2.isIf();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(true);
      node0.addChildrenToBack(node1);
      node1.isNew();
      Node node2 = new Node(4);
      node2.isRegExp();
      Node node3 = node2.copyInformationFrom(node1);
      node3.putIntProp(39, 42);
      Node node4 = new Node(54, 1, 1831);
      node4.isObjectLit();
      Node node5 = Node.newString(3123, "sJ~{Q>'&!");
      node2.checkTreeEquals(node3);
      node4.isNew();
      node4.isInc();
      node5.getJsDocBuilderForNode();
      node3.isSwitch();
      node2.isSetterDef();
      Node node6 = node3.useSourceInfoFrom(node5);
      Node node7 = new Node(8, node2, 15, 2);
      node7.useSourceInfoFromForTree(node6);
      // Undeclared exception!
      try { 
        node4.addChildrenAfter(node3, node6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList1);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      linkedList1.add((JSType) objectType0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = Node.newString("Not declared as a constructor");
      node1.getString();
      node0.isOptionalArg();
      Node node2 = Node.newString("", 59, 43);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(43, node1);
      node3.hasChild(node0);
      node2.isInstanceOf();
      node0.isFor();
      node2.isOr();
      node0.hasChild(node1);
      node1.isIf();
      node2.addChildrenAfter(node3, (Node) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(98, "H", 98, 98);
      Node node1 = new Node(46, node0, node0, node0, node0);
      Node node2 = Node.newString("", 36, 3711);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node node4 = new Node(36, node3, node1, node2);
      node4.setOptionalArg(true);
      node3.setIsSyntheticBlock(true);
      node1.getSideEffectFlags();
      node0.isWith();
      node4.getInputId();
      Node[] nodeArray0 = new Node[0];
      Node node5 = new Node(54, nodeArray0);
      node5.setInputId((InputId) null);
      node3.hasOneChild();
      Node node6 = new Node(44, nodeArray0, 12, (-1186));
      node6.isEmpty();
      node3.isVar();
      node6.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(true);
      Node node1 = Node.newString(43, "Not declared as a type name");
      node1.getSideEffectFlags();
      objectType0.collapseUnion();
      node1.getBooleanProp(420);
      node1.isDefaultCase();
      node0.isVoid();
      Node node2 = new Node(1, node1, node1, node1);
      simpleErrorReporter0.error("HOs2 OrP >mKo0%", "", 43, 32);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node3 = Node.newNumber(3755.633);
      Node node4 = new Node(37, node3, node0, 730, (-1368));
      node4.isCall();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList1);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createFunctionType((JSType) objectType0, node0);
      linkedList1.add(jSTypeArray0[1]);
      node0.putIntProp(0, 1);
      node0.putBooleanProp(0, true);
      node0.isAdd();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      Node node1 = null;
      try {
        node1 = new Node(1910, nodeArray0, 0, 414);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList1);
      node0.isNoSideEffectsCall();
      Node node1 = new Node(42, node0, node0, node0, node0);
      node0.putBooleanProp(1, false);
      Node node2 = node0.detachFromParent();
      node0.siblings();
      node1.isArrayLit();
      Node node3 = Node.newString((-951), "", (-2511), (-1610));
      Node node4 = new Node(47, node0);
      node2.getChildCount();
      Node node5 = new Node(49);
      node2.isSyntheticBlock();
      node5.getJSDocInfo();
      node0.isDelProp();
      node3.getChildCount();
      Node node6 = node4.useSourceInfoFromForTree(node0);
      node2.getIndexOfChild(node6);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString(41, "4Z5");
      Node node1 = new Node(30, node0, node0, node0, node0, 39, 8);
      node0.getInputId();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence("4Z5");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.putProp(54, "4Z5");
      node0.isQualifiedName();
      node1.isString();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isEquivalentTo(node2, false, true);
      node3.isOptionalArg();
      node3.addSuppression("2<9`'*YC");
      Node node4 = new Node(29, 38, 30);
      node4.addChildrenToFront(node1);
      node4.isTry();
      node3.setSourceEncodedPositionForTree(0);
      node1.isString();
      node1.isGetProp();
      node3.getLastChild();
      node1.getIndexOfChild(node3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString(75, "8_&;1o?8Bq7QIa^'>@", 24, 16382);
      Node node1 = new Node(116);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.setOptionalArg(true);
      node2.setIsSyntheticBlock(true);
      node0.isFalse();
      node0.getInputId();
      Node node3 = new Node(41, node0, node1, node1, 1282, 52);
      Node node4 = Node.newString((-858), "!pkKRV4My]");
      node4.isThis();
      node4.isFor();
      Node node5 = Node.newString("L1_OV1{/!|@");
      node5.isInstanceOf();
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString(41, "4Z5");
      Node node1 = new Node(39);
      Node node2 = Node.newNumber(0.0);
      node1.checkTreeEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.addSuppression("Q{-[Aa EVY");
      node2.setCharno(42);
      node1.addChildrenToBack(node0);
      node2.isDec();
      node0.isNew();
      node0.useSourceInfoIfMissingFromForTree(node2);
      node1.isSwitch();
      node0.getSourceOffset();
      node0.getInputId();
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(64);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setOptionalArg(false);
      node0.setIsSyntheticBlock(true);
      node2.isWith();
      Node node3 = Node.newString("", 399, 8);
      node3.getInputId();
      node1.getInputId();
      node3.setInputId((InputId) null);
      node0.isSetterDef();
      node2.useSourceInfoFrom(node3);
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = Node.newString(40, "", (-870), 102);
      node0.addChildrenToBack(node1);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeRegistry0.createOptionalNullableType(jSType0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("}ZpR|", true);
      node1.putProp(4, node0);
      Node node2 = new Node(36, node0, 8, 54);
      Node node3 = node2.cloneTree();
      node3.removeChildren();
      Node.newString("Unknown class name");
      node0.isInstanceOf();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString(46, "DR3iy/l@ZBz", 1298, 46);
      Node node1 = new Node(46, node0, node0, node0);
      node0.isOnlyModifiesThisCall();
      node0.putBooleanProp((-1891), false);
      Node node2 = node0.detachFromParent();
      node1.siblings();
      node0.setVarArgs(false);
      Node node3 = Node.newString(53, "P0!{}g,=6[\"aRYdhx/", 4, 3740);
      Node node4 = new Node(4095, node0);
      node2.getChildCount();
      Node node5 = null;
      try {
        node5 = new Node(2852, node0, node3, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList1);
      node0.isNoSideEffectsCall();
      Node node1 = new Node(42, node0, node0, node0, node0);
      node0.putBooleanProp(1, false);
      Node node2 = node0.detachFromParent();
      node0.siblings();
      node1.isArrayLit();
      Node.newString((-951), "", (-2511), (-1610));
      Node node3 = new Node(47, node0);
      node2.getChildCount();
      Node node4 = new Node(49);
      node0.addSuppression("");
      Node node5 = new Node(15, 4464, 1);
      node1.isSetterDef();
      node3.useSourceInfoFrom(node2);
      node5.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isBreak();
      Node node1 = Node.newString(40, "", 51, 50);
      Node node2 = new Node(0, node0, node0, node1);
      node2.getQualifiedName();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("sourcename", false);
      node1.putProp(48, simpleSourceFile1);
      Node node3 = null;
      try {
        node3 = new Node(54, node1, 2, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString(46, "DR3iy/l@ZBz", 1298, 46);
      Node node1 = new Node(46, node0, node0, node0);
      node0.isOnlyModifiesThisCall();
      node0.useSourceInfoIfMissingFrom(node1);
      node1.type = 2624;
      node1.isComma();
      Node node2 = node0.cloneNode();
      node0.isInc();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(120);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setOptionalArg(true);
      node0.setIsSyntheticBlock(true);
      node1.isFalse();
      node0.getInputId();
      Node node3 = new Node(52, node2, node2, node0, 52, 42);
      node1.isThis();
      node2.isFor();
      Node node4 = Node.newString("8_&;1o?8Bq7QIa^'>@");
      node4.isInstanceOf();
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isQualifiedName();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.isEquivalentTo(node0, true, false);
      node0.isOptionalArg();
      node0.addSuppression("2<9`'*YC");
      Node node2 = new Node(2, 35, 4095);
      node2.setSourceEncodedPosition((-1728));
      node1.isTry();
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getSideEffectFlags();
      Node node1 = new Node(53, 35, (-801));
      node1.addChildrenToBack(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      Node node2 = new Node(16, 116, 38);
      node0.getJsDocBuilderForNode();
      node0.setLineno(1240);
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(true);
      Node node1 = Node.newString(43, "Not declared as a type name");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(28, nodeArray0);
      node2.isString();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node4 = node0.useSourceInfoIfMissingFromForTree(node2);
      node2.isEquivalentTo(node3, false, false);
      node2.isOptionalArg();
      node0.addSuppression("Not declared as a type name");
      Node node5 = new Node(16, 36, 148);
      node3.addChildrenToFront(node0);
      node4.isTry();
      Node node6 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node7 = null;
      try {
        node7 = new Node(4, node1, node2, node4, node6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      simpleErrorReporter0.error("|'3`o", "KF%)g'MM&", 0, 18);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-3673), node1);
      node1.isTry();
      Node node2 = Node.newString(43, "S$s^j8~a]3gT", 49, 1919);
      Node node3 = new Node(114, node2, node1, node1);
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node4.getProp(51);
      Node node5 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node5.getLength();
      node5.isQuotedString();
      node5.getJsDocBuilderForNode();
      String string0 = "m8-|sO";
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType("lS/8g'#d", node1, node5, (JSType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString(27, "*xRAifF;WFY", 16, 38);
      node0.isIn();
      Node node1 = Node.newNumber((double) 2);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(true);
      Node node1 = Node.newString(43, "Not declared as a type name");
      node1.getSideEffectFlags();
      node1.getBooleanProp(420);
      node1.isDefaultCase();
      node0.isVoid();
      Node node2 = new Node(1, node1, node1, node1);
      Node node3 = new Node((-54));
      Node node4 = new Node(52, node3, node2);
      node2.isIn();
      node0.isGetElem();
      // Undeclared exception!
      try { 
        node3.removeChild(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node((-16));
      Node node1 = Node.newString("String node not created with Node.newString");
      node0.isCatch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node3 = new Node(37, node2, node2, node1);
      Node node4 = Node.newString("String node not created with Node.newString");
      node4.getString();
      node1.isOptionalArg();
      Node.newString("String node not created with Node.newString", 4, 4);
      Node node5 = node0.useSourceInfoIfMissingFromForTree(node0);
      Node node6 = new Node(4095, node5);
      node3.hasChild(node4);
      node1.isInstanceOf();
      node0.isFor();
      node6.isOr();
      node5.hasChild(node6);
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = Node.newString(42, "8_&;1o?8Bq7QIa^'>@");
      node0.addChildrenToBack(node1);
      node1.getString();
      node0.siblings();
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = Node.newNumber((double) 51, 16, 40);
      node1.isExprResult();
      node0.isWith();
      node2.isEquivalentToTyped(node1);
      node0.getJsDocBuilderForNode();
      node0.isNew();
      node2.isComma();
      node0.getInputId();
      node_NodeMismatch0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList1);
      Node node1 = new Node(4, node0, 32, 4);
      node0.getInputId();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      node_NodeMismatch0.equals(linkedList0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isQualifiedName();
      node0.isTry();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(45);
      Node node3 = Node.newString(38, "4MB1$F", 119, 8);
      Node node4 = new Node((-870), node1, node1, node1);
      Node node5 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node4.getProp(4095);
      Node node6 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node3.isQuotedString();
      node0.getJsDocBuilderForNode();
      node5.isSwitch();
      node5.isDo();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node.newNumber((-1.0));
      node6.isNot();
      node6.isDo();
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node(111, node0);
      Node.mergeLineCharNo(29, 45);
      node1.isNot();
      node1.toString(false, false, true);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      jSTypeArray0[5] = (JSType) objectType0;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isDefaultCase();
      node1.isFor();
      node0.isAssignAdd();
      node1.isGetElem();
      Node node3 = Node.newString("CASE", 40, 306);
      // Undeclared exception!
      try { 
        node3.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(4, node0, node0, 2294320, 111);
      node2.isBreak();
      Node node3 = Node.newString(49, "", 16, 31);
      Node node4 = new Node(38, node3, node1, node3);
      node0.getQualifiedName();
      Node.newString(93, ")5Slb>0", 2, 4);
      node1.isDebugger();
      Node node5 = node4.cloneNode();
      Node.newString("");
      node0.isInc();
      node3.isNull();
      node0.hasOneChild();
      node2.isEmpty();
      node3.isVar();
      node5.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.putProp((-870), node1);
      Node node2 = new Node(4, node0, node0, 2294320, 111);
      node2.isBreak();
      Node node3 = Node.newString(49, "", 16, 31);
      Node node4 = new Node(38, node3, node1, node3);
      node0.getQualifiedName();
      Node.newString(93, ")5Slb>0", 2, 4);
      node1.isDebugger();
      node4.cloneNode();
      Node.newString("");
      node0.isInc();
      node3.isNull();
      node0.hasOneChild();
      node2.isEmpty();
      node3.isVar();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString((-631), "8_&;1o?8Bq7QIa^'>@", 110, (-607));
      node0.setOptionalArg(true);
      Node node1 = new Node(2138);
      Node node2 = Node.newString(";F`'Bc7Z<O:\"yNn");
      node2.addChildrenToBack(node0);
      Node node3 = new Node(37, 12288, (-214));
      node2.setSourceFileForTesting("is_optional_param");
      Node node4 = new Node(29);
      node3.isRegExp();
      Node node5 = node1.copyInformationFrom(node2);
      node3.putIntProp(49, (-4411));
      node2.isBlock();
      node5.isCatch();
      node4.useSourceInfoIfMissingFromForTree(node1);
      Node node6 = Node.newString((-252), "ADD");
      node3.hasChild(node6);
      node1.getSourcePosition();
      node6.getType();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((List<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-3673), node1);
      node1.isTry();
      Node node2 = Node.newString(43, "S$s^j8~a]3gT", 49, 1919);
      Node node3 = new Node(114, node2, node1, node1);
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node4.getProp(51);
      Node node5 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node5.isQuotedString();
      node5.getJsDocBuilderForNode();
      node3.isSwitch();
      node1.isDo();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node6 = Node.newNumber((double) 29);
      node6.isNot();
      node3.isCase();
      node3.clonePropsFrom(node6);
      node3.isGetElem();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp(148, jSTypeRegistry0);
      node0.isQualifiedName();
      node0.isTry();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(42, node0, node1, node1, node0);
      node0.isRegExp();
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType jSType1 = jSTypeRegistry0.createOptionalNullableType(jSType0);
      Node node3 = node2.copyInformationFrom(node0);
      node3.isRegExp();
      jSTypeRegistry0.isForwardDeclaredType("Unknown class name");
      node0.getQualifiedName();
      Node node4 = Node.newString(47, "YJLwS\"[q<M2%\"?");
      node4.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node node5 = new Node(1702);
      Node node6 = new Node(54, node3, node3, node5);
      node6.getStaticSourceFile();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType1;
      Node node7 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node7.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newString("");
      node0.setLineno((-1037));
      String string0 = "";
      Node node1 = Node.newString(54, "", 33, 16);
      node1.addChildrenToBack(node0);
      node0.isRegExp();
      // Undeclared exception!
      try { 
        node1.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 23, 0);
      Node node1 = Node.newNumber((double) 51);
      Node node2 = Node.newString(457, "?g}~\"^vvTEXPsa", 93, 27);
      node2.addChildrenToBack(node0);
      node2.isDec();
      node1.isNew();
      Node node3 = new Node(47);
      node1.isRegExp();
      Node node4 = node3.copyInformationFrom(node2);
      node3.addChildrenToFront(node2);
      Node node5 = new Node(51, node3, node1);
      Node node6 = null;
      try {
        node6 = new Node(39, node4, node2, node5, 10, 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      node1.toString();
      node0.setLineno(54);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NULL is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString(8233, "Node has existing properties.", 8233, 8233);
      node0.setString("Node has existing properties.");
      Node node1 = Node.newString("", 1, 45);
      try { 
        node1.setDouble(40);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  1 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node((-16), 0, (-16));
      Node node1 = new Node(37, node0, node0, 4, 37);
      node1.setWasEmptyNode(true);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.isNew();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$EvU1?vZ", true);
      Node node2 = new Node(98, 46, 42);
      node2.getJsDocBuilderForNode();
      node2.setLineno(4095);
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node((-16), 0, (-16));
      node0.addChildrenToBack(node0);
      node0.isDec();
      node0.isNew();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$EvU1?vZ", true);
      Node node1 = new Node(98, 46, 42);
      node1.setLineno(4095);
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node((-85));
      node0.setOptionalArg(false);
      node0.setIsSyntheticBlock(false);
      node0.isWith();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isSetterDef();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeArray0[0] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.getStaticSourceFile();
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      node0.isNew();
      Node node1 = new Node(8);
      node1.setIsSyntheticBlock(false);
      node1.isWith();
      node0.getInputId();
      node1.setInputId((InputId) null);
      Node node2 = new Node(110, node0, node1, 51, 44);
      node0.isSetterDef();
      Node node3 = new Node(25);
      node2.useSourceInfoFrom(node3);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.clone();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node3.getStaticSourceFile();
      Node node4 = new Node(8, (-870), 53);
      node4.isNull();
      Node node5 = Node.newNumber((double) 53, 15, 2);
      node4.setWasEmptyNode(false);
      node4.isUnscopedQualifiedName();
      node0.getStaticSourceFile();
      node4.isFor();
      node5.isContinue();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.valueOf();
      node2.useSourceInfoFromForTree(node4);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isQualifiedName();
      node0.isTry();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(45);
      node2.isRegExp();
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node3.getProp(16);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node4 = jSTypeRegistry1.createParameters((List<JSType>) linkedList0);
      node0.getJsDocBuilderForNode();
      node3.isSwitch();
      node1.isDo();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node5 = new Node(1985, node1, node0, node2);
      node2.isGetElem();
      // Undeclared exception!
      try { 
        node4.removeChild(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(120);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setOptionalArg(true);
      node0.setIsSyntheticBlock(true);
      node1.isFalse();
      node0.getInputId();
      Node node3 = new Node(52, node2, node2, node0, 52, 42);
      node1.isThis();
      node2.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = Node.newString(40, "", (-870), 102);
      node0.addChildrenToBack(node1);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeRegistry0.createOptionalNullableType(jSType0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("}ZpR|", true);
      node1.putProp(4, node0);
      Node node2 = new Node(36, node0, 8, 54);
      Node node3 = node2.cloneTree();
      node3.removeChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      node0.setWasEmptyNode(false);
      try { 
        node0.setString("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MUL 0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      try { 
        node1.setString("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 51.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 50, 50);
      node0.setLineno(50);
      Node node1 = Node.newString(42, "4J", 53, 2);
      node0.addChildrenToBack(node1);
      node1.isRegExp();
      Node node2 = node1.copyInformationFrom(node0);
      node0.putIntProp(41, 53);
      node1.isBlock();
      node1.isContinue();
      node1.getStaticSourceFile();
      node0.isQuotedString();
      node1.cloneNode();
      node0.putIntProp((-1397), 53);
      node2.isQuotedString();
      node0.isAssignAdd();
      node1.isEquivalentToTyped(node0);
      // Undeclared exception!
      try { 
        node0.addChildToBack(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = (-401);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-401));
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = null;
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalType((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      node0.isFunction();
      node1.getQualifiedName();
      node0.setType(29);
      node0.isEquivalentTo(node1, false, false);
      node1.isIf();
      // Undeclared exception!
      try { 
        node1.addChildrenAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString(20, "Q8H;=u&@TQu  m8");
      int int0 = (-2754);
      String string0 = "";
      // Undeclared exception!
      try { 
        node0.addChildrenAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node(111, node0);
      Node.mergeLineCharNo(29, 45);
      node1.isNot();
      node1.toString(false, false, true);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      jSTypeArray0[5] = (JSType) objectType0;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isDefaultCase();
      node1.isFor();
      node0.isAssignAdd();
      node1.isIf();
      node1.addChildrenAfter(node2, node0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString((-399), "8_&;1o?8Bq7QIa^'>@", 471, 471);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node1.putProp(105, simpleErrorReporter0);
      node1.isTry();
      Node node2 = Node.newString(114, "8_&;1o?8Bq7QIa^'>@", 103, 37);
      Node node3 = new Node(471, node1, node1, node2);
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.getProp(864);
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.clonePropsFrom(node4);
      node0.detachChildren();
      node3.isDo();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter2, false);
      Node node5 = null;
      try {
        node5 = new Node(3696, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isReturn();
      Node node1 = Node.newString(40, "", 51, 50);
      Node node2 = new Node(0, node0, node0, node1);
      node0.getProp(20);
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.isDo();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.isGetElem();
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      simpleErrorReporter0.error("|'3`o", "KF%)g'MM&", (-51), 19);
      Node node0 = Node.newNumber(2906.267216, (-51), 52);
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, 4, 47);
      node2.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      Node node3 = new Node(47);
      node2.isRegExp();
      node2.getProp(30);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.getJsDocBuilderForNode();
      node3.isSwitch();
      Node node5 = node1.clonePropsFrom(node4);
      node5.detachChildren();
      Node node6 = Node.newString("8_&;1o?8Bq7QIa^'>@", 29, 1);
      node6.isDo();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;
      JSType jSType0 = jSTypeRegistry1.getNativeType(jSTypeNative0);
      jSTypeArray0[0] = jSType0;
      Node node7 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node8 = null;
      try {
        node8 = new Node(41, node4, node1, node7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(true);
      Node node1 = Node.newString(4095, "=\"%h53");
      node0.getSideEffectFlags();
      Node node2 = Node.newString(12, "prev is not a child of this node.");
      node0.isDefaultCase();
      node1.isVoid();
      node2.getInputId();
      node0.setInputId((InputId) null);
      node0.isSetterDef();
      Node node3 = new Node(16, node0);
      node1.setQuotedString();
      Node node4 = Node.newNumber((double) 42, 52, 132);
      node4.setDouble(16);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(3000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got EQ
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList1);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createFunctionType((JSType) objectType0, node0);
      linkedList1.add(jSTypeArray0[1]);
      node0.isRegExp();
      jSTypeRegistry0.isForwardDeclaredType("Unknown class name");
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        Node.newString(878, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.newNumber(1.0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      InputId inputId0 = new InputId("com.google.javascript.rhino.Node$NodeMismatch");
      // Undeclared exception!
      try { 
        node0.putProp(16, inputId0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.InputId cannot be cast to java.lang.String
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isQualifiedName();
      node0.isTry();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(35, node1, node0, node0, node0);
      node2.isRegExp();
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeRegistry0.createOptionalNullableType(jSType0);
      Node node3 = node2.copyInformationFrom(node0);
      node0.isRegExp();
      jSTypeRegistry0.isForwardDeclaredType("Not declared as a constructor");
      node3.getQualifiedName();
      Node node4 = Node.newString(43, "Not declared as a constructor");
      Node.extractCharno(40);
      node2.getSourceFileName();
      node3.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node4.setQuotedString();
      try { 
        node4.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE Not declared as a constructor [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000270] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString(46, "DR3iy/l@ZBz", 1298, 46);
      Node node1 = new Node(46, node0, node0, node0);
      node0.isOnlyModifiesThisCall();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.type = (-435);
      node1.isSwitch();
      node0.getSourceOffset();
      node0.getInputId();
      node0.toStringTree();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.getSourceOffset();
      boolean boolean0 = false;
      String string0 = "";
      // Undeclared exception!
      try { 
        linkedList0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      simpleErrorReporter0.warning("UE", "UE", (-4155), 49);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(1507, node0, node0, node0, 40, 1);
      node1.useSourceInfoFromForTree(node0);
      // Undeclared exception!
      try { 
        node1.getChildBefore(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList2);
      JSType[] jSTypeArray0 = new JSType[2];
      linkedList2.add(jSTypeArray0[1]);
      node0.setIsSyntheticBlock(true);
      node0.isWith();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isSetterDef();
      Node node1 = new Node(0, node0, node0, 2, 1);
      node1.useSourceInfoFromForTree(node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.extractCharno(46);
      node1.clonePropsFrom(node2);
      node2.isVar();
      node0.removeChildren();
      node2.isDo();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      node0.removeProp(49);
      Node node1 = new Node(52, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setOptionalArg(true);
      node0.setIsSyntheticBlock(true);
      node2.getSideEffectFlags();
      node0.isWith();
      node2.getSideEffectFlags();
      node0.getInputId();
      node2.setInputId((InputId) null);
      node1.isTry();
      node1.isString();
      node2.isAssignAdd();
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isBreak();
      Node node1 = Node.newString(40, "", 51, 50);
      Node node2 = new Node(0, node0, node0, node1);
      node2.getQualifiedName();
      Node node3 = Node.newString(31, ".o+#", 36, 26);
      node3.isDebugger();
      Node node4 = node1.cloneNode();
      Node node5 = Node.newString("");
      node5.isInc();
      node0.isNull();
      node5.hasOneChild();
      node5.isEmpty();
      node4.isVar();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 50, 50);
      node0.setLineno(50);
      Node node1 = Node.newString(42, "4J", 53, 2);
      node0.addChildrenToBack(node1);
      node1.isRegExp();
      Node node2 = node1.copyInformationFrom(node0);
      node0.putIntProp(41, 53);
      node1.isBlock();
      node1.isContinue();
      node1.getStaticSourceFile();
      node0.isQuotedString();
      node2.isVarArgs();
      node2.getChildCount();
      node0.isSyntheticBlock();
      node1.getJSDocInfo();
      node1.isDelProp();
      node0.getChildCount();
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node2.getIndexOfChild(node3);
      node0.addSuppression("4J");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.addChildrenToBack(node1);
      node1.isNew();
      Node node2 = new Node(4);
      node2.isRegExp();
      Node node3 = node2.copyInformationFrom(node1);
      node3.putIntProp(39, 42);
      Node node4 = new Node(1, node2, node0);
      Node node5 = Node.newString("direct_eval", 3098, 35);
      node5.getInputId();
      node4.setInputId((InputId) null);
      node1.isSetterDef();
      node2.useSourceInfoFrom(node0);
      node0.getStaticSourceFile();
      node2.isNull();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString(8233, "Node has existing properties.", 8233, 8233);
      node0.setString("Node has existing properties.");
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(8233);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 8233
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isBreak();
      Node node1 = Node.newString(40, "", 51, 50);
      Node node2 = new Node(0, node0, node0, node1);
      Node node3 = Node.newString(31, ".o+#", 36, 26);
      node2.putIntProp((-1476), 1391);
      node3.isBlock();
      node0.isCatch();
      node2.useSourceInfoIfMissingFromForTree(node0);
      node1.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) objectType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("K?H*3", node0, objectType0);
      enumType0.toMaybeEnumType();
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      jSTypeRegistry0.createConstructorTypeWithVarArgs(objectType0, jSTypeArray0);
      node0.isNew();
      node0.isInc();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Unknown class name", true);
      node0.putProp(0, jSTypeArray0[3]);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("Named type with empty name component", false);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, 4, 47);
      node2.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      Node node3 = new Node(47);
      node2.isRegExp();
      node3.isDebugger();
      Node node4 = node0.cloneNode();
      Node node5 = Node.newString("f4}5y8]6.t{");
      node5.getBooleanProp(51);
      node0.isInc();
      node2.getChildAtIndex((-3412));
      // Undeclared exception!
      try { 
        node4.replaceChildAfter(node2, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = Node.newString(40, "", (-870), 2);
      node0.addChildrenToBack(node1);
      node1.isRegExp();
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString(1803, "ZlnIk4s]f-w\"oo,&v~e");
      node0.checkTreeEquals(node2);
      node3.isNew();
      node0.isInc();
      node2.getJsDocBuilderForNode();
      Node node4 = Node.newNumber((double) 4095);
      Node node5 = new Node(34, node4);
      node5.isSwitch();
      node5.isSetterDef();
      node2.useSourceInfoFrom(node0);
      Node node6 = null;
      try {
        node6 = new Node(94231, (Node) null, 40, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString(560, "@.P", 560, 560);
      node0.setLineno(560);
      Node node1 = Node.newString(560, "@.P");
      node1.siblings();
      node0.isName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.setDeprecationReason("@.P");
      node1.setJSDocInfo(jSDocInfo0);
      node0.checkTreeEquals(node1);
      node1.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString(548, "@.P", 548, 548);
      node0.setLineno(548);
      node0.isName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.setDeprecationReason("@.P");
      node0.setJSDocInfo(jSDocInfo0);
      node0.checkTreeEquals(node0);
      node0.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(1273);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(8, node0, node0, node0, node0, 45, 37);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node0.getSideEffectFlags();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.isNew();
      // Undeclared exception!
      try { 
        node2.removeChild(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = Node.newString(42, "8_&;1o?8Bq7QIa^'>@");
      node0.addChildrenToBack(node1);
      node1.getString();
      node0.siblings();
      Node node2 = new Node(2, node0);
      node2.getQualifiedName();
      Node node3 = Node.newString(2966, "4a?$6*h>U");
      Node.extractCharno(220);
      node3.getSourceFileName();
      node3.setQuotedString();
      // Undeclared exception!
      try { 
        node2.setDouble(35);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-3673), node1);
      node1.isTry();
      Node node2 = Node.newString(43, "S$s^j8~a]3gT", 49, 1919);
      Node node3 = new Node(114, node2, node1, node1);
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node4.getProp(51);
      Node node5 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node5.getJsDocBuilderForNode();
      node3.isSwitch();
      node2.clonePropsFrom(node4);
      node2.detachChildren();
      node1.isDo();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node6 = null;
      try {
        node6 = new Node((-725), node5, node4, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isTry();
      Node node1 = Node.newString(40, "", 51, 50);
      Node node2 = new Node(0, node0, node0, node1);
      node2.useSourceInfoIfMissingFrom(node0);
      node0.getProp(0);
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.isDo();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.isGetElem();
      Node.newNumber((double) 31);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString("JS@W9lS+'_GzsB", 24, (-1737));
      node0.isFor();
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
      
      Node node1 = new Node(42);
      node0.getInputId();
      node1.setInputId((InputId) null);
      node1.copyInformationFromForTree(node0);
      node0.isFor();
      node0.isEquivalentTo(node0);
      node0.isGetElem();
      // Undeclared exception!
      try { 
        node0.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) objectType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("K?H*3", node0, objectType0);
      enumType0.toMaybeEnumType();
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(objectType0, jSTypeArray0);
      linkedList0.add((JSType) functionType0);
      node0.putIntProp(1, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      jSTypeRegistry0.createNamedType("IbX32SQdAX", "", 39, 1);
      linkedList0.add((JSType) functionType0);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = new Node(0, node0, node0, 41, 12);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node2.hasMoreThanOneChild();
      node0.getAncestor(0);
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isBreak();
      Node node1 = Node.newString(40, "", 51, 50);
      Node node2 = new Node(0, node0, node0, node1);
      Node node3 = Node.newString(31, ".o+#", 36, 26);
      node3.isDebugger();
      Node node4 = node1.cloneNode();
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node4.getInputId();
      node5.setInputId((InputId) null);
      node0.isSetterDef();
      Node node6 = node2.useSourceInfoFrom(node0);
      node0.getStaticSourceFile();
      node6.isNull();
      Node node7 = new Node(4095);
      node7.isUnscopedQualifiedName();
      node4.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(2, node0);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(52, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setOptionalArg(true);
      node0.setIsSyntheticBlock(true);
      node2.getSideEffectFlags();
      node0.isWith();
      node0.getInputId();
      node2.setInputId((InputId) null);
      node1.isSetterDef();
      Node node3 = node2.useSourceInfoFrom(node1);
      node3.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node((-16), 0, (-16));
      Node node1 = new Node(37, node0, node0, 4, 37);
      node1.setWasEmptyNode(true);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.useSourceInfoIfMissingFrom(node0);
      node1.isNew();
      Node node2 = new Node(4);
      node2.setOptionalArg(true);
      node1.setIsSyntheticBlock(false);
      node0.isWith();
      node2.getInputId();
      node2.setInputId((InputId) null);
      node0.isSetterDef();
      Node node3 = node2.useSourceInfoFrom(node0);
      node2.getStaticSourceFile();
      node0.isNull();
      node0.isUnscopedQualifiedName();
      node3.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList2);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.getSideEffectFlags();
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(true);
      Node node1 = Node.newString(3121, "Not declared as a type name");
      node1.getSideEffectFlags();
      Node.newString(500, "", 38, (-2869));
      node1.isDebugger();
      Node node2 = node0.cloneNode();
      Node node3 = new Node(53, node2, node0, node2, 31, 4);
      node0.isInc();
      objectType0.getPropertyNames();
      // Undeclared exception!
      try { 
        node3.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(1.0);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(49, nodeArray0, 36, 22);
      node0.setWasEmptyNode(true);
      Node node2 = Node.newString("source_file");
      node0.addChildrenToBack(node1);
      node1.isDec();
      node2.isNew();
      Node node3 = new Node(42);
      node2.setOptionalArg(true);
      node3.setIsSyntheticBlock(true);
      node0.isWith();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>(linkedList0);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList1);
      node4.getInputId();
      node2.setInputId((InputId) null);
      node1.isSetterDef();
      node1.useSourceInfoFrom(node4);
      node2.getStaticSourceFile();
      node1.isNull();
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 50, 50);
      node0.setLineno(50);
      Node node1 = Node.newString(42, "4J", 53, 2);
      node0.addChildrenToBack(node1);
      node0.isQualifiedName();
      node0.putIntProp(41, 53);
      node0.isBreak();
      node1.isContinue();
      node1.getStaticSourceFile();
      node0.isQuotedString();
      node0.isVarArgs();
      node1.getChildCount();
      node0.isSyntheticBlock();
      node1.getJSDocInfo();
      node1.isDelProp();
      node0.getChildCount();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isBreak();
      Node node1 = Node.newString(40, "", 51, 50);
      Node node2 = new Node(0, node0, node0, node1);
      Node node3 = Node.newString(31, ".o+#", 36, 26);
      node3.isDebugger();
      node1.cloneNode();
      Node node4 = Node.newString("");
      node4.isInc();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node3, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isQualifiedName();
      node0.isTry();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(1881);
      node2.isRegExp();
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeRegistry0.createOptionalNullableType(jSType0);
      Node node3 = node2.copyInformationFrom(node0);
      node0.isRegExp();
      jSTypeRegistry0.isForwardDeclaredType("Not declared as a constructor");
      node3.getQualifiedName();
      node1.isNot();
      node0.isCase();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isQualifiedName();
      node0.isTry();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      jSTypeRegistry0.createNamedType("#v=mjY$;k{;oN:ctK'", "#v=mjY$;k{;oN:ctK'", 38, 4095);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node2 = new Node(27, node0, node1, (-2694), 1);
      node1.useSourceInfoIfMissingFrom(node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.hasMoreThanOneChild();
      node0.hasOneChild();
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(51, nodeArray0);
      // Undeclared exception!
      try { 
        node3.replaceChildAfter(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isQualifiedName();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setCharno(16);
      node1.isEquivalentTo(node0, false, false);
      node0.isOptionalArg();
      node0.addSuppression("2<9`'*YC");
      Node node2 = new Node(2, 35, 4095);
      node0.isSetterDef();
      node2.hasMoreThanOneChild();
      node2.getAncestor(38);
      node2.isAnd();
      node2.isCall();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, 4, 47);
      node2.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      Node node3 = new Node(47);
      node2.isRegExp();
      Node node4 = node2.copyInformationFrom(node3);
      node2.putIntProp(4, 29);
      node0.isBlock();
      node0.isCatch();
      Node node5 = node2.useSourceInfoIfMissingFromForTree(node3);
      node5.setType(303);
      node5.hasChild(node4);
      node4.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = Node.newString(42, "8_&;1o?8Bq7QIa^'>@");
      node0.addChildrenToBack(node1);
      node1.getString();
      node0.siblings();
      Node.newNumber((double) 51, 16, 40);
      node1.isExprResult();
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node((-16));
      Node node1 = Node.newString("String node not created with Node.newString");
      Node.newString("String node not created with Node.newString", 54, (-1234));
      node0.isCatch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = new Node(85, node0);
      node2.useSourceInfoIfMissingFromForTree(node1);
      Node.mergeLineCharNo(42, (-1));
      node1.isNot();
      // Undeclared exception!
      try { 
        node0.toString(true, false, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -16
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("`J9tQoR", true);
      Node node0 = new Node((-85), 912, 912);
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -85
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node((-16), 0, (-16));
      Node node1 = new Node(37, node0, node0, 4, 37);
      node1.setWasEmptyNode(true);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.isNew();
      Node node2 = new Node(4);
      node2.setOptionalArg(true);
      node1.setIsSyntheticBlock(false);
      node0.isWith();
      node2.getInputId();
      node2.setInputId((InputId) null);
      node0.isSetterDef();
      node2.useSourceInfoFrom(node0);
      node2.getStaticSourceFile();
      node0.isNull();
      node0.isOptionalArg();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      node0.setJSType(jSType0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node((-16));
      Node node1 = Node.newString("String node not created with Node.newString");
      node0.isCatch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node3 = new Node(37, node2, node2, node1);
      Node node4 = Node.newString("String node not created with Node.newString");
      node4.getString();
      node1.isOptionalArg();
      Node.newString("String node not created with Node.newString", 4, 4);
      Node node5 = node0.useSourceInfoIfMissingFromForTree(node0);
      Node node6 = new Node(4095, node5);
      node3.hasChild(node4);
      node1.isInstanceOf();
      node0.isFor();
      node6.isOr();
      node4.isGetElem();
      node4.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isQualifiedName();
      node0.isTry();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(45);
      node1.isRegExp();
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeRegistry0.createOptionalNullableType(jSType0);
      Node node2 = node1.copyInformationFrom(node0);
      node0.isRegExp();
      jSTypeRegistry0.isForwardDeclaredType("Not declared as a constructor");
      node2.getQualifiedName();
      Node node3 = Node.newString(43, "Not declared as a constructor");
      Node.extractCharno(40);
      node1.getSourceFileName();
      node3.setQuotedString();
      try { 
        node3.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE Not declared as a constructor [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000270] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isQualifiedName();
      node0.isTry();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(1881);
      node1.isRegExp();
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeRegistry0.createOptionalNullableType(jSType0);
      Node node2 = node1.copyInformationFrom(node0);
      node0.isRegExp();
      jSTypeRegistry0.isForwardDeclaredType("Not declared as a constructor");
      node2.getQualifiedName();
      Node node3 = Node.newString(43, "Not declared as a constructor");
      Node.extractCharno(40);
      node1.getSourceFileName();
      node3.setQuotedString();
      try { 
        node3.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE Not declared as a constructor [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000270] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString("8_&;1oQ8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(39, node0, node0);
      node0.addChildrenToBack(node1);
      node1.getQualifiedName();
      node0.setType(29);
      node0.getSourceFileName();
      node0.setQuotedString();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isSetterDef();
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(52, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setOptionalArg(true);
      node0.setIsSyntheticBlock(true);
      node2.getSideEffectFlags();
      node0.isWith();
      node0.getInputId();
      node2.setInputId((InputId) null);
      node1.isSetterDef();
      Node node3 = node2.useSourceInfoFrom(node1);
      node3.getSideEffectFlags();
      node3.isUnscopedQualifiedName();
      node2.isOnlyModifiesThisCall();
      node3.getChildCount();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newString(3123, "sJ~{Q>'&!");
      node0.getJsDocBuilderForNode();
      node0.getAncestors();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isTry();
      Node node1 = Node.newString(40, "", 51, 50);
      Node node2 = new Node(0, node0, node0, node1);
      Node node3 = Node.newString(31, ".o+#", 36, 26);
      node3.isDebugger();
      node1.cloneNode();
      Node node4 = null;
      try {
        node4 = new Node(54, node2, node1, node3, (-672), 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node0.isNew();
      node0.isInc();
      node0.getJsDocBuilderForNode();
      node1.isSwitch();
      node0.isSetterDef();
      node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node1.cloneTree();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-3673), node1);
      node1.isTry();
      Node node2 = Node.newString(43, "S$s^j8~a]3gT", 49, 1919);
      node2.isDefaultCase();
      node0.isVoid();
      Node node3 = new Node(15, node2, node2, node2);
      Node node4 = new Node(15);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(120, 49, 49);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.clonePropsFrom(node1);
      Node node2 = new Node(78, node0, node1);
      node0.addChildToFront(node2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString("7?P~x]@;=dVxPT.GK");
      Node node1 = new Node(40, node0, node0, node0);
      node0.isLocalResultCall();
      node0.addChildToFront(node1);
      node1.type = 847;
      // Undeclared exception!
      try { 
        node0.cloneTree();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 23, 0);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.setCharno(23);
      Node.mergeLineCharNo(37, 30);
      node0.isNot();
      node0.toString(false, false, true);
      node1.isHook();
      node1.isObjectLit();
      node1.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.isEquivalentTo(node0);
      node1.children();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node2;
      nodeArray0[4] = node1;
      Node node3 = null;
      try {
        node3 = new Node(4095, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 23, 0);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.setCharno(23);
      Node.mergeLineCharNo(37, 30);
      node0.isNot();
      node0.setSourceEncodedPosition(41);
      node0.toString(false, false, true);
      node1.isHook();
      node1.isObjectLit();
      node1.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.isEquivalentTo(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isNot();
      node1.getStaticSourceFile();
      node0.isNull();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber((-2229.61144722289));
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(12, nodeArray0, 40, 54);
      node1.setWasEmptyNode(true);
      Node node2 = Node.newString("");
      node0.addChildrenToBack(node2);
      node2.isDec();
      node0.isNew();
      Node node3 = new Node(1089);
      node0.setOptionalArg(false);
      node1.setIsSyntheticBlock(false);
      node1.isWith();
      node0.getInputId();
      node3.setInputId((InputId) null);
      node2.useSourceInfoFrom(node1);
      node0.getStaticSourceFile();
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber((-2229.61144722289));
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(12, nodeArray0, 40, 54);
      node1.setWasEmptyNode(true);
      Node node2 = Node.newString("");
      node0.addChildrenToBack(node2);
      node2.isDec();
      node0.isNew();
      Node node3 = new Node(1089);
      node0.setOptionalArg(false);
      node1.setIsSyntheticBlock(false);
      node1.isWith();
      node0.getInputId();
      node3.setInputId((InputId) null);
      node2.isSetterDef();
      node2.useSourceInfoFrom(node1);
      node0.getStaticSourceFile();
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node0.isNew();
      node0.isInc();
      node1.putProp((-672), (Object) null);
      node1.setLineno(1);
      node0.isBlock();
      node0.isCatch();
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString(41, "4Z5");
      Node node1 = new Node(30, node0, node0, node0, node0, 39, 8);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence("4Z5");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp(54, "4Z5");
      node2.isQualifiedName();
      node2.isString();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      node0.isEquivalentTo(node3, false, true);
      node4.isOptionalArg();
      node4.addSuppression("2<9`'*YC");
      Node node5 = new Node(29, 38, 30);
      node5.isTry();
      node4.setSourceEncodedPositionForTree(0);
      node1.isString();
      node1.isGetProp();
      node4.getLastChild();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      node1.getIntProp(53);
      Node node2 = new Node(2, node1);
      node2.putBooleanProp(5409, false);
      Node node3 = node2.useSourceInfoFrom(node1);
      node0.addChildrenToFront(node3);
      Node node4 = null;
      try {
        node4 = new Node(120, node1, node0, node1, 35, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newNumber((double) 16, (-494), 77);
      Node node2 = new Node(1782, node0, node0, node1, node1);
      node2.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(1507, node0, node0, node0, 40, 1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.getChildBefore((Node) null);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(1507, node0, node0, node0, 40, 1);
      // Undeclared exception!
      try { 
        node1.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1507
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = Node.newString((-2023), "com.google.javascript.rhino.jstype.ObjectType$Property", 30, 18);
      Node node2 = new Node(37);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node2.setOptionalArg(true);
      node0.setIsSyntheticBlock(true);
      node1.isWith();
      node0.getInputId();
      node2.setInputId((InputId) null);
      node0.isSetterDef();
      node3.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString(41, "4Z5");
      Node node1 = Node.newString("4Z5", 42, 16);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence("4Z5");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp(54, "4Z5");
      node2.isQualifiedName();
      node0.isTry();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node3.isOptionalArg();
      node3.addSuppression("2<9`'*YC");
      Node node4 = new Node(29, 38, 30);
      node4.isTry();
      node3.setSourceEncodedPositionForTree(0);
      node1.isString();
      node1.isGetProp();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node_AncestorIterable0.iterator();
      node4.isBlock();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(64);
      Node node1 = Node.newString("\n\nSubtree2: ", 1471, (-2764));
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node(18);
      Node node1 = new Node(47, node0, node0);
      node1.isIn();
      node1.getProp(1982);
      node1.getJsDocBuilderForNode();
      node1.clonePropsFrom(node0);
      node1.isVar();
      Node node2 = node1.removeChildren();
      node2.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node0.isNew();
      Node node2 = new Node((-1785));
      node2.isRegExp();
      Node node3 = node0.copyInformationFrom(node1);
      node3.isRegExp();
      Node node4 = node2.copyInformationFrom(node3);
      Node.extractCharno(27);
      node1.clonePropsFrom(node0);
      node0.isVar();
      node4.removeChildren();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(true);
      Node node1 = new Node(300, node0);
      Node.mergeLineCharNo(8287, 31);
      node0.isNot();
      node0.toString(false, true, true);
      node0.srcrefTree(node1);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("", "", 3081, 3081);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      Node node0 = Node.newNumber(51.0);
      Node node1 = new Node(47, node0, node0, 45, 37);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.getSideEffectFlags();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.setLength(2);
      Node node3 = null;
      try {
        node3 = new Node(23, node1, node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node((-16));
      Node node1 = Node.newString("String node not created with Node.newString");
      node0.isCatch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node3 = new Node(37, node2, node2, node1);
      Node node4 = Node.newString("String node not created with Node.newString");
      node4.getString();
      node1.isOptionalArg();
      Node.newString("String node not created with Node.newString", 4, 4);
      Node node5 = node0.useSourceInfoIfMissingFromForTree(node0);
      Node node6 = new Node(4095, node5);
      node3.hasChild(node4);
      node1.isInstanceOf();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(40);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -16
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(2, node0);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node0.getSideEffectFlags();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.setLength(35);
      boolean boolean0 = false;
      node1.putBooleanProp(3647, false);
      node1.useSourceInfoFrom(node0);
      // Undeclared exception!
      try { 
        node2.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isTry();
      Node node1 = new Node(16, node0);
      node1.putBooleanProp(30, true);
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = new Node((-1771), 50, 53);
      // Undeclared exception!
      try { 
        node3.addChildrenToFront(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node((-16), 0, (-16));
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(true);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.isNew();
      Node node2 = new Node(4);
      node2.setOptionalArg(true);
      node1.setIsSyntheticBlock(false);
      node0.isWith();
      node2.getInputId();
      node2.setInputId((InputId) null);
      node0.isSetterDef();
      node2.useSourceInfoFrom(node0);
      node2.getStaticSourceFile();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      Node node2 = new Node(39, 8, 31);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node2, objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getOwnSlot("LvR9is");
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType0.getNormalizedReferenceName();
      enumElementType1.getOwnPropertyJSDocInfo("Unknown class name");
      node1.setJSDocInfo((JSDocInfo) null);
      Node.mergeLineCharNo(8287, 46);
      node1.isNot();
      node0.toString(true, false, false);
      node1.isDefaultCase();
      node0.isFor();
      node1.isEquivalentTo(node0);
      node1.isGetElem();
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(true);
      Node node1 = new Node(300, node0);
      Node.mergeLineCharNo(8287, 31);
      node0.isNot();
      node0.toString(false, true, true);
      node1.isDefaultCase();
      node0.isFor();
      node0.isEquivalentTo(node1);
      node0.isGetElem();
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.putProp(28, jSDocInfo0);
      node0.isTry();
      Node node1 = Node.newString(37, "Not declared as a constructor", 50, 30);
      Node node2 = new Node(40, node1, node0, node0);
      node2.getProp((-1658));
      node1.getJsDocBuilderForNode();
      node2.putProp(8198, jSDocInfo0);
      Node node3 = Node.newString("com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
      node3.isSwitch();
      node3.isDo();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      node3.isLabelName();
      node3.isGetElem();
      // Undeclared exception!
      try { 
        node2.removeChild(node3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.putProp(28, jSDocInfo0);
      node0.isTry();
      Node node1 = new Node(40, node0, node0, node0);
      node1.getProp((-1658));
      node0.getJsDocBuilderForNode();
      node1.putProp(8198, jSDocInfo0);
      Node node2 = Node.newString("com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
      node1.isAssign();
      node2.isDo();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      node2.isLabelName();
      node2.isGetElem();
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node0.isNew();
      Node node2 = new Node((-1785));
      node2.isRegExp();
      Node node3 = node0.copyInformationFrom(node1);
      node3.isRegExp();
      Node node4 = node2.copyInformationFrom(node3);
      Node node5 = null;
      try {
        node5 = new Node(51, node4, node0, node2, node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node((-2196));
      Node node1 = new Node((-1838), node0);
      Node node2 = node0.cloneTree();
      node2.putBooleanProp(37, true);
      node2.getIntProp(128);
      Node node3 = node0.copyInformationFrom(node2);
      Node.newNumber((double) 16, 43, 29);
      node0.siblings();
      node3.isFor();
      node1.isFor();
      node1.removeChildren();
      node2.isOptionalArg();
      Node.extractLineno(43);
      node3.isNull();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList2);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(objectType0, jSTypeArray0);
      functionType0.getMaxArguments();
      linkedList2.add(jSTypeArray0[1]);
      node0.putIntProp(0, 1);
      node0.setIsSyntheticBlock(true);
      node0.isWith();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isSetterDef();
      Node node1 = new Node(0, node0, node0, 2, 1);
      Node node2 = null;
      try {
        node2 = new Node(6, node1, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList2);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createConstructorTypeWithVarArgs(objectType0, jSTypeArray0);
      linkedList2.add(jSTypeArray0[1]);
      node0.putIntProp(0, 1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("]e3<.\u0000_", node0, jSTypeArray0[1]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.toMaybeEnumElementType();
      node0.isEquivalentTo(node0, false, true);
      node0.isOptionalArg();
      node0.addSuppression("Not declared as a constructor");
      Node node1 = new Node(46, (-32), 53282);
      node0.isTry();
      node0.setSourceEncodedPositionForTree((-401));
      node0.isString();
      node1.isGetProp();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) objectType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("K?H*3", node0, objectType0);
      enumType0.toMaybeEnumType();
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(objectType0, jSTypeArray0);
      linkedList0.add((JSType) functionType0);
      node0.putIntProp(1, 0);
      jSTypeRegistry0.createNamedType("IbX32SQdAX", "", 39, 1);
      linkedList0.add((JSType) functionType0);
      Node node1 = new Node(0, node0, node0, 41, 12);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node2.hasMoreThanOneChild();
      node0.getAncestor(0);
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) objectType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("K?H*3", node0, objectType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType1.getConstructor();
      jSTypeArray0[1] = (JSType) null;
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(objectType0, jSTypeArray0);
      linkedList0.add((JSType) functionType0);
      node0.putIntProp(1, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      jSTypeRegistry0.createNamedType("IbX32SQdAX", "", 39, 1);
      linkedList0.add((JSType) functionType0);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = new Node(0, node0, node0, 41, 12);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node2.hasMoreThanOneChild();
      node0.getAncestor(0);
      Node.extractLineno(1298);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(2, node0);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node0.getSideEffectFlags();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.setLength(35);
      node0.isComma();
      node0.cloneNode();
      node2.isInc();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      Node node2 = Node.newString(4, "`f9`>ub~I4");
      node2.setIsSyntheticBlock(false);
      Node node3 = new Node(1955, node1);
      node2.addChildrenToBack(node0);
      node0.isDec();
      node3.isNew();
      node2.isInc();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.putProp(35, jSTypeRegistry0);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("", true);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString(631, "4Z5");
      Node node1 = Node.newString("xuxg`n?:n/`:40", 15, 42);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence("4Z5");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node1.putProp((-705), node0);
      node2.isQualifiedName();
      node0.isTry();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node4 = new Node(827, node3, node3, node0);
      Node node5 = new Node((-705), node4, node2, node1, node1);
      Node node6 = node3.useSourceInfoIfMissingFromForTree(node5);
      node2.isEquivalentTo(node3, false, false);
      node0.isOptionalArg();
      node6.addSuppression("JS@W9lS+'_GzsB");
      Node node7 = new Node(15, 41, 42);
      node7.isTry();
      node4.setSourceEncodedPositionForTree(8);
      node3.isString();
      node6.isGetProp();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList1);
      Node node1 = new Node(4, node0, 32, 4);
      node1.hasOneChild();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(0, 23, 3074);
      Node node1 = Node.newNumber((double) 4);
      node0.setWasEmptyNode(false);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node1.isNew();
      Node node2 = new Node(4);
      node1.isRegExp();
      Node node3 = node0.copyInformationFrom(node1);
      node0.putIntProp(26, 15);
      node0.isBlock();
      node1.isCatch();
      // Undeclared exception!
      try { 
        node3.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newString(46, "DR3iy/l@ZBz", 1298, 46);
      node0.isOnlyModifiesThisCall();
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      node1.getQualifiedName();
      node1.setType(3711);
      node1.isThis();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(54);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3711
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isTry();
      Node node1 = Node.newString(40, "", 51, 50);
      Node node2 = new Node(0, node0, node0, node1);
      String string0 = "com.google.javascript.rhino.Node$AbstractPropListItem";
      Node node3 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem");
      node1.srcrefTree(node3);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(41);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node.extractCharno(23);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node(23, 23, 23);
      Node node1 = Node.newString("", 0, 2);
      node0.isEquivalentToTyped(node1);
      node0.hasOneChild();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 2555;
      int int1 = 83;
      Node node0 = new Node((-600), 2560, 308);
      Node node1 = new Node((-1534), node0, node0, 39, 100);
      node0.removeProp(357);
      node0.isEquivalentToTyped(node1);
      Node node2 = null;
      try {
        node2 = new Node(2555, node1, node1, node0, 45, (-3810));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString((-1950), "U2U_CONSTRUCTOR_TYPE");
      Node node1 = Node.newString("U2U_CONSTRUCTOR_TYPE", 4095, 47);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.isInc();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.javascript.rhino.Node$IntPropListItem", false);
      node1.putProp(54, simpleSourceFile0);
      Node node2 = new Node(54, node0, 44, 30);
      node2.cloneTree();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node0 = new Node(41);
      node0.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      Node node1 = new Node(15);
      String string0 = "GETTER_DEF";
      node0.getJsDocBuilderForNode();
      Node.newString("GETTER_DEF");
      node0.isCatch();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NULL [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("vmwPT", (-368), (-368));
      Node node1 = new Node(45, node0, node0);
      node0.addChildrenToBack(node1);
      node0.isFunction();
      node1.getQualifiedName();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      nodeArray0[5] = node1;
      nodeArray0[6] = node1;
      Node node2 = null;
      try {
        node2 = new Node((-2739), nodeArray0, 53, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString(4023, "&!~<vP\"9\"", 4023, (-1274));
      node0.removeChildren();
      node0.isLocalResultCall();
      Node node1 = new Node((-2114), node0, 37, (-774));
      node0.siblings();
      node1.removeChild(node0);
      Node node2 = new Node(35, node1, node1, (-1174), 5274);
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      node0.isNoSideEffectsCall();
      node0.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      // Undeclared exception!
      try { 
        node0.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList2);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createConstructorTypeWithVarArgs(objectType0, jSTypeArray0);
      linkedList2.add(jSTypeArray0[1]);
      node0.putIntProp(0, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      linkedList0.add((JSType) objectType0);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList2);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createFunctionType((JSType) objectType0, node0);
      linkedList2.add(jSTypeArray0[1]);
      node0.putIntProp(0, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      linkedList0.add((JSType) objectType0);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node0.isObjectLit();
      node1.getJsDocBuilderForNode();
      node0.isSwitch();
      node1.isDo();
      node0.children();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isGetProp();
      node1.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "8_&;1o?8Bq7QIa^'>@";
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      try { 
        node0.setDouble(49);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THROW 8_&;1o?8Bq7QIa^'>@ 49 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = 666;
      int int1 = (-1950);
      Node.newString((-1950), "U2U_CONSTRUCTOR_TYPE");
      Node node0 = Node.newString("U2U_CONSTRUCTOR_TYPE", 13, 34);
      try { 
        node0.setDouble((-470.619));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING U2U_CONSTRUCTOR_TYPE 13 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(2, node0);
      node0.addChildrenToBack(node1);
      node0.isThis();
      node0.getSideEffectFlags();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      // Undeclared exception!
      try { 
        node2.removeChild(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(1507, node0, node0, node0, 40, 1);
      // Undeclared exception!
      try { 
        node1.getChildBefore(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.putProp(28, jSDocInfo0);
      node0.isTry();
      Node node1 = Node.newString(37, "Not declared as a constructor", 50, 30);
      Node node2 = new Node(40, node1, node0, node0);
      node2.getProp((-1658));
      node1.getJsDocBuilderForNode();
      Node node3 = Node.newString("com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
      node3.isSwitch();
      node3.isDo();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      node3.isGetElem();
      // Undeclared exception!
      try { 
        node2.removeChild(node3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.isNew();
      Node node2 = new Node(4);
      node2.isRegExp();
      node1.isCatch();
      Node node3 = null;
      try {
        node3 = new Node(16, node2, node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 50, 50);
      node0.setLineno(50);
      Node node1 = Node.newString(42, "4J", 53, 2);
      node0.addChildrenToBack(node1);
      node0.isQualifiedName();
      node0.putIntProp(41, 53);
      node0.isBreak();
      node1.isContinue();
      Node node2 = Node.newNumber(2987.3255566, 65136, 40);
      Node node3 = null;
      try {
        node3 = new Node(16, node2, node1, node1, 51, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newNumber(3755.633);
      Node node1 = Node.newNumber((-2655.966085), 43, 29);
      Node node2 = Node.newNumber((double) 46);
      node0.setWasEmptyNode(true);
      node2.setCharno(16);
      Node.mergeLineCharNo((-2312), 4095);
      node2.isNot();
      node1.toString(false, true, true);
      node0.isHook();
      node1.isObjectLit();
      node0.checkTreeEquals(node2);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString(46, "DR3iy/l@ZBz", 1298, 46);
      Node node1 = new Node(46, node0, node0, node0);
      node0.isOnlyModifiesThisCall();
      node0.useSourceInfoIfMissingFrom(node1);
      node1.setLength(49);
      node1.isComma();
      Node node2 = node0.cloneNode();
      node0.isInc();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("j", false);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node1.getSideEffectFlags();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.setLength(1916);
      node1.isComma();
      node1.cloneNode();
      node1.isInc();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node.extractCharno((-1833));
      Node node0 = new Node(32);
      Node node1 = new Node(30, 2145, 44);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node1.setOptionalArg(false);
      node1.setIsSyntheticBlock(false);
      node1.isWith();
      node1.getInputId();
      node0.setInputId((InputId) null);
      node0.setType(45);
      node1.isSetterDef();
      node0.useSourceInfoIfMissingFrom(node1);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      Node.extractLineno(110);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node.newString(44, "8_&;1o?8Bq7QIa^'>@");
      node0.getSideEffectFlags();
      Node node1 = Node.newString(0, "8_&;1o?8Bq7QIa^'>@");
      node1.isDefaultCase();
      node0.isVoid();
      node0.isEquivalentTo(node1);
      node0.isGetElem();
      // Undeclared exception!
      try { 
        node1.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newString("", 40, (-1260));
      node0.isString();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.isEquivalentTo(node0, true, false);
      node1.isOptionalArg();
      node1.addSuppression("2<9`'*YC");
      Node node2 = new Node(32, 4095, 42);
      node0.isTry();
      Node.newNumber((double) 41, 40, 119);
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString(41, "4Z5");
      Node node1 = Node.newString("4Z5", 42, 16);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence("4Z5");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp(54, "4Z5");
      node2.isQualifiedName();
      node0.isTry();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      node0.isEquivalentTo(node3, false, true);
      node4.isOptionalArg();
      node4.addSuppression("2<9`'*YC");
      Node node5 = new Node(29, 38, 30);
      node5.isTry();
      node4.setSourceEncodedPositionForTree(0);
      node1.isString();
      node1.isGetProp();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 23, 0);
      node0.setWasEmptyNode(false);
      node0.setCharno(23);
      Node.mergeLineCharNo(37, 30);
      node0.isNot();
      node0.toString(false, false, true);
      node0.isHook();
      node0.isObjectLit();
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.isDo();
      node0.children();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isGetProp();
      node1.isGetterDef();
      node1.isOnlyModifiesThisCall();
      node0.isTry();
      node0.getBooleanProp(48);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.isNew();
      Node node2 = new Node(4);
      node2.isRegExp();
      node2.copyInformationFrom(node1);
      node1.addChildrenToFront(node0);
      Node node3 = null;
      try {
        node3 = new Node(43, node0, node1, node1, 1, 41);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(31);
      Node node2 = null;
      // Undeclared exception!
      try { 
        node0.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      Node node2 = new Node(2, node1);
      node2.putBooleanProp(5409, false);
      Node node3 = node2.useSourceInfoFrom(node1);
      node0.addChildrenToFront(node3);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, 4, 47);
      node2.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      Node node3 = new Node(47);
      node2.isRegExp();
      Node node4 = node2.copyInformationFrom(node3);
      node2.putIntProp(4, 29);
      node0.isBlock();
      node0.isCatch();
      Node node5 = node2.useSourceInfoIfMissingFromForTree(node3);
      node5.hasChild(node4);
      node5.isEquivalentTo(node2, false, false);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isQualifiedName();
      node0.isTry();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.isEquivalentTo(node0, true, false);
      node2.setLineno((-632));
      node1.getStaticSourceFile();
      Node node3 = node2.copyInformationFromForTree(node1);
      node1.setStaticSourceFile((StaticSourceFile) null);
      node3.putIntProp(36, 50);
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newNumber(3755.633, (-1017), (-1017));
      node0.getProp(3471);
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.putBooleanProp(2821, true);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpect prop id 2821
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString(41, "4Z5");
      Node node1 = Node.newString("4Z5", 42, 16);
      Node node2 = Node.newNumber(0.0);
      node1.checkTreeEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.addSuppression("Q{-[Aa EVY");
      node2.setCharno(42);
      node1.addChildrenToBack(node0);
      node2.isDec();
      node0.isNew();
      Node node3 = new Node(12);
      node2.isRegExp();
      Node node4 = node3.copyInformationFrom(node2);
      node4.putIntProp(1, 4);
      node0.isBlock();
      Node node5 = new Node(435);
      node4.isRegExp();
      Node node6 = node0.copyInformationFrom(node5);
      node4.putIntProp(37, (-4255));
      node5.isBlock();
      node6.isCatch();
      // Undeclared exception!
      try { 
        node4.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpect prop id 1
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node.extractCharno(1795);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isThis();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 23, 0);
      node0.setWasEmptyNode(false);
      node0.setCharno(23);
      Node.mergeLineCharNo(37, 30);
      node0.isNot();
      node0.toString(false, false, true);
      node0.isHook();
      node0.isObjectLit();
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.isDo();
      node0.children();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = new Node(151582, node0, 35, 37);
      node1.isGetProp();
      node1.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = new Node(453);
      Node node1 = new Node(50, node0, 40, 49);
      node0.putBooleanProp(453, true);
      node0.addChildrenToBack(node1);
      node0.isFunction();
      node0.setType(8);
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node1.getSideEffectFlags();
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = Node.newString((-2322), "Not declared as a type name");
      node1.isNull();
      node2.isFor();
      node1.isEquivalentTo(node0);
      node1.isGetElem();
      node0.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newNumber((double) (-16), (-1031), (-16));
      node0.getProp(264);
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      node0.isGetElem();
      Node node1 = new Node(35, node0, node0);
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString(41, "");
      Node node1 = Node.newNumber((double) 16);
      node1.checkTreeEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node1.addSuppression("Q{-[Aa EVY");
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node.newNumber((double) 51);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got MUL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node((-1984));
      Node node1 = new Node((-1984), node0);
      node1.isLocalResultCall();
      Node node2 = Node.newString(148, "");
      node2.getDirectives();
      // Undeclared exception!
      try { 
        node0.toString(false, false, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1984
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got MUL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "4Z5";
      Node node0 = Node.newString(41, "4Z5");
      Node node1 = Node.newString("4Z5", 42, 16);
      Node node2 = Node.newNumber(0.0);
      node1.checkTreeEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.addSuppression("Q{-[Aa EVY");
      node2.setCharno(42);
      node1.addChildrenToBack(node0);
      node2.isDec();
      node0.isNew();
      Node node3 = new Node(12);
      node2.isRegExp();
      Node node4 = node3.copyInformationFrom(node2);
      node4.cloneTree();
      node4.putIntProp(1, 4);
      node0.isBlock();
      Node node5 = new Node(16, node2, node2, node3, (-128), (-721));
      Node node6 = Node.newString(",");
      node6.isCatch();
      try { 
        node5.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GT is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString(50, "UH`%C_Vdg=k*#]");
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isQualifiedName();
      node0.isTry();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.isEquivalentTo(node0, true, false);
      node0.isOptionalArg();
      node0.addSuppression("2<9`'*YC");
      Node node2 = new Node(2, 35, 4095);
      node1.isTry();
      node1.setSourceEncodedPositionForTree(49);
      node1.isString();
      node2.isGetProp();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 23, 0);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node1.isFor();
      node0.isOnlyModifiesThisCall();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node2 = new Node(32, node1, node1, node0);
      nodeArray0[2] = node2;
      nodeArray0[3] = node1;
      nodeArray0[4] = node0;
      nodeArray0[5] = node1;
      Node node3 = null;
      try {
        node3 = new Node(39, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString("JS@W9lS+'_GzsB", 24, (-1737));
      node0.isFor();
      node0.isAdd();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(32, nodeArray0);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node(18);
      Node node1 = new Node(47, node0, node0);
      node1.isIn();
      node0.isGetElem();
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isTry();
      Node node1 = Node.newString(40, "", 51, 50);
      Node node2 = new Node(0, node0, node0, node1);
      node0.getProp(0);
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.isDo();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.isGetElem();
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(102);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(1774, node0, node1, node1, 32, 65500);
      Node node3 = null;
      try {
        node3 = new Node(8, node0, node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = ",8";
      Node node0 = Node.newString(",8");
      Node node1 = new Node(54, node0, node0, node0);
      node0.setType(46);
      node0.isQuotedString();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SHNE ,8 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString(",8");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setLength(139317);
      node1.children();
      node0.isQuotedString();
      node2.setIsSyntheticBlock(false);
      node1.setOptionalArg(false);
      Node node3 = Node.newString("bm*:d=");
      node3.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.setCharno(23);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.isNew();
      Node node2 = new Node(4);
      node2.isRegExp();
      Node node3 = node2.copyInformationFrom(node1);
      node3.putIntProp(39, 42);
      node2.isBlock();
      Node node4 = new Node(31, node3, node2, node0, 16, 51);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2151);
      node_SideEffectFlags0.clearAllFlags();
      node2.removeProp(30);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 23, 0);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.setCharno(23);
      Node.mergeLineCharNo(37, 30);
      node0.isNot();
      node0.toString(false, false, true);
      node1.isHook();
      node1.isObjectLit();
      node1.getJsDocBuilderForNode();
      node0.isSwitch();
      node1.isDo();
      node1.children();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node2;
      nodeArray0[4] = node1;
      Node node3 = null;
      try {
        node3 = new Node(4095, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, 4, 47);
      node2.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node2;
      nodeArray0[5] = node1;
      nodeArray0[6] = node1;
      nodeArray0[7] = node1;
      Node node3 = null;
      try {
        node3 = new Node(102, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newString(",8");
      Node node1 = new Node(0, node0, node0, node0);
      node1.putBooleanProp(440, true);
      node0.setLineno(65500);
      Node node2 = node0.useSourceInfoFrom(node1);
      node1.isRegExp();
      Node node3 = node0.copyInformationFrom(node2);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      nodeArray0[1] = node3;
      nodeArray0[2] = node1;
      Node node4 = null;
      try {
        node4 = new Node(54, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node.extractCharno(23);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.hasOneChild();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 23, 0);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.setCharno(23);
      Node.mergeLineCharNo(37, 30);
      node0.isNot();
      node0.toString(false, false, true);
      node1.isHook();
      node1.isObjectLit();
      node1.getJsDocBuilderForNode();
      node0.isSwitch();
      node1.isDo();
      node1.children();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node1.isGetProp();
      node2.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList2);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createConstructorTypeWithVarArgs(objectType0, jSTypeArray0);
      linkedList2.add(jSTypeArray0[1]);
      node0.putIntProp(0, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      ObjectType.createDelegateSuffix("The new child node already has a parent.");
      jSTypeRegistry0.createNamedType("q<.", "q<.", 15, (-375));
      linkedList0.add((JSType) objectType0);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = new Node(40, node0, node0, 53, 29);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.addChildToBack(node1);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node1.hasMoreThanOneChild();
      // Undeclared exception!
      try { 
        Charset.forName("Not declared as a constructor");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Not declared as a constructor
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isQualifiedName();
      node0.isTry();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(45);
      node2.isRegExp();
      Node node3 = node2.copyInformationFrom(node0);
      node0.isRegExp();
      node1.isTypeOf();
      node3.toStringTree();
      node3.isDo();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newString(49, "/]w$pW7Le|\"nz^<3");
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isTry();
      Node node1 = Node.newString(40, "", 39, 50);
      Node node2 = new Node(0, node0, node0, node1);
      node0.getProp(0);
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.isDo();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node1.isGetProp();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newString(46, "DR3iy/l@ZBz", 1298, 46);
      Node node1 = new Node(46, node0, node0, node0);
      node0.isOnlyModifiesThisCall();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node1.type = (-435);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = new Node(102);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.setLength(1455);
      node0.children();
      node0.setIsSyntheticBlock(true);
      node0.setOptionalArg(true);
      Node node2 = Node.newString("%;=/e+]oT-");
      node0.hasChild(node2);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(120);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setOptionalArg(true);
      node0.setIsSyntheticBlock(true);
      node0.isWith();
      node0.getInputId();
      node2.setInputId((InputId) null);
      node1.isSetterDef();
      node2.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node.extractCharno((-1833));
      Node node0 = new Node(32);
      Node node1 = new Node(30, 2145, 44);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node1.setOptionalArg(false);
      node1.setIsSyntheticBlock(false);
      node1.getProp((-1));
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      linkedList1.add((JSType) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      int int0 = 102;
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      Node node3 = new Node(15, nodeArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("NUMBER_TYPE", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("X3!]PL4v2");
      nodeArray0[0] = node0;
      Node node1 = new Node(1006, nodeArray0);
      Node node2 = new Node((-497), node1, 39, (-777));
      node0.putIntProp((-778), 3203);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      jSTypeRegistry0.createNamedType("X3!]PL4v2", "X3!]PL4v2", 15, 16);
      node1.isWith();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node2.isSetterDef();
      node1.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newNumber(649.0560396767073, (-3744), (-3744));
      Node node1 = new Node(77, node0, node0);
      Node node2 = new Node(1521, node1);
      node2.setCharno(119);
      Node.mergeLineCharNo(29, 54);
      node1.isNot();
      node0.toString(true, false, true);
      node1.isHook();
      node0.isObjectLit();
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1521
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      node0.toString(true, false, false);
      Node node1 = new Node(52, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setOptionalArg(true);
      node0.setIsSyntheticBlock(true);
      node0.isWith();
      node0.getInputId();
      node2.setInputId((InputId) null);
      node1.isSetterDef();
      Node node3 = node2.useSourceInfoFrom(node1);
      node3.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      Node.mergeLineCharNo(8287, 46);
      node1.isNot();
      node0.toString(true, false, false);
      node1.isHook();
      node1.isObjectLit();
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -85
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.isNew();
      Node node2 = new Node(4);
      node2.isRegExp();
      Node node3 = node2.copyInformationFrom(node1);
      node3.putIntProp(39, 42);
      node2.isBlock();
      node2.isCatch();
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // RETURN [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.setCharno(23);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.isNew();
      Node node2 = new Node(4);
      node2.isRegExp();
      Node node3 = node2.copyInformationFrom(node1);
      node3.putIntProp(39, 42);
      node2.isBlock();
      Node node4 = new Node(31, node3, node2, node0, 16, 51);
      node4.isCatch();
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // RETURN [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString(41, "4Z5");
      Node node1 = Node.newString("4Z5", 42, 16);
      Node.newNumber(0.0);
      node1.checkTreeEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.addSuppression("Q{-[Aa EVY");
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, 4, 47);
      node2.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      node1.isInc();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("@^`H&|_q?v@p|o", false);
      node0.putProp(98, node2);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("8_&;1o?8Bq7QIa^'>@", false);
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = new Node(62, 62, 62);
      node0.isGetProp();
      Node node1 = Node.newString("kmgJ^3g;;@T~_", 4, 4);
      node0.clonePropsFrom(node1);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 62
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newString(33, "4Z5");
      Node node1 = new Node(30, node0, node0, node0, node0, 39, 8);
      node0.getInputId();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence("4Z5");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.putProp(54, "4Z5");
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.getStaticSourceFile();
      node0.isQuotedString();
      node0.isVarArgs();
      node0.getChildCount();
      node0.isSyntheticBlock();
      node0.getJSDocInfo();
      node0.isDelProp();
      node0.getChildCount();
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-870), "Not declared as a constructor");
      node0.isQualifiedName();
      node0.isTry();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.isEquivalentTo(node0, true, false);
      node0.isOptionalArg();
      node0.addSuppression("2<9`'*YC");
      Node node3 = node1.srcref(node0);
      node1.isTry();
      node1.setSourceEncodedPositionForTree(49);
      node2.isSyntheticBlock();
      node3.isGetProp();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString(2, "bE", 4, 2);
      Node node1 = new Node(40);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(49, 8, 2);
      node2.setSourceFileForTesting("X3!]PL4v2");
      node2.setLineno(50);
      node2.getStaticSourceFile();
      Node node3 = null;
      try {
        node3 = new Node(1, node0, node0, node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2));
      node_SideEffectFlags0.clearSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "&!~<vP\"9\"";
      Node node0 = Node.newString(4023, "&!~<vP\"9\"", 4023, (-1274));
      node0.removeChildren();
      node0.isLocalResultCall();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 2
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node0 = null;
      try {
        node0 = new Node(50, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newString("nyG=,2_7qOEk", 4, 24);
      node0.isFor();
      Node node1 = new Node(1, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(39, node1, node1, node0, 46, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node0.isNew();
      int int0 = (-1785);
      Node node2 = new Node((-1785));
      node2.isRegExp();
      Node node3 = null;
      try {
        node3 = new Node(2, node0, node1, node0, 8, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(33, node0, node0, node0, node0, 37, 483);
      Node node2 = null;
      try {
        node2 = new Node(1944, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = ",8";
      Node node0 = Node.newString(",8");
      Node node1 = new Node(0, node0, node0, node0);
      node1.putBooleanProp(440, true);
      node0.setLineno(65500);
      Node node2 = node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int int0 = 85;
      Node node0 = null;
      try {
        node0 = new Node(87, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString(46, "DR3iy/l@ZBz", 1298, 46);
      Node node1 = new Node(46, node0, node0, node0);
      node0.isOnlyModifiesThisCall();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node1.isSwitch();
      node0.getSourceOffset();
      Node node3 = null;
      try {
        node3 = new Node(17, node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = new Node(37, 103, (-1737));
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(1787, nodeArray0, (-3659), 1787);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      boolean boolean0 = true;
      node1.setOptionalArg(true);
      Node node3 = null;
      try {
        node3 = new Node(38, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      jSTypeRegistry0.getTypesWithProperty("");
      JSType jSType0 = null;
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType("", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = (-1183);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      Node node0 = null;
      try {
        node0 = new Node((-1183), (Node) null, (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("", 59, 43);
      node0.isNoSideEffectsCall();
      node0.isInstanceOf();
      node0.isOr();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 50, 50);
      node0.setLineno(50);
      node0.isLocalResultCall();
      Node node1 = Node.newString(42, "4J", 53, 2);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node1.isRegExp();
      Node node2 = node1.copyInformationFrom(node0);
      node0.putIntProp(41, 53);
      node1.isBlock();
      node1.isContinue();
      node2.isNot();
      node0.isCase();
      node1.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 50, 50);
      node0.setLineno(50);
      Node node1 = Node.newString(42, "4J", 53, 2);
      node0.addChildrenToBack(node1);
      node1.isRegExp();
      Node node2 = node1.copyInformationFrom(node0);
      node0.putIntProp(41, 53);
      node1.isBlock();
      node1.isContinue();
      node0.isCase();
      node1.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "y1iD?*_E@ojX_Q6se6";
      Node node0 = Node.newString(49, "y1iD?*_E@ojX_Q6se6", 49, 49);
      Node node1 = new Node(12, node0, node0, node0, node0, 32, 45);
      node0.addChildrenToBack(node1);
      node0.setIsSyntheticBlock(true);
      Node node2 = null;
      try {
        node2 = new Node(49, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(2, node0);
      Node node2 = new Node(53, node1);
      node1.getIntProp(54);
      Node node3 = null;
      try {
        node3 = new Node(48, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node.newString(42, "8_&;1o?8Bq7QIa^'>@");
      // Undeclared exception!
      try { 
        Node.newString((String) null, 47, 69639);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newNumber(0.0, 1523, 1523);
      node0.putIntProp(1523, (-201));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      JSType jSType0 = jSTypeRegistry0.createNamedType("+9LXq2%$Q{c2?+0`=0", "6", 65279, 53);
      linkedList0.add(jSType0);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = new Node((-191), node0, node0, (-3349), 1440);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList1);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      linkedList1.add((JSType) objectType0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      jSTypeRegistry0.createNamedType("q<.", "q<.", 15, 41);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = new Node(40, node0, node0, 53, 29);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node1.hasMoreThanOneChild();
      node2.hasOneChild();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList2);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createConstructorTypeWithVarArgs(objectType0, jSTypeArray0);
      linkedList2.add(jSTypeArray0[1]);
      node0.putIntProp(0, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      jSTypeRegistry0.createNamedType("q<.", "q<.", 15, 147);
      linkedList0.add((JSType) objectType0);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = new Node(40, node0, node0, 53, 29);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node(1785, 1521, 1785);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1795, 1521, 1521);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newString("nyG=,2_7qOEk", 4, 24);
      node0.isRegExp();
      Node node1 = new Node(3014, node0, node0, node0, node0);
      Node node2 = node0.copyInformationFrom(node1);
      node2.putIntProp(30, 54);
      node1.isBlock();
      node1.isCatch();
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3014
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = Node.newString(42, "8_&;1o?8Bq7QIa^'>@");
      node0.addChildrenToBack(node1);
      node1.getString();
      node0.siblings();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node.newNumber((double) 51, 16, 40);
      node1.isExprResult();
      node0.isWith();
      node0.getJsDocBuilderForNode();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node.extractCharno(23);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isBlock();
      node0.isCatch();
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node((-85), node0);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node0.isNew();
      Node node2 = new Node((-1785));
      node2.isRegExp();
      Node node3 = node0.copyInformationFrom(node1);
      node2.putIntProp((-1785), 29);
      node3.isBlock();
      node1.isCatch();
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -85
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node.extractCharno(23);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.hasOneChild();
      node0.getStaticSourceFile();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, 4, 47);
      node2.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      node2.setLineno(50);
      node1.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node2.putIntProp(16, 2609);
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isQuotedString();
      Node node1 = Node.newString("");
      node1.setIsSyntheticBlock(true);
      int int0 = (-939);
      node1.getJSDocInfo();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newString(8233, "Node has existing properties.", 8233, 8233);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(8233);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 8233
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node.extractCharno((-1833));
      Node node0 = new Node(32);
      Node node1 = new Node(30, 2145, 44);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node node2 = node1.cloneNode();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isEquivalentTo(node2, true, false);
      node2.addSuppression("com.google.common.collect.AbstractMultimap$WrappedCollection");
      node2.srcref(node0);
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      jSTypeRegistry0.getTypesWithProperty("Not declared as a type name");
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(objectType0, jSTypeArray0);
      linkedList0.add((JSType) functionType0);
      node0.putIntProp(0, 8);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      JSType jSType0 = jSTypeRegistry0.createNamedType("<,a-X", "<,a-X", 1791, 47);
      linkedList0.add(jSType0);
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.useSourceInfoIfMissingFrom(node0);
      node0.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("X3!]PL4v2");
      nodeArray0[0] = node0;
      Node node1 = new Node(1006, nodeArray0);
      Node node2 = new Node((-497), node1, 39, (-777));
      node0.putIntProp((-778), 3203);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      JSType jSType0 = jSTypeRegistry0.createNamedType("X3!]PL4v2", "X3!]PL4v2", 15, 16);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.add(jSType0);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node3 = null;
      try {
        node3 = new Node(35, node2, node1, (-1894), 1613);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable$1");
      Node node1 = new Node(29, 22, 2);
      Node node2 = new Node(2744, node1, node1);
      Node node3 = null;
      try {
        node3 = new Node((-781), node0, node1, 40, (-912));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newString("nyG=,2_7qOEk", 4, 24);
      node0.isFor();
      node0.isAdd();
      node0.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.javascript.rhino.Node$IntPropListItem", true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(52, node0, node0, node0, 8, 48);
      Node node2 = null;
      try {
        node2 = new Node(52, node1, node1, node0, node1, 8, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("6", "6", 1523, 1523);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      String string0 = "side_effect_flags";
      Node node0 = Node.newString("side_effect_flags");
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = new Node(50, node0, 4095, 12);
      Node node2 = new Node(1134, node1, node1, node1, 15, (-2691));
      Node node3 = null;
      try {
        node3 = new Node(1523, node0, node0, node2, node1, 1854, 8287);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, 4, 47);
      node2.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      node1.isInc();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("@^`H&|_q?v@p|o", false);
      Node node3 = null;
      try {
        node3 = new Node(1024, node1, node0, node0, node2, 53, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      node0.setIsSyntheticBlock(true);
      Node node2 = new Node(49, node0);
      // Undeclared exception!
      try { 
        node2.addChildrenToBack(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newString("nyG=,2_7qOEk", 4, 24);
      node0.isFor();
      node0.isAdd();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(29, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newString("JS@W9lS+'_GzsB", 24, (-1737));
      node0.isFor();
      node0.isAdd();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(32, nodeArray0);
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(43);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 43
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("X3!]PL4v2");
      nodeArray0[0] = node0;
      Node node1 = new Node(1006, nodeArray0);
      Node node2 = new Node((-497), node1, 39, (-777));
      ObjectType.cast((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType((String) null, node2, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newString("JS@W9lS+'_GzsB", 24, (-1737));
      node0.isFor();
      Node node1 = Node.newString(1048576, "W,");
      node0.getInputId();
      node1.setInputId((InputId) null);
      node1.copyInformationFromForTree(node0);
      node0.isDefaultCase();
      node0.isFor();
      node0.isEquivalentTo(node0);
      node0.isGetElem();
      // Undeclared exception!
      try { 
        node0.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.setCharno(23);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.isNew();
      Node node2 = new Node(4);
      node2.isRegExp();
      Node node3 = node2.copyInformationFrom(node1);
      node3.putIntProp(39, 42);
      node2.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 23, 0);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(true);
      Node.newNumber(3665.734554829, (-3675), 119);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, 4, 47);
      node2.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      node2.isOptionalArg();
      node1.addSuppression("Yw2");
      Node node3 = new Node(1395, (-85), 36);
      node2.isTry();
      int int0 = 2459;
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node0 = Node.newString((-951), "", (-2511), (-1610));
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 50, 50);
      node0.setLineno(50);
      Node node1 = Node.newString(42, "4J", 53, 2);
      node0.addChildrenToBack(node1);
      node1.isRegExp();
      Node node2 = node1.copyInformationFrom(node0);
      node0.putIntProp(41, 53);
      node1.isBlock();
      node1.isContinue();
      node2.isNot();
      node0.isCase();
      node1.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node.extractCharno((-1833));
      Node node0 = new Node(32);
      Node node1 = new Node(30, 2145, 44);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node1.setOptionalArg(false);
      node1.setIsSyntheticBlock(false);
      node1.isWith();
      node1.getInputId();
      node0.setInputId((InputId) null);
      node1.isSetterDef();
      node0.useSourceInfoIfMissingFrom(node1);
      node0.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(77, 77, 77);
      node0.isGetProp();
      Node node1 = Node.newString("kmgJ^3g;;@T~_", 4, 4);
      node0.clonePropsFrom(node1);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TRY 77 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((-2527.0));
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 23, 0);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.setCharno(23);
      Node.mergeLineCharNo(37, 30);
      node0.isNot();
      node0.toString(false, false, true);
      node1.isHook();
      node1.isObjectLit();
      node1.checkTreeEquals(node0);
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1521, 77, 32);
      Node node1 = Node.newString(3299, "");
      node0.srcref(node1);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newNumber(2219.630589947365, 93, 93);
      Node node1 = new Node(0, node0, 1, 147);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newNumber(1033.76, 6117, 6117);
      node0.getProp(6117);
      Node node1 = new Node((-2311), node0, 38, 1);
      Node node2 = node1.cloneNode();
      node0.useSourceInfoIfMissingFromForTree(node2);
      node0.isEquivalentTo(node1, true, true);
      node2.isOptionalArg();
      node0.addSuppression("2<9`'*YC");
      node0.srcref(node2);
      node2.isTry();
      node1.setSourceEncodedPositionForTree(53);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(objectType0, jSTypeArray0);
      linkedList0.add((JSType) functionType0);
      node0.putIntProp(0, 8);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      JSType jSType0 = jSTypeRegistry0.createNamedType("<,a-X", "<,a-X", 1791, 47);
      linkedList0.add(jSType0);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = new Node((-2163), node0, node0, 1, 48);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = new Node(46);
      int int0 = 0;
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node(49);
      node0.setLength(1455);
      node0.children();
      node0.setIsSyntheticBlock(true);
      node0.setOptionalArg(true);
      Node node1 = null;
      try {
        node1 = new Node(45, (Node[]) null, 93, 310);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(309, "Y`^QGpcDH)jM$X");
      Node node1 = new Node(309, node0, 2, 45);
      nodeArray0[0] = node1;
      Node node2 = Node.newString("Y`^QGpcDH)jM$X", (-2118), 4);
      nodeArray0[1] = node2;
      Node node3 = Node.newNumber((double) 1);
      nodeArray0[2] = node3;
      Node node4 = new Node(309, nodeArray0, 1298, 16);
      // Undeclared exception!
      try { 
        node4.replaceChild(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString("X3!]PL4v2");
      Node node1 = new Node(8, 3203, 4095);
      Node node2 = new Node(50, node0, node1, node1, node0, 2, 48);
      node1.setLength(29);
      Node node3 = node2.copyInformationFromForTree(node0);
      // Undeclared exception!
      try { 
        node3.setDouble(53);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = new Node(49);
      node0.setLength(1455);
      node0.children();
      node0.setIsSyntheticBlock(true);
      node0.setOptionalArg(true);
      Node.mergeLineCharNo(1623, 50);
      Node node1 = null;
      try {
        node1 = new Node(45, (Node[]) null, 93, 310);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createAnonymousObjectType();
      node0.setIsSyntheticBlock(true);
      Node node1 = Node.newString(4095, "=\"%h53");
      node0.getSideEffectFlags();
      Node node2 = Node.newString(12, "prev is not a child of this node.");
      node0.isDefaultCase();
      node1.isVoid();
      Node node3 = null;
      Node node4 = null;
      try {
        node4 = new Node(40, node1, (Node) null, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node.newString("8_&;1o?8Bq7QIa^'>@");
      // Undeclared exception!
      try { 
        node0.addChildrenToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      node0.getAncestors();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = new Node((-9), (-9), 1073741823);
      Node node1 = new Node(1755, node0, node0);
      node0.copyInformationFromForTree(node1);
      node1.getAncestors();
      Node node2 = null;
      // Undeclared exception!
      try { 
        node0.addChildrenToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newString("X3!]PL4v2");
      Node node1 = new Node(8, 3203, 4095);
      Node node2 = new Node(50, node0, node1, node1, node0, 2, 48);
      Node node3 = node2.copyInformationFromForTree(node0);
      // Undeclared exception!
      try { 
        node3.setDouble(53);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node(63, 147, (-2261));
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ARRAYLIT is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString("m;^tC", 53, 53);
      Node node1 = new Node(0, node0, node0, node0, (-1165), (-3540));
      Node node2 = null;
      try {
        node2 = new Node(8198, node0, node1, 31, 2619);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      node0.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      Node node2 = new Node(47);
      node1.isRegExp();
      Node node3 = node1.copyInformationFrom(node2);
      node0.isBlock();
      node0.isCatch();
      Node node4 = node1.useSourceInfoIfMissingFromForTree(node2);
      node4.hasChild(node3);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(1507, node0, node0, node0, 40, 1);
      node0.isWith();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isSetterDef();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(32);
      Node node1 = new Node(30, 2145, 44);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.setOptionalArg(false);
      node1.setIsSyntheticBlock(false);
      node1.isWith();
      node1.getInputId();
      node0.setInputId((InputId) null);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(52, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setOptionalArg(true);
      node0.setIsSyntheticBlock(true);
      node0.isWith();
      node0.getInputId();
      node2.setInputId((InputId) null);
      node1.isSetterDef();
      node2.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node.extractCharno((-1833));
      Node node0 = new Node(32);
      Node node1 = new Node(30, 2145, 44);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.setOptionalArg(false);
      node1.setIsSyntheticBlock(false);
      node1.isWith();
      node1.getInputId();
      node0.setInputId((InputId) null);
      node1.isSetterDef();
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = new Node(23, 23, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node1.removeProp(51);
      node0.getAncestor(47);
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 0
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = Node.newNumber(3755.633);
      Node node1 = new Node(0, node0, node0, 16, 38);
      node0.isEquivalentTo(node1);
      node1.cloneNode();
      // Undeclared exception!
      try { 
        node1.getAncestor((-1498));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      simpleErrorReporter0.error("|'3`o", "KF%)g'MM&", (-51), 19);
      Node node0 = Node.newNumber(2906.267216, (-51), 52);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newNumber(3755.633);
      node0.getDouble();
      Node node1 = new Node(0, node0, node0, node0);
      node0.isEquivalentTo(node1);
      node1.cloneNode();
      // Undeclared exception!
      try { 
        node1.getAncestor((-1498));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newString("8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(39, node0, node0);
      node0.addChildrenToBack(node1);
      node0.isFunction();
      node1.getQualifiedName();
      node0.setType(29);
      Node node2 = new Node(16);
      node0.getSourceFileName();
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(24, 0, 24);
      Node node1 = new Node(39, 31, 39);
      node1.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got DIV
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 23, 0);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.setCharno(23);
      Node.mergeLineCharNo(37, 30);
      node0.isNot();
      node0.toString(false, false, true);
      node1.isHook();
      node1.isObjectLit();
      node1.checkTreeEquals(node0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      node0.isFunction();
      node1.getQualifiedName();
      node0.setType(29);
      node1.isThis();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("", "", (-451), 377);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isGetProp();
      Node node1 = new Node(3286, node0, (-451), 8);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = new Node(49);
      node0.children();
      node0.setIsSyntheticBlock(true);
      node0.setOptionalArg(true);
      Node node1 = Node.newString("%;=/e+]oT-");
      node1.setWasEmptyNode(true);
      node1.checkTreeEqualsImpl(node0);
      node0.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node.extractLineno(2725);
      Node node0 = new Node(0);
      node0.isNoSideEffectsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node.newString(44, "8_&;1o?8Bq7QIa^'>@");
      node0.getSideEffectFlags();
      Node node1 = Node.newString(0, "8_&;1o?8Bq7QIa^'>@");
      node1.isDefaultCase();
      node0.isVoid();
      node0.isEquivalentTo(node1);
      node0.isGetElem();
      Node.extractCharno((-2470));
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(471);
      node0.isOnlyModifiesThisCall();
      node0.putBooleanProp(471, true);
      node0.addSuppression("d?+TfSoH3+>d~'ZzXi");
      node0.isFunction();
      node0.getQualifiedName();
      node0.setType(8);
      node0.isThis();
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(120);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setOptionalArg(true);
      node0.setIsSyntheticBlock(true);
      node0.isWith();
      node0.getInputId();
      node0.toStringTree();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      int int0 = (-4096);
      Node node0 = null;
      Node node1 = null;
      Node node2 = null;
      try {
        node2 = new Node((-4096), (Node) null, (Node) null, (Node) null, (-4096), (-4096));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("3 ~I2C_~", "3 ~I2C_~", (-451), 377);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = new Node(1109);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.addChildToBack(node1);
      Node.newString(47, "l>h@;");
      node1.setSourceEncodedPositionForTree(40);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = Node.newString(41, "");
      Node node1 = Node.newNumber((double) 16);
      Node.newNumber(0.0);
      node1.checkTreeEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.addSuppression("Q{-[Aa EVY");
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.setCharno(23);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.isNew();
      Node node2 = new Node(4);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putProp((-3673), node1);
      node1.isTry();
      Node node2 = Node.newString(43, "S$s^j8~a]3gT", 49, 1919);
      Node node3 = new Node(114, node2, node1, node1);
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node4.getProp(51);
      Node node5 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node5.getJsDocBuilderForNode();
      node3.isSwitch();
      node1.isDo();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node6 = null;
      try {
        node6 = new Node((-725), node5, node4, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isQuotedString();
      node0.setSourceFileForTesting("ARRAY_FUNCTION_TYPE");
      node0.putIntProp(2958, (-2171));
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = ",8";
      Node node0 = Node.newString(",8");
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = new Node(64, 64, 64);
      Node node1 = Node.newString("\n\nSubtree2: ", 1471, (-2764));
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.setIsSyntheticBlock(true);
      node1.addChildrenToBack(node1);
      node0.isDec();
      node1.isRegExp();
      node0.copyInformationFrom(node1);
      Node.extractCharno(1536);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = ",8";
      Node node0 = Node.newString(",8");
      Node node1 = new Node(0, node0, node0, node0);
      node1.putBooleanProp(440, true);
      Node node2 = node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      int int0 = 49;
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2476));
      Node node1 = new Node((-2476), node0, node0, node0);
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = 153;
      Node node0 = null;
      try {
        node0 = new Node(153, (Node) null, (Node) null, 153, 153);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      int int0 = 2384;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(2384, (Node) null, (Node) null, 2232, 2384);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("", 59, 43);
      node0.isInstanceOf();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList1);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createConstructorTypeWithVarArgs(objectType0, jSTypeArray0);
      linkedList1.add(jSTypeArray0[1]);
      node0.putIntProp(0, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      jSTypeRegistry0.createNamedType("q<.", "q<.", 15, 41);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = new Node(40, node0, node0, 53, 29);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node1.hasMoreThanOneChild();
      node2.hasOneChild();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(1507, node0, node0, node0, 40, 1);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node.extractCharno(1795);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = Node.newString((-127), "c");
      node1.isVarArgs();
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newNumber(1033.76, 6117, 0);
      node0.getProp(6117);
      Node node1 = new Node((-2311), node0, 38, 1);
      Node node2 = node1.cloneNode();
      node0.useSourceInfoIfMissingFromForTree(node2);
      node0.isEquivalentTo(node1, true, true);
      node0.addSuppression("2<9`'*YC");
      node0.srcref(node2);
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      String string0 = "Not declared as a constructor";
      node0.putProp((-870), "Not declared as a constructor");
      node0.hasOneChild();
      node0.isTry();
      Node node1 = Node.newString(40, "", 39, 50);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = Node.newNumber(615.8959804233466, 2, 2);
      node0.getAncestor(2);
      Node node1 = new Node(12, node0, node0);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = new Node(17, 17, 17);
      node0.getBooleanProp(17);
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error(">oCVcIoR(2N+v.X@:!", (String) null, 98, 98);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[2];
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1513, 77, 32);
      node0.setSourceFileForTesting("ZN@B[hV1oV");
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = new Node((-6423));
      node0.removeFirstChild();
      node0.isVarArgs();
      Node node1 = new Node((-6423), node0, node0, node0, node0);
      node1.getInputId();
      node0.isDec();
      node1.isInc();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = new Node((-1447));
      node0.removeFirstChild();
      node0.isVarArgs();
      Node node1 = null;
      try {
        node1 = new Node(54, (Node) null, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = new Node((-6423));
      node0.removeFirstChild();
      node0.isVarArgs();
      Node node1 = new Node((-6423), node0, node0, node0, node0);
      node1.getInputId();
      node0.isDec();
      node1.isInc();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node1.setStaticSourceFile(simpleSourceFile0);
      // Undeclared exception!
      try { 
        Node.newString(30, (String) null, 15, (-3896));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      Node node0 = new Node(49, 49, 4);
      node0.getJsDocBuilderForNode();
      node0.setLineno(2374);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertEquals(0, jSTypeArray0.length);
      assertNotNull(node0);
      
      Node node1 = new Node(1507, node0, node0, node0, 40, 1);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertFalse(node1.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertEquals(40, node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDec());
      assertEquals(1507, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDebugger());
      assertEquals(163841, node1.getSourcePosition());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertEquals(0, jSTypeArray0.length);
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newString(4023, "&!~<vP\"9\"", 4023, (-1274));
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals(4023, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertNotNull(node0);
      
      Node node1 = node0.removeChildren();
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals(4023, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertNull(node1);
      
      boolean boolean0 = node0.isLocalResultCall();
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals(4023, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(boolean0);
      
      Node node2 = new Node(50, node0, 46, 16);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals(4023, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isLabel());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertEquals(50, node2.getType());
      assertFalse(node2.isComma());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isVoid());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isHook());
      assertEquals(46, node2.getLineno());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThis());
      assertEquals(16, node2.getCharno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFunction());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertEquals(188432, node2.getSourcePosition());
      assertNotNull(node2);
      
      // Undeclared exception!
      try { 
        node0.addChildrenToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.javascript.rhino.Node$IntPropListItem", true);
      assertTrue(simpleSourceFile0.isExtern());
      assertEquals("com.google.javascript.rhino.Node$IntPropListItem", simpleSourceFile0.getName());
      assertEquals("com.google.javascript.rhino.Node$IntPropListItem", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      Node node0 = new Node((-85), (-85), (-85));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertEquals((-85), node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertNotNull(node0);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertEquals((-85), node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertNotNull(node_FileLevelJsDocBuilder0);
      
      node0.setLineno(50);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertEquals((-85), node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(204800, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertEquals(50, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1521, 77, 32);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertEquals(32, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals(77, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertEquals(315424, node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isExprResult();
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertEquals(32, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals(77, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertEquals(315424, node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = Node.newString("", 752, (-1112));
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      Node node1 = new Node((-1112), node0, node0, (-1), 12);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isComma());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertEquals((-1112), node1.getType());
      assertFalse(node1.isThrow());
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      int int0 = Node.extractCharno((-1678));
      assertEquals(2418, int0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 50, 50);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals(39, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQualifiedName());
      assertEquals(50, node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals(204850, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertEquals(50, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertNotNull(node0);
      
      node0.setLineno(50);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals(39, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQualifiedName());
      assertEquals(50, node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals(204850, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertEquals(50, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      
      boolean boolean0 = node0.isLocalResultCall();
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals(39, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQualifiedName());
      assertEquals(50, node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals(204850, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertEquals(50, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(boolean0);
      
      Node node1 = new Node(49, node0, node0, 16, 0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals(39, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQualifiedName());
      assertEquals(50, node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals(204850, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertEquals(50, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(65536, node1.getSourcePosition());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isIf());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertEquals(49, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      simpleErrorReporter0.warning("x2R;))CO'pPSi1R", "x2R;))CO'pPSi1R", 43, 43);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newString("com.google.common.io.PatternFilenameFilter");
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      int int0 = 471;
      Node node0 = Node.newString(471, "d?+TfSoH3+>d~'ZzXi");
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isContinue());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(471, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertNotNull(node0);
      
      String string0 = "kA$rwc3:Bt,=f";
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((-262), (String) null, (-262), 54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(0, jSTypeArray0.length);
      assertNotNull(node0);
      
      boolean boolean0 = node0.isAdd();
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(0, jSTypeArray0.length);
      assertFalse(boolean0);
      
      Node node1 = new Node((-1523), node0, node0, node0, node0, 12, 15);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertFalse(node1.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node1.isAdd());
      assertEquals(12, node1.getLineno());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDec());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertEquals(15, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertEquals((-1523), node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertEquals(49167, node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(0, jSTypeArray0.length);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = new Node(1620, (-2538), (-2538));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(1620, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = new Node(1620, node0, node0, node0, node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(1620, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCase());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertEquals(1620, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertNotNull(node1);
      
      node1.setOptionalArg(true);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(1620, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCase());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertEquals(1620, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int int0 = (-1950);
      int int1 = (-4229);
      Node[] nodeArray0 = new Node[1];
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node((-4229), (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      int int0 = (-3553);
      Node[] nodeArray0 = new Node[1];
      int int1 = 0;
      Node node0 = null;
      try {
        node0 = new Node(0, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.newString((-14), "e}e8OQ.!i*W'}\"", (-14), 36);
      node0.getString();
      int int0 = (-1285);
      Node node1 = Node.newString(2359, "", 0, (-1285));
      node1.children();
      node0.getDirectives();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.flush();
      // Undeclared exception!
      try { 
        node1.appendStringTree(pipedWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2359
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = new Node((-4224), (-4224), (-4224));
      Node node1 = null;
      try {
        node1 = new Node(38, node0, node0, (Node) null, (Node) null, 1267, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(4095, 4, 47);
      node2.setSourceFileForTesting("8_&;1o?8Bq7QIa^'>@");
      node2.setLineno(50);
      node1.getStaticSourceFile();
      node2.copyInformationFromForTree(node1);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node2.putIntProp(16, 2609);
      boolean boolean0 = node0.isThrow();
      assertTrue(node0.hasOneChild());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = new Node(23, 0, 23);
      Node node1 = Node.newNumber((double) 51);
      node1.setWasEmptyNode(false);
      node0.addChildrenToBack(node1);
      node1.isDec();
      node1.isNew();
      Node node2 = new Node(4);
      node2.isRegExp();
      Node node3 = node2.copyInformationFrom(node1);
      node3.getInputId();
      assertEquals((-1), node3.getCharno());
      assertTrue(node3.isReturn());
      
      String string0 = node0.toStringTree();
      assertEquals("MUL 0\n    NUMBER 51.0\n", string0);
      
      node0.getFirstChild();
      assertEquals(23, node0.getSourcePosition());
      assertEquals(23, node0.getType());
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newString(46, "DR3iy/l@ZBz", 1298, 46);
      Node node1 = new Node(46, node0, node0, node0);
      node0.isOnlyModifiesThisCall();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.type = (-435);
      node1.isSwitch();
      assertEquals((-435), node1.getType());
      
      node0.getInputId();
      node0.toStringTree();
      node0.getFirstChild();
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newString(27, "!cZUdV]EF>C@", 27, 27);
      // Undeclared exception!
      try { 
        node0.addChildToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = Node.newString(49, "k#AvCa'0kBG^hP=-)#+");
      node0.isObjectLit();
      Node node1 = Node.newString("k#AvCa'0kBG^hP=-)#+");
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = new Node(49);
      node0.setLength(1455);
      node0.children();
      node0.setIsSyntheticBlock(true);
      node0.setOptionalArg(true);
      Node node1 = Node.newString("%;=/e+]oT-");
      node0.hasChild(node1);
      assertEquals(40, node1.getType());
      assertTrue(node0.isThrow());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.detachChildren();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node", 48, 48);
      node0.hasChildren();
      assertEquals(196656, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = new Node(5340);
      int int0 = node0.getIntProp(5340);
      assertEquals(5340, node0.getType());
      assertEquals(0, int0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = new Node((-1423));
      boolean boolean0 = node0.isGetProp();
      assertEquals((-1423), node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      Node node1 = new Node(41);
      node0.addChildrenToBack(node1);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NULL is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1521, 77, 32);
      node0.getDirectives();
      node0.isExprResult();
      assertEquals(315424, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      int int0 = 49;
      Node node0 = Node.newString(49, "8_&;1o?8Bq7QIa^'>@", 49, 49);
      node0.addChildrenToBack(node0);
      node0.getString();
      boolean boolean0 = true;
      node0.children();
      Node node1 = null;
      try {
        node1 = new Node(32, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.newString(0, "e}e8OQ.!i*W'}\"", 0, 36);
      node0.getString();
      Node node1 = Node.newString(2359, "", 0, (-1285));
      node1.children();
      node0.getDirectives();
      PipedReader pipedReader0 = new PipedReader(4095);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.flush();
      // Undeclared exception!
      try { 
        node1.appendStringTree(pipedWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2359
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }
}

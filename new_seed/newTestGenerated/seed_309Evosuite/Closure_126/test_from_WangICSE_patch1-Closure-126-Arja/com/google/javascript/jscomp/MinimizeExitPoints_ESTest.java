/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 21:42:04 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.GroupVariableDeclarations;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MinimizeExitPoints;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MinimizeExitPoints_ESTest extends MinimizeExitPoints_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(12);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      minimizeExitPoints0.tryMinimizeExits(node0, 12, "|*B~HNPw\"/=3P#Tx%");
      assertFalse(node0.isSetterDef());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node(114);
      Node node1 = new Node(40);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node(113);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, (ScopeCreator) null);
      Node node1 = new Node(46);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node((-1224));
      Node node1 = Node.newNumber((-1.0));
      minimizeExitPoints0.process(node0, node1);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.process((Node) null, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
      Node node0 = new Node((-192), (-192), (-192));
      // Undeclared exception!
      try { 
        minimizeExitPoints0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0, (ScopeCreator) null);
      Node node0 = new Node((-2));
      minimizeExitPoints0.visit(nodeTraversal0, node0, node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node((-3491));
      Node node1 = new Node(1, node0, 51, 4095);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node1, 1, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3491
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node((-2));
      node0.setType(126);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, (-1508), "L(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node(77);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, 12, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(108);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, 38, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node((-3491));
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, (-3491), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node((-2));
      minimizeExitPoints0.tryMinimizeExits(node0, 102, "^A#zdUf");
      assertFalse(node0.isHook());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node((-1644), (-1644), (-3510));
      Node node1 = new Node(126, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1644
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0, syntacticScopeCreator0);
      Node node0 = new Node(115);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, syntacticScopeCreator0);
      Node node0 = new Node(105);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }
}

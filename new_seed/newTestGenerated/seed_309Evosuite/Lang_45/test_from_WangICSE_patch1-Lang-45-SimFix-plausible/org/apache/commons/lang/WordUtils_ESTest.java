/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 18:42:27 GMT 2023
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang.WordUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WordUtils_ESTest extends WordUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = WordUtils.abbreviate(" is less than 0: ", 16, (-4032), "SunOS");
      assertEquals(" is less than 0:SunOS", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = WordUtils.abbreviate("'; the SystemUtils property value will default to null.", 2, 2, "'; the SystemUtils property value will default to null.");
      assertEquals("';'; the SystemUtils property value will default to null.", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = WordUtils.abbreviate("5.0", 0, 3022, "");
      assertEquals("5.0", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = WordUtils.abbreviate("Windows 9", 12, 9, (String) null);
      assertEquals("Windows 9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = WordUtils.wrap("I4NiW ", 0, "I4niw ", true);
      assertEquals("II4niw 4I4niw NI4niw iI4niw WI4niw ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = WordUtils.abbreviate("N}EuXVK 7D)B8YWD", (-3579), 3, "");
      assertEquals("N}E", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = WordUtils.wrap("", (-523), "", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = WordUtils.wrap("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("%+a^QM0;jrS}4U#<");
      assertEquals("%+a^qm0;jrs}4u#<", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = WordUtils.capitalize("z5AQ&");
      assertEquals("Z5AQ&", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = WordUtils.wrap("pp@qCL|oYRkU~>^*.Ma@p@qCL|oYRkU~>^*.Maqp@qCL|oYRkU~>^*.MaCp@qCL|oYRkU~>^*.MaLp@qCL|oYRkU~>^*.Ma|p@qCL|oYRkU~>^*.Maop@qCL|oYRkU~>^*.MaYp@qCL|oYRkU~>^*.MaRp@qCL|oYRkU~>^*.Makp@qCL|oYRkU~>^*.MaUp@qCL|oYRkU~>^*.Ma~p@qCL|oYRkU~>^*.Ma>p@qCL|oYRkU~>^*.Ma^p@qCL|oYRkU~>^*.Ma*p@qCL|oYRkU~>^*.Ma.p@qCL|oYRkU~>^*.MaMp@qCL|oYRkU~>^*.Maa", (-2167), "pp@qCL|oYRkU~>^*.Ma@p@qCL|oYRkU~>^*.Maqp@qCL|oYRkU~>^*.MaCp@qCL|oYRkU~>^*.MaLp@qCL|oYRkU~>^*.Ma|p@qCL|oYRkU~>^*.Maop@qCL|oYRkU~>^*.MaYp@qCL|oYRkU~>^*.MaRp@qCL|oYRkU~>^*.Makp@qCL|oYRkU~>^*.MaUp@qCL|oYRkU~>^*.Ma~p@qCL|oYRkU~>^*.Ma>p@qCL|oYRkU~>^*.Ma^p@qCL|oYRkU~>^*.Ma*p@qCL|oYRkU~>^*.Ma.p@qCL|oYRkU~>^*.MaMp@qCL|oYRkU~>^*.Maa", true);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      WordUtils.initials(string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = WordUtils.initials("J%r;JU.p7~{l4 vCB", (char[]) null);
      assertEquals("Jv", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = WordUtils.initials((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = WordUtils.initials("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[6] = ' ';
      String string0 = WordUtils.uncapitalize(" >", charArray0);
      assertEquals(" >", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[27];
      String string0 = WordUtils.uncapitalize("B,J31rc9x}?)m/X#.g'", charArray0);
      assertEquals("b,J31rc9x}?)m/X#.g'", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = WordUtils.uncapitalize((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = WordUtils.uncapitalize("", (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = WordUtils.capitalizeFully("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalizeFully((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("|hyl8d_", (char[]) null);
      assertEquals("|hyl8d_", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalize((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = WordUtils.capitalize("1?On#m93cPpy e5nyk9", (char[]) null);
      assertEquals("1?On#m93cPpy E5nyk9", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = WordUtils.wrap("U4fCq", 3, "Rk4]P1mFSB(3TEV+&X%", false);
      assertEquals("U4fCq", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = WordUtils.wrap(" >", (-1), "java.runtime.version", false);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = WordUtils.wrap("(WqX#", 0, (String) null, true);
      assertEquals("(\nW\nq\nX\n#", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, 0, "%UOu]/E", true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        WordUtils.abbreviate(" >", (-682), (-682), " >");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = WordUtils.abbreviate("@GTdP( ytCg|P9", (-1), (-1), "@GTdP( ytCg|P9");
      assertEquals("@GTdP(@GTdP( ytCg|P9", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = WordUtils.abbreviate("", 1197, 1197, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = WordUtils.abbreviate((String) null, 5, 5, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = WordUtils.abbreviate("org.apache.commons.lang.WordUtils", 2, (-1560), "Search and Replace array lengths don't match: ");
      assertEquals("orSearch and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      String string0 = WordUtils.initials("Windows 9", charArray0);
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.initials("{>O", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = WordUtils.initials("AIX");
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = WordUtils.initials((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = WordUtils.swapCase("Search and Replace array lengths don't match: ");
      assertEquals("sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = WordUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = WordUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = WordUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = WordUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.uncapitalize("kaDpxtcx$Q[r>U,{_k", charArray0);
      assertEquals("kaDpxtcx$Q[r>U,{_k", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalizeFully("ygT", charArray0);
      assertEquals("ygT", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      String string0 = WordUtils.capitalizeFully("hTNg}USxPzB\n!go", charArray0);
      assertEquals("Htng}usxpzB\n!go", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalize("inTdYq^`Bo4", charArray0);
      assertEquals("inTdYq^`Bo4", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = WordUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = WordUtils.capitalize("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = WordUtils.wrap("hTNg}USxPzB\n!go", (-1688), "<I", true);
      assertEquals("h<IT<IN<Ig<I}<IU<IS<Ix<IP<Iz<IB<I\n<I!<Ig<Io", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = WordUtils.wrap("= ", (-3447));
      assertEquals("=\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = WordUtils.wrap("O_:hYzC<p 9\"", 2);
      assertNotNull(string0);
      assertEquals("O_:hYzC<p\n9\"", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = WordUtils.wrap("sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ", (-3634), "t", false);
      assertEquals("sEARCHtANDtrEPLACEtARRAYtLENGTHStDON'TtMATCH:t", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, 6239);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      WordUtils wordUtils0 = new WordUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = WordUtils.uncapitalize(" }|L]6wM#");
      assertEquals(" }|L]6wM#", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = WordUtils.initials("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = WordUtils.capitalize("");
      assertEquals("", string0);
  }
}

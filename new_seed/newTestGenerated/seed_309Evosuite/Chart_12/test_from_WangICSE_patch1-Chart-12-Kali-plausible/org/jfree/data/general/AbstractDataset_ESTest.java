/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 16:50:41 GMT 2023
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.CombinedDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.SeriesDataset;
import org.jfree.data.general.SubSeriesDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.XYBarDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractDataset_ESTest extends AbstractDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      combinedDataset0.fireDatasetChanged();
      assertEquals(0, combinedDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(566, 1698);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(defaultValueDataset0, waferMapDataset0);
      defaultKeyedValueDataset0.notifyListeners(datasetChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-2));
      defaultKeyedValuesDataset0.addChangeListener(categoryToPieDataset0);
      assertEquals((-2), categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      Object object0 = combinedDataset0.clone();
      assertNotSame(object0, combinedDataset0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-2623), (-2623));
      // Undeclared exception!
      try { 
        waferMapDataset0.setGroup((DatasetGroup) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'group' argument.
         //
         verifyException("org.jfree.data.general.AbstractDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(combinedDataset0, (-877));
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(subSeriesDataset0, true);
      combinedDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        combinedDataset0.fireDatasetChanged();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(10, 10);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(combinedDataset0);
      waferMapDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(10, waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2, 2);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(combinedDataset0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(combinedDataset0, 0.0);
      waferMapDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(combinedDataset0, 0.0);
      XYBarDataset xYBarDataset1 = new XYBarDataset(combinedDataset0, 0.0);
      combinedDataset0.add((SeriesDataset) xYBarDataset1);
      assertEquals(0.0, xYBarDataset1.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      DatasetGroup datasetGroup0 = defaultValueDataset0.getGroup();
      defaultValueDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      boolean boolean0 = combinedDataset0.hasListener((EventListener) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.validateObject();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 03 21:28:14 GMT 2023
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "");
      Locale locale0 = new Locale("", "-8-r9UqBl1");
      FastDateParser fastDateParser0 = new FastDateParser("s30.4.Ex(9Lt]+1)!", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      Object object0 = fastDateParser0.parseObject("-8-r9UqBl1", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1896), "/nzzgR~'");
      Locale locale0 = new Locale("MIT", "/nzzgR~'", "/nzzgR~'");
      FastDateParser fastDateParser0 = new FastDateParser("S~3>.h4?[", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "");
      Locale locale0 = new Locale("", "-8-r9UqBl1");
      FastDateParser fastDateParser0 = new FastDateParser("s30.4.Ex(9Lt]+1)!", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1896), "I+=6<'$EY<qc+o");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("/nzzgR~'", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4280), "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-4280));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[Q']*#)*+'|[^'A-Za-z]++", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1896), "=W(d+,]5+%I<");
      ParsePosition parsePosition0 = new ParsePosition((-1896));
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("=W(d+,]5+%I<", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("=W(d+,]5+%I<", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("/fnzgR~", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("/fnzgR~", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("5NVHh`/~@y%..AMZKP", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("SY*ir!", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("6(mMlL[EI[4o+u[", timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1896), "Unparseable date: \"");
      Locale locale0 = Locale.forLanguageTag("GMTPNT");
      FastDateParser fastDateParser0 = new FastDateParser("d3,}KVy(tjZ<j", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("Unparseable date: \"", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("^'LL:}cHoB:m]9--o", timeZone0, locale0);
      fastDateParser0.parse("^'LL:}cHoB:m]9--o", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("z@hW9vH(ldb/r9W", timeZone0, locale0);
      try { 
        fastDateParser0.parse("z@hW9vH(ldb/r9W");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"z@hW9vH(ldb/r9W\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan Time|AFT|AKDT|AKST|Alaska Daylight Time|Alaska Standard Time|Alma-Ata Time|ALMT|Amazon Summer Time|Amazon Time|AMST|AMT|Anadyr Time|ANAT|Aqtau Time|Aqtobe Time|AQTT|Arabia Standard Time|Argentine Time|Armenia Time|ART|AST|Atlantic Daylight Time|Atlantic Standard Time|Australian Central Daylight Time \\(South Australia\\)|Australian Central Daylight Time \\(South Australia/New South Wales\\)|Australian Central Standard Time \\(Northern Territory\\)|Australian Central Standard Time \\(South Australia\\)|Australian Central Standard Time \\(South Australia/New South Wales\\)|Australian Central Western Standard Time|Australian Eastern Daylight Time \\(New South Wales\\)|Australian Eastern Daylight Time \\(Tasmania\\)|Australian Eastern Daylight Time \\(Victoria\\)|Australian Eastern Standard Time \\(New South Wales\\)|Australian Eastern Standard Time \\(Queensland\\)|Australian Eastern Standard Time \\(Tasmania\\)|Australian Eastern Standard Time \\(Victoria\\)|Australian Western Standard Time|AWST|Azerbaijan Summer Time|Azerbaijan Time|Azores Summer Time|Azores Time|AZOST|AZOT|AZST|AZT|Bangladesh Time|BDT|Bhutan Time|BNT|Bolivia Time|BOT|Bougainville Standard Time|Brasilia Summer Time|Brasilia Time|British Summer Time|BRST|BRT|Brunei Time|BST|BTT|Cape Verde Time|CAT|CCT|CDT|Central African Time|Central Daylight Time|Central European Summer Time|Central European Time|Central Indonesia Time|Central Standard Time|CEST|CET|CHADT|Chamorro Standard Time|CHAST|Chatham Daylight Time|Chatham Standard Time|Chile Time|China Standard Time|Choibalsan Time|CHOT|Christmas Island Time|ChST|CHUT|Chuuk Time|CKT|CLT|Cocos Islands Time|Colombia Time|Cook Is\\. Time|Coordinated Universal Time|COT|CST|Cuba Daylight Time|Cuba Standard Time|CVT|CXT|Davis Time|DAVT|DDUT|Dumont-d'Urville Time|EAST|East Indonesia Time|Easter Is\\. Time|Eastern African Time|Eastern Daylight Time|Eastern European Summer Time|Eastern European Time|Eastern Greenland Summer Time|Eastern Greenland Time|Eastern Standard Time|EAT|ECT|Ecuador Time|EDT|EEST|EET|EGST|EGT|EST|Falkland Is\\. Time|Fernando de Noronha Time|Fiji Summer Time|Fiji Time|FJST|FJT|FKT|FNT|French Guiana Time|French Southern & Antarctic Lands Time|Galapagos Time|GALT|Gambier Time|GAMT|Georgia Time|GET|GFT|Ghana Mean Time|Gilbert Is\\. Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich Mean Time|GST|Gulf Standard Time|Guyana Time|GYT|HADT|HAST|Hawaii Standard Time|Hawaii-Aleutian Daylight Time|Hawaii-Aleutian Standard Time|HKT|Hong Kong Time|Hovd Time|HOVT|HST|ICT|IDT|India Standard Time|Indian Ocean Territory Time|Indochina Time|IOT|Iran Daylight Time|Iran Standard Time|IRDT|Irish Summer Time|IRKT|Irkutsk Time|IRST|Israel Daylight Time|Israel Standard Time|IST|Japan Standard Time|JST|KGT|Khandyga Time|Kirgizstan Time|Korea Standard Time|Kosrae Time|KOST|Krasnoyarsk Time|KRAT|KST|LHDT|LHST|Line Is\\. Time|LINT|Lord Howe Daylight Time|Lord Howe Standard Time|Macquarie Island Standard Time|Magadan Time|MAGT|Malaysia Time|Maldives Time|Marquesas Time|Marshall Islands Time|MART|Mauritius Time|Mawson Time|MAWT|MDT|MEST|MET|MHT|Middle Europe Summer Time|Middle Europe Time|MIST|MMT|Moscow Standard Time|Mountain Daylight Time|Mountain Standard Time|MSK|MST|MUT|MVT|Myanmar Time|MYT|Nauru Time|NCT|NDT|Nepal Time|New Caledonia Time|New Zealand Daylight Time|New Zealand Standard Time|Newfoundland Daylight Time|Newfoundland Standard Time|NFT|Niue Time|Norfolk Time|Novosibirsk Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk Time|OMST|Oral Time|ORAT|Pacific Daylight Time|Pacific Standard Time|Pakistan Time|Palau Time|Papua New Guinea Time|Paraguay Summer Time|Paraguay Time|PDT|Peru Time|PET|Petropavlovsk-Kamchatski Time|PETT|PGT|Philippines Time|Phoenix Is\\. Time|PHOT|PHT|Pierre & Miquelon Daylight Time|Pierre & Miquelon Standard Time|Pitcairn Standard Time|PKT|PMDT|PMST|Pohnpei Time|PONT|PST|PWT|PYST|PYT|QYZT|Qyzylorda Time|RET|Reunion Time|Rothera Time|ROTT|Sakhalin Time|SAKT|Samara Time|Samoa Standard Time|SAMT|SAST|SBT|SCT|Seychelles Time|SGT|Singapore Time|Solomon Is\\. Time|South Africa Standard Time|South Georgia Standard Time|Srednekolymsk Time|SRET|SRT|SST|Suriname Time|SYOT|Syowa Time|Tahiti Time|TAHT|Tajikistan Time|TFT|Timor-Leste Time|TJT|TKT|TLT|TMT|Tokelau Time|Tonga Time|TOT|Turkmenistan Time|Tuvalu Time|TVT|Ulaanbaatar Time|ULAT|Uruguay Summer Time|Uruguay Time|Ust-Nera Time|UTC|UYST|UYT|Uzbekistan Time|UZT|Vanuatu Time|Venezuela Time|VET|Vladivostok Time|VLAT|VOST|Vostok Time|VUT|Wake Time|WAKT|Wallis & Futuna Time|WAST|WAT|WEST|West Indonesia Time|West Samoa Daylight Time|West Samoa Standard Time|Western African Summer Time|Western African Time|Western European Summer Time|Western European Time|Western Greenland Summer Time|Western Greenland Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang Standard Time|XJT|YAKT|Yakutsk Time|Yekaterinburg Time|YEKT)@(\\p{IsNd}{1}+)(\\p{IsNd}{1}+)9
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("5~`4o+=", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("5~`4o+=");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("`", timeZone0, locale0);
      assertEquals("`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("F<,45", timeZone0, locale0);
      assertEquals("F<,45", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-47), ":KAY}5adMRlsR");
      Locale locale0 = Locale.forLanguageTag(":KAY}5adMRlsR");
      FastDateParser fastDateParser0 = new FastDateParser(":KAY}5adMRlsR", simpleTimeZone0, locale0);
      assertEquals(":KAY}5adMRlsR", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("8-=2<", timeZone0, locale0);
      assertEquals("8-=2<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("6fb\"~H)vL`t?Q] ", timeZone0, locale0);
      assertEquals("6fb\"~H)vL`t?Q] ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1370, "GMTCAT");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("5(D>@X$[);xH", simpleTimeZone0, locale0);
      assertEquals("5(D>@X$[);xH", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("2^aFwg2");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("2^aFwg2", timeZone0, locale0);
      assertEquals("2^aFwg2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("GMTAET", "GMTAET", "GMTAET");
      FastDateParser fastDateParser0 = new FastDateParser("1-xXv.Eb2:=~3#gj", timeZone0, locale0);
      assertEquals("1-xXv.Eb2:=~3#gj", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("0TI<x[_nF<\"", timeZone0, locale0);
      assertEquals("0TI<x[_nF<\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("k-k]4kRTj+GP", timeZone0, locale0);
      assertEquals("k-k]4kRTj+GP", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-k94SQ 0,0T");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("*<CkMG$", timeZone0, locale0);
      assertEquals("*<CkMG$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(";y7(t79rq6CD", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3131));
      assertEquals((-1131), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("z@hW9vH(l`b/r9W", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(516);
      assertEquals(2416, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("/{(ybmBL4.|;>_HhvC", timeZone0, locale0);
      assertEquals("/{(ybmBL4.|;>_HhvC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("a.:*>`T`<ZTD3zpTk`p", timeZone0, locale0);
      assertEquals("a.:*>`T`<ZTD3zpTk`p", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("_)K\"$0S]~LE", timeZone0, locale0);
      assertEquals("_)K\"$0S]~LE", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("z@hW9vH(l`b/r9W", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("z@hW9vH(l`b/r9W");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"z@hW9vH(l`b/r9W\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMST|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZST|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRST|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HADT|HAST|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Ora del Bangladesh|Ora del Bhutan|Ora del Brasile|Ora del Brunei|Ora del Cile|Ora del Kirghizistan|Ora del Nepal|Ora del Pakistan|Ora del Paraguay|Ora del Per\u00F9|Ora del Tagikistan|Ora del Terr\\. Britannico dell'Oceano Indiano|Ora del Turkmenistan|Ora del Venezuela|Ora dell'Afghanistan|Ora dell'Africa centrale|Ora dell'Africa occidentale|Ora dell'Africa orientale|Ora dell'Argentina|Ora dell'Armenia|Ora dell'Azerbaigian|Ora dell'Ecuador|Ora dell'Europa centrale|Ora dell'Europa occidentale|Ora dell'Europa orientale|Ora dell'Indocina|Ora dell'Indonesia centrale|Ora dell'Indonesia occidentale|Ora dell'Indonesia orientale|Ora dell'Isola Christmas|Ora dell'Isola della Fenice|Ora dell'Isola di Pasqua|Ora dell'Isola Macquarie|Ora dell'Uruguay|Ora dell'Uzbekistan|Ora della Birmania/Myanmar|Ora della Bolivia|Ora della Colombia|Ora della Georgia|Ora della Groenlandia occidentale|Ora della Groenlandia orientale|Ora della Guyana|Ora della Guyana Francese|Ora della Malaysia|Ora della Nuova Caledonia|Ora delle Azzorre|Ora delle Falkland|Ora delle Filippine|Ora delle Galapagos|Ora delle Isole Cocos|Ora delle Isole Cook|Ora delle Isole Gilbert|Ora delle Isole Marchesi|Ora delle Isole Marshall|Ora delle Isole Salomone|Ora delle Line Islands|Ora delle Maldive|Ora delle Seychelles|Ora delle Terre Australi e Antartiche Francesi|Ora di Acre|Ora di Alma-Ata|Ora di Anadyr|Ora di Aqtau|Ora di Aqtobe|Ora di Capo Verde|Ora di Chatham standard|Ora di Choibalsan|Ora di Chuuk|Ora di Davis|Ora di Dumont-d'Urville|Ora di Ekaterinburg|Ora di Fernando de Noronha|Ora di Figi|Ora di Gambier|Ora di Hong Kong|Ora di Hovd|Ora di Irkutsk|Ora di Jakutsk|Ora di Khandyga|Ora di Kosrae|Ora di Krasnojarsk|Ora di Magadan|Ora di Mauritius|Ora di Mawson|Ora di Nauru|Ora di Niue|Ora di Norfolk|Ora di Novosibirsk|Ora di Omsk|Ora di Oral|Ora di Palau|Ora di Papua Nuova Guinea|Ora di Petropavlovsk-Kamchatski|Ora di Pohnpei|Ora di Qyzylorda|Ora di Reunion|Ora di Rothera|Ora di Sakhalin|Ora di Samara|Ora di Samoa|Ora di Singapore|Ora di Suriname|Ora di Syowa|Ora di Tahiti|Ora di Timor Leste|Ora di Tokelau|Ora di Tonga|Ora di Tuvalu|Ora di Ulaanbaatar|Ora di Ust-Nera|Ora di Vanuatu|Ora di Vladivostok|Ora di Vostok|Ora di Wake|Ora di Wallis e Futuna|Ora estiva britannica|Ora estiva centrale \\(Australia del Sud\\)|Ora estiva centrale \\(Australia del Sud/Nuovo Galles del Sud\\)|Ora estiva del Brasile|Ora estiva del Paraguay|Ora estiva dell'Africa occidentale|Ora estiva dell'Amazzonia|Ora estiva dell'Australia orientale \\(Nuovo Galles del Sud\\)|Ora estiva dell'Azerbaigian|Ora estiva dell'Europa centrale|Ora estiva dell'Europa occidentale|Ora estiva dell'Europa orientale|Ora estiva dell'Uruguay|Ora estiva della Groenlandia occidentale|Ora estiva della Groenlandia orientale|Ora estiva delle Azzorre|Ora estiva di Figi|Ora estiva di Lord Howe|Ora estiva di Samoa|Ora estiva irlandese|Ora estiva orientale \\(Tasmania\\)|Ora estiva orientale \\(Victoria\\)|Ora legale Cuba|Ora legale dell'Alaska|Ora legale dell'Atlantico occidentale|Ora legale della costa occidentale USA|Ora legale della Nuova Zelanda|Ora legale di Chatham|Ora legale di Israele|Ora legale di Saint-Pierre e Miquelon|Ora legale di Terranova|Ora legale Iran|Ora legale USA centrale|Ora legale USA occidentale|Ora legale USA orientale|Ora media del Ghana|Ora media di Greenwich|Ora solare Cuba|Ora solare del Giappone|Ora solare del golfo|Ora solare del Sudafrica|Ora solare dell'Alaska|Ora solare dell'Amazzonia|Ora solare dell'Arabia|Ora solare dell'Atlantico occidentale|Ora solare dell'India|Ora solare della Cina|Ora solare della Corea|Ora solare della costa occidentale USA|Ora solare della Georgia Australe|Ora solare della Nuova Zelanda|Ora solare delle Isole Hawaii|Ora solare delle Isole Hawaii-Aleutine|Ora solare di Saint-Pierre e Miquelon|Ora solare di Terranova|Ora solare Iran|Ora solare USA centrale|Ora solare USA occidentale|Ora solare USA orientale|Ora standard Australia centro-occidentale|Ora standard centrale \\(Australia del Sud\\)|Ora standard centrale \\(Australia del Sud/Nuovo Galles del Sud\\)|Ora standard centrale \\(Territori del Nord\\)|Ora standard dell'Australia occidentale|Ora standard dell'Australia orientale \\(Nuovo Galles del Sud\\)|Ora standard di Chamorro|Ora standard di Israele|Ora standard di Lord Howe|Ora standard di Mosca|Ora standard di Pitcairn|Ora standard di Samoa|Ora standard orientale \\(Queensland\\)|Ora standard orientale \\(Tasmania\\)|Ora standard orientale \\(Victoria\\)|ORAT|PDT|PET|PETT|PGT|PHOT|PHT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|TAHT|Tempo universale coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYST|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAST|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)@(\\p{IsNd}{1}+)(\\p{IsNd}{1}+)9
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTNET", timeZone0, locale0);
      Locale locale1 = Locale.KOREAN;
      FastDateParser fastDateParser1 = new FastDateParser("GMTNET", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("/fnzgR~", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTAET", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1896), "=W(d+,]5+%I<");
      Locale locale0 = new Locale("MIT", "=W(d+,]5+%I<", "/nzzgR~'");
      FastDateParser fastDateParser0 = new FastDateParser("!S~;3W>.vh4?[", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("!S~;3W>.vh4?[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("sc@3Tf)ou'>", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1896), "=W(d+,]5+%I<");
      Locale locale0 = new Locale("MIT", "=W(d+,]5+%I<", "/nzzgR~'");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Xrv", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("z@hW9vH(l`b/r9W", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("?k'Kre4c>@|Qt8", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(")ebsb7\">Z\"K`irq", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals(")ebsb7\">Z\"K`irq", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("z@hW9vH(l`b/r9W", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("z@hW9vH(l`b/r9W", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2756), "km,Vl a}`cDw}??=n,");
      Locale locale0 = Locale.forLanguageTag("km,Vl a}`cDw}??=n,");
      FastDateParser fastDateParser0 = new FastDateParser("km,Vl a}`cDw}??=n,", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[km,Vl a}`cDw}??=n,,,km,Vl a}`cDw}??=n,]", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "s30.4.Ex(9Lt]+1)!");
      Locale locale0 = new Locale("s30.4.Ex(9Lt]+1)!", "-8-r9UqBl1");
      FastDateParser fastDateParser0 = new FastDateParser("s30.4.Ex(9Lt]+1)!", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("sc@3Tf)ou'x", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("6fb\"~H)vL`t?Q] ");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("FaqstDateParser[", timeZone0, locale0);
      try { 
        fastDateParser0.parse("FaqstDateParser[");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"FaqstDateParser[\" does not match (\\p{IsNd}++)(\u5348\u524D|\u5348\u5F8C)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("[6yzYH", timeZone0, locale0);
      assertEquals("[6yzYH", fastDateParser0.getPattern());
  }
}

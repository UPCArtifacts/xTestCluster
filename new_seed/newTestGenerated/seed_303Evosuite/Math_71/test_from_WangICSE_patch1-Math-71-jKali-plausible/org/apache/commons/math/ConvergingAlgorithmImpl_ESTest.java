/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 03 20:02:26 GMT 2023
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.integration.RombergIntegrator;
import org.apache.commons.math.analysis.integration.SimpsonIntegrator;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvergingAlgorithmImpl_ESTest extends ConvergingAlgorithmImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.setMaximalIterationCount(0);
      assertEquals(0, secantSolver0.getMaximalIterationCount());
      
      secantSolver0.resetMaximalIterationCount();
      assertEquals(100, secantSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.setAbsoluteAccuracy(63.0);
      assertEquals(63.0, secantSolver0.getAbsoluteAccuracy(), 0.01);
      
      secantSolver0.resetAbsoluteAccuracy();
      assertEquals(0.0, secantSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      simpsonIntegrator0.setRelativeAccuracy((-1998.793));
      assertEquals((-1998.793), simpsonIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver((-2661), Double.NaN);
      brentSolver0.setMaximalIterationCount((-608));
      assertEquals((-608), brentSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      assertEquals(1.0E-6, simpsonIntegrator0.getRelativeAccuracy(), 0.01);
      
      simpsonIntegrator0.resetRelativeAccuracy();
      assertEquals(0.0, simpsonIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      double double0 = rombergIntegrator0.getRelativeAccuracy();
      assertEquals(32, rombergIntegrator0.getMaximalIterationCount());
      assertEquals(1.0E-6, double0, 0.01);
      assertEquals(0, rombergIntegrator0.getIterationCount());
      assertEquals(1.0E-15, rombergIntegrator0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.setRelativeAccuracy((-1651.4283));
      double double0 = riddersSolver0.getRelativeAccuracy();
      assertEquals((-1651.4283), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      simpsonIntegrator0.setMaximalIterationCount((-1206));
      int int0 = simpsonIntegrator0.getMaximalIterationCount();
      assertEquals((-1206), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 5506.09915546057;
      doubleArray0[3] = (-1314.4889019300329);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      secantSolver0.solve((UnivariateRealFunction) polynomialFunction0, 1.0, 1601.034);
      int int0 = secantSolver0.getIterationCount();
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      
      riddersSolver0.setAbsoluteAccuracy(0.0);
      double double0 = riddersSolver0.getAbsoluteAccuracy();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double double0 = laguerreSolver0.getAbsoluteAccuracy();
      assertEquals(0, laguerreSolver0.getIterationCount());
      assertEquals(0.0, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      double double0 = riddersSolver0.getRelativeAccuracy();
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      simpsonIntegrator0.setAbsoluteAccuracy(64);
      assertEquals(64.0, simpsonIntegrator0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.resetMaximalIterationCount();
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(100, secantSolver0.getMaximalIterationCount());
      assertEquals(0.0, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, secantSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(64, 64);
      assertEquals(64, brentSolver0.getMaximalIterationCount());
      
      brentSolver0.setMaximalIterationCount(0);
      int int0 = brentSolver0.getMaximalIterationCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      int int0 = secantSolver0.getIterationCount();
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, secantSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver((-2991.636503848));
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals((-2991.636503848), double0, 0.01);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      int int0 = simpsonIntegrator0.getMaximalIterationCount();
      assertEquals(1.0E-6, simpsonIntegrator0.getRelativeAccuracy(), 0.01);
      assertEquals(64, int0);
      assertEquals(1.0E-15, simpsonIntegrator0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0, simpsonIntegrator0.getIterationCount());
  }
}

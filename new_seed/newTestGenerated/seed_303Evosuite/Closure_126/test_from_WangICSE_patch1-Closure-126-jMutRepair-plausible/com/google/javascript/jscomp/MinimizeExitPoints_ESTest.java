/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 04 00:52:23 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MinimizeExitPoints;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MinimizeExitPoints_ESTest extends MinimizeExitPoints_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = compiler0.parseSyntheticCode("Hash-Yg.sha256()", "Hash-Yg.sha256()");
      Node node1 = Node.newString(105, "Hash-Yg.sha256()");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = Node.newString(105, "#Jox %*x", 105, 105);
      Node node1 = new Node(114, node0, node0, node0, 1, (-689));
      // Undeclared exception!
      try { 
        minimizeExitPoints0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
      Node node0 = new Node(79, 79, 79);
      node0.addChildToFront(node0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, 79, "fVs}jk*(Sgw1Vo|:h]o-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 79
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Logger logger0 = Logger.getLogger("");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node(898, 898, 1741);
      Node node1 = new Node(115, node0, node0, node0, node0, 52, 114);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      minimizeExitPoints0.visit(nodeTraversal0, node1, node0);
      assertFalse(node0.isFromExterns());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
      Node node0 = new Node(14, 14, 14);
      node0.addChildToFront(node0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, 14, "fVs}jk*(Sgw1Vo|:h]o-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LT 14 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Logger logger0 = Logger.getLogger("");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Node node0 = Node.newString((-427), "Dk<");
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      minimizeExitPoints0.tryMinimizeExits(node0, (-427), "o9");
      assertEquals(56, Node.CHANGE_TIME);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = Node.newString(126, "Dk<");
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, 8, "Dk<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
      Node node0 = new Node(77, 77, 77);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, 52, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
      Node node0 = new Node(108);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, 32, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
      Node node0 = Node.newString(4, "fVs}jk*(Sgw1Vo|:h]o-", 4, 4);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.tryMinimizeExits(node0, 4, "fVs}jk*(Sgw1Vo|:h]o-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = compiler0.parseSyntheticCode("LOCAL_BLOCK", "com.google.javascript.jscomp.parsing.Config");
      Node node1 = new Node(126, node0, node0, node0, 132, (-534));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node1, (Node) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SCRIPT 1 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000713] [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000714] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000715] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Logger logger0 = Logger.getLogger("");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = new Node(898, 898, 1741);
      Node node1 = new Node(115, node0, node0, node0, node0, 52, 114);
      minimizeExitPoints0.process(node1, node1);
      assertFalse(node1.isOnlyModifiesThisCall());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = Node.newString(105, "#Jox %*x", 105, 105);
      Node node1 = new Node(114, node0, node0, node0, 1, (-689));
      minimizeExitPoints0.visit((NodeTraversal) null, node1, node0);
      assertFalse(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      Node node0 = Node.newString(113, "O.4BozAx%]s+(");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0, syntacticScopeCreator0);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MinimizeExitPoints", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node0 = Node.newString(105, "#Jox %*x", 105, 105);
      Node node1 = new Node(3673, node0, node0, 1676, 4);
      Node node2 = peepholeFoldWithTypes0.optimizeSubtree(node1);
      minimizeExitPoints0.visit((NodeTraversal) null, node2, node2);
      assertEquals(1676, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
      SyntheticAst syntheticAst0 = new SyntheticAst("HashiYg.sha256()");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      // Undeclared exception!
      try { 
        minimizeExitPoints0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }
}

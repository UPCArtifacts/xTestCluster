/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 03 22:10:48 GMT 2023
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang.WordUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WordUtils_ESTest extends WordUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = WordUtils.abbreviate(" ", (-1227), 1694, "+");
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = WordUtils.abbreviate("|D@EJ", 5, 5, "|D@EJ");
      assertEquals("|D@EJ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = WordUtils.wrap("Cannot\npad\na\nnegative\namount:\n", (-3131), "Cannot\npad\na\nnegative\namount:\n", true);
      assertEquals("CCannot\npad\na\nnegative\namount:\naCannot\npad\na\nnegative\namount:\nnCannot\npad\na\nnegative\namount:\nnCannot\npad\na\nnegative\namount:\noCannot\npad\na\nnegative\namount:\ntCannot\npad\na\nnegative\namount:\n\nCannot\npad\na\nnegative\namount:\npCannot\npad\na\nnegative\namount:\naCannot\npad\na\nnegative\namount:\ndCannot\npad\na\nnegative\namount:\n\nCannot\npad\na\nnegative\namount:\naCannot\npad\na\nnegative\namount:\n\nCannot\npad\na\nnegative\namount:\nnCannot\npad\na\nnegative\namount:\neCannot\npad\na\nnegative\namount:\ngCannot\npad\na\nnegative\namount:\naCannot\npad\na\nnegative\namount:\ntCannot\npad\na\nnegative\namount:\niCannot\npad\na\nnegative\namount:\nvCannot\npad\na\nnegative\namount:\neCannot\npad\na\nnegative\namount:\n\nCannot\npad\na\nnegative\namount:\naCannot\npad\na\nnegative\namount:\nmCannot\npad\na\nnegative\namount:\noCannot\npad\na\nnegative\namount:\nuCannot\npad\na\nnegative\namount:\nnCannot\npad\na\nnegative\namount:\ntCannot\npad\na\nnegative\namount:\n:Cannot\npad\na\nnegative\namount:\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = WordUtils.wrap("", (-1218), "org.apache.commons.lang.WordUtils", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = WordUtils.wrap("", (-24));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = WordUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        WordUtils.abbreviate("ML", 1703, 1, "ML");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = WordUtils.initials("HHU j-b9`[[L|-}T&", (char[]) null);
      assertEquals("Hj", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = WordUtils.initials((String) null, (char[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = WordUtils.initials("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = 'd';
      String string0 = WordUtils.uncapitalize("dZs9:\"oz$,9k}", charArray0);
      assertEquals("dzs9:\"oz$,9k}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = WordUtils.uncapitalize("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = WordUtils.uncapitalize((String) null, (char[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = WordUtils.capitalizeFully("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = WordUtils.capitalizeFully((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("B1;e{23V6IN", (char[]) null);
      assertEquals("B1;e{23v6in", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'd';
      String string0 = WordUtils.capitalize("java.awt.headless", charArray0);
      assertEquals("Java.awt.headLess", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = WordUtils.capitalize((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = WordUtils.wrap("ab]1 GT/", 2, "Windows NT", false);
      assertEquals("ab]1Windows NTGT/", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = WordUtils.wrap("%=sUD?xu9d", 0, (String) null, true);
      assertEquals("%\n=\ns\nU\nD\n?\nx\nu\n9\nd", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = WordUtils.abbreviate("t'2\"fdEj4N\u0004 ", (-712), 2, "");
      assertEquals("t'", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = WordUtils.abbreviate(")5\")XZAw9^l4", (-142), 0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = WordUtils.abbreviate(" ", 44, 44, " ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = WordUtils.abbreviate(",53M8?4$Q+,VwP6t,`", (-1), (-1), "\"<oqJPBO _");
      assertEquals(",53M8?4$Q+,VwP6t,`", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = WordUtils.abbreviate("", (-142), (-142), "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = WordUtils.abbreviate((String) null, 1, 1, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = WordUtils.abbreviate(" ", 0, (-2266), "java.class.path");
      assertEquals("java.class.path", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = '7';
      String string0 = WordUtils.initials("[%*8fw47(", charArray0);
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.initials("4/", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = WordUtils.initials("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = WordUtils.initials((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = WordUtils.swapCase("java.awt.printerjob");
      assertEquals("JAVA.AWT.PRINTERJOB", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = WordUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = WordUtils.swapCase("GdY*^");
      assertEquals("gDy*^", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = WordUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = WordUtils.uncapitalize(" S,t{oHa:HWG!.^l1r");
      assertEquals(" s,t{oHa:HWG!.^l1r", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.uncapitalize("*)Oz#r", charArray0);
      assertEquals("*)Oz#r", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = WordUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("org.apache.commons.lang.WordUtils");
      assertEquals("Org.apache.commons.lang.wordutils", string0);
      
      char[] charArray0 = new char[6];
      String string1 = WordUtils.uncapitalize(string0, charArray0);
      assertEquals("org.apache.commons.lang.wordutils", string1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalizeFully("java.version", charArray0);
      assertEquals("java.version", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = '7';
      String string0 = WordUtils.capitalizeFully("[%*8Fw47(", charArray0);
      assertEquals("[%*8fw47(", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalize("Y.", charArray0);
      assertEquals("Y.", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = WordUtils.capitalize("", (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = WordUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = WordUtils.wrap("Cannot pad a negative amount: ", (-3426));
      assertEquals("Cannot\npad\na\nnegative\namount:\n", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = WordUtils.wrap("r(`t|b 'zp>:&`_YR", (-432), "gDy*^", true);
      assertEquals("rgDy*^(gDy*^gDy*^`gDy*^tgDy*^|gDy*^bgDy*^'gDy*^zgDy*^pgDy*^>gDy*^:gDy*^&gDy*^`gDy*^_gDy*^YgDy*^R", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = WordUtils.wrap(" s,t{oHa:HWG!.^l1r", (-5124), "*?C;u\"0R6@zAkvPU", false);
      assertEquals("s,t{oHa:HWG!.^l1r", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = WordUtils.wrap("Org.apache.commons.lang.wordutils", 1, "org.apache.commons.lang.WordUtils", true);
      char[] charArray0 = new char[6];
      WordUtils.capitalizeFully(string0, charArray0);
      // Undeclared exception!
      WordUtils.uncapitalize(string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, 2383, "java.class.path", false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      WordUtils wordUtils0 = new WordUtils();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = WordUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = WordUtils.initials("?/<Z@,HB%7aMx>Nmz8");
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = WordUtils.capitalize("GdY*^");
      assertEquals("GdY*^", string0);
  }
}

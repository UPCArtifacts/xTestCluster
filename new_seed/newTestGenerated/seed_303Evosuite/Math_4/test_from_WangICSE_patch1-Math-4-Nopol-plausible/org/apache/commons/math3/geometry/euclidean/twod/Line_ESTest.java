/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 03 22:27:20 GMT 2023
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.AffineTransform;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-1.0), 1.570796251296997, 0.0, 1.0E-20, 908.1885377, 1.0E-10);
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      assertNotNull(transform0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, 1.0E-10);
      boolean boolean0 = line0.isParallelTo(line1);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D((-3.43338934259355E-8), 1641.6166807734805);
      Line line0 = new Line(vector2D0, vector2D1);
      line0.setOriginOffset((-566.403303738));
      line0.intersection(line0);
      assertEquals((-566.403303738), line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(line0);
      Vector2D vector2D1 = line1.intersection(line0);
      assertNull(vector2D1);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 0.0);
      Line line1 = new Line(vector2D0, 1.0E-10);
      Vector2D vector2D1 = line0.intersection(line1);
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
      assertNotNull(vector2D1);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 2939.217);
      line0.setAngle(3.141592653589793);
      Line line1 = line0.getReverse();
      assertEquals(Double.POSITIVE_INFINITY, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 3.141592653589793);
      line0.revertSelf();
      assertEquals(Double.POSITIVE_INFINITY, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(0.08560400821268786, vector2D0);
      Line line0 = new Line(vector2D1, vector2D1);
      line0.reset(vector2D1, vector2D0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-360.9505));
      Vector2D vector2D1 = new Vector2D((-360.9505), vector2D0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D1);
      assertEquals(Double.NEGATIVE_INFINITY, vector1D0.getX(), 0.01);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Plane plane0 = new Plane(vector3D0, vector3D0);
      Vector2D vector2D0 = plane0.toSubSpace(vector3D0);
      Line line0 = new Line(vector2D0, 0.0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      line0.toSpace(vector1D0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1321.0, 1321.0);
      Vector2D vector2D1 = new Vector2D(1321.0, vector2D0);
      Line line0 = new Line(vector2D1, vector2D0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D2 = line0.toSpace(vector1D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D2.getX(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-3.5997360512765566E-9), (-1049.1962));
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.getReverse();
      Vector1D vector1D0 = Vector1D.ONE;
      Vector2D vector2D1 = line1.toSpace(vector1D0);
      assertEquals((-1.0), vector2D1.getX(), 0.01);
      assertEquals((-1049.1962), vector2D1.getY(), 0.01);
      assertEquals(1049.1966765551824, vector2D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector2D vector2D1 = line0.toSpace(vector1D0);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D(5.283185307179586, 2292.24144735827);
      Line line0 = new Line(vector2D1, (-3133.7789));
      Line line1 = new Line(vector2D0, 598.5487477);
      Vector2D vector2D2 = line0.intersection(line1);
      assertEquals(86.9086100744757, line0.getOriginOffset(), 0.01);
      assertTrue(vector2D2.equals((Object)vector2D0));
      assertNotNull(vector2D2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-3.5997360512765566E-9), (-1049.1962));
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, (-1049.1962));
      Vector2D vector2D1 = line0.intersection(line1);
      assertEquals(1049.1962, vector2D1.getNorm(), 0.01);
      assertEquals((-3.6008731272026107E-9), vector2D1.getX(), 0.01);
      assertEquals((-1049.1962), vector2D1.getY(), 0.01);
      assertNotNull(vector2D1);
      assertEquals((-1044.3906964589125), line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.getReverse();
      assertEquals(-0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1321.0, 1321.0);
      Vector2D vector2D1 = new Vector2D(1321.0, vector2D0);
      Line line0 = new Line(vector2D1, vector2D0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector2D vector2D2 = line0.getPointAt(vector1D0, 1321.0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D2.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D2.getX(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      line0.getPointAt(vector1D0, 1300.0948743);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector2D vector2D1 = line0.getPointAt(vector1D0, -0.0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOriginOffset();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1237.229120916, 1237.229120916);
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOriginOffset();
      assertEquals(1237.229120916, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1237.229120916, 1237.229120916);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(line0);
      Vector2D vector2D1 = new Vector2D(1237.229120916, vector2D0);
      line0.reset(vector2D1, vector2D1);
      double double0 = line0.getOffset(line1);
      assertEquals(1530735.8976425782, line0.getOriginOffset(), 0.01);
      assertEquals(1529498.6685216622, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1237.229120916, 1237.229120916);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, 1151.5226567768166);
      Line line2 = line1.getReverse();
      line0.setOriginOffset(3383.330008);
      double double0 = line2.getOffset(line0);
      assertEquals(3383.330008, line0.getOriginOffset(), 0.01);
      assertEquals((-1997.2749239618636), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.4060345854128293, 1.4060345854128293);
      Line line0 = new Line(vector2D0, 1.0E-10);
      line0.setOriginOffset(1.4060345854128293);
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D0);
      assertEquals(1.4060345854128293, line0.getOriginOffset(), 0.01);
      assertEquals(1.4060352881983817E-10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D((-1980.52), 0.7119372577125788);
      Line line0 = new Line(vector2D0, vector2D1);
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D1);
      assertEquals((-1.5432100042289676E-14), double0, 0.01);
      assertEquals(-0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1237.229120916, 1237.229120916);
      Line line0 = new Line(vector2D0, 1151.5226567768166);
      double double0 = line0.getAngle();
      assertEquals(1.6997455629523301, double0, 0.01);
      assertEquals((-1386.0550840381363), line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, (-1.2246467991473532E-16));
      double double0 = line0.getAngle();
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals((-1.2246467991473532E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1237.229120916, 1237.229120916);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, 1151.5226567768166);
      Vector1D vector1D0 = Vector1D.ONE;
      Vector2D vector2D1 = line1.toSpace(vector1D0);
      double double0 = line0.distance(vector2D1);
      assertEquals(1386.055444774113, vector2D1.getNorm(), 0.01);
      assertEquals(1058.0015870072566, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.copySelf();
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1237.229120916, 1237.229120916);
      Line line0 = new Line(vector2D0, 1151.5226567768166);
      Line line1 = line0.copySelf();
      assertEquals((-1386.0550840381363), line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.translateToPoint((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.sameOrientationAs((Hyperplane<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.reset(vector2D0, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.reset((Vector2D) null, (-2374.72224));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.isParallelTo((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Line.getTransform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.getPointAt((Vector1D) null, 1680.450956082);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.getOffset((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.distance((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.contains((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector2D) null, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector2D) null, 1.0E-20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.reset(vector2D0, vector2D0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      float[] floatArray0 = new float[6];
      AffineTransform affineTransform0 = new AffineTransform(floatArray0);
      try { 
        Line.getTransform(affineTransform0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non-invertible affine transform collapses some lines into single points
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.reset(vector2D0, 2362.7081032429);
      boolean boolean0 = line0.isParallelTo(line0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1237.229120916, 1237.229120916);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, 1151.5226567768166);
      boolean boolean0 = line1.isParallelTo(line0);
      assertEquals((-1386.0550840381363), line1.getOriginOffset(), 0.01);
      assertFalse(boolean0);
      assertEquals(1237.229120916, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.contains(vector2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1321.0, 1321.0);
      Vector2D vector2D1 = new Vector2D(1321.0, vector2D0, 1321.0, vector2D0, 0.0, vector2D0, 0.0, vector2D0);
      Line line0 = new Line(vector2D1, vector2D0);
      boolean boolean0 = line0.contains(vector2D1);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 0.1428571343421936);
      boolean boolean0 = line0.sameOrientationAs(line0);
      assertTrue(boolean0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-2026.34740393185));
      Line line1 = new Line(line0);
      assertEquals(Double.NEGATIVE_INFINITY, line1.getOriginOffset(), 0.01);
      
      line1.reset(vector2D0, (-106.437179484652));
      boolean boolean0 = line0.sameOrientationAs(line1);
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1237.229120916, 1237.229120916);
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOffset(line0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1237.229120916, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-2026.34740393185));
      Line line1 = new Line(line0);
      assertEquals(Double.NEGATIVE_INFINITY, line1.getOriginOffset(), 0.01);
      
      line1.reset(vector2D0, (-106.437179484652));
      double double0 = line1.getOffset(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D((-3.43338934259355E-8), 1628.5);
      Line line0 = new Line(vector2D0, vector2D1);
      line0.setOriginOffset(1628.5);
      Vector2D vector2D2 = line0.intersection(line0);
      assertNull(vector2D2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D((-3.43338934259355E-8), 1628.5);
      Line line0 = new Line(vector2D0, vector2D1);
      Vector2D vector2D2 = line0.intersection(line0);
      assertEquals(-0.0, line0.getOriginOffset(), 0.01);
      assertNotNull(vector2D2);
      assertEquals(Double.NaN, vector2D2.getX(), 0.01);
      assertEquals(Double.NaN, vector2D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Plane plane0 = new Plane(vector3D0, vector3D0);
      Vector2D vector2D0 = plane0.toSubSpace(vector3D0);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, (-652.237409));
      Vector2D vector2D1 = line0.intersection(line1);
      assertEquals(-0.0, vector2D1.getY(), 0.01);
      assertEquals(-0.0, vector2D1.getX(), 0.01);
      assertNotNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(991.8, 2132.932149099348);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.getReverse();
      assertEquals((-2132.932149099348), line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.getReverse();
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Plane plane0 = new Plane(vector3D0, vector3D0);
      Vector2D vector2D0 = plane0.toSubSpace(vector3D0);
      Line line0 = new Line(vector2D0, vector2D0);
      line0.revertSelf();
      assertEquals(-0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.revertSelf();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-2026.34740393185));
      double double0 = line0.getOriginOffset();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(991.8, 2132.932149099348);
      Line line0 = new Line(vector2D0, vector2D0);
      line0.wholeHyperplane();
      assertEquals(2132.932149099348, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1237.229120916, 1237.229120916);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.copySelf();
      assertEquals(1237.229120916, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(991.8, 2132.932149099348);
      Line line0 = new Line(vector2D0, vector2D0);
      line0.wholeSpace();
      assertEquals(2132.932149099348, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1237.229120916, 1237.229120916);
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getAngle();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1237.229120916, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1237.229120916, 1237.229120916);
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.distance(vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(774.325189);
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      assertNotNull(transform0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.translateToPoint(vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
  }
}

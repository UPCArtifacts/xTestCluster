/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 16:47:37 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSortedMap;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.GlobalVarReferenceMap;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import java.util.List;
import java.util.SortedMap;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GlobalVarReferenceMap_ESTest extends GlobalVarReferenceMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("/Mn");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
      ImmutableList<CompilerInput> immutableList0 = ImmutableList.of(compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0);
      ImmutableList<CompilerInput> immutableList1 = immutableList0.reverse();
      GlobalVarReferenceMap globalVarReferenceMap0 = new GlobalVarReferenceMap(immutableList1, immutableList0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("/Mn");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
      ImmutableList<CompilerInput> immutableList0 = ImmutableList.of(compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0);
      GlobalVarReferenceMap globalVarReferenceMap0 = new GlobalVarReferenceMap(immutableList0, immutableList0);
      // Undeclared exception!
      try { 
        globalVarReferenceMap0.updateReferencesWithGlobalScope((Scope) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.GlobalVarReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile("=~wKP");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0, false);
      ImmutableList<CompilerInput> immutableList0 = ImmutableList.of(compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0);
      GlobalVarReferenceMap globalVarReferenceMap0 = new GlobalVarReferenceMap(immutableList0, immutableList0);
      // Undeclared exception!
      try { 
        globalVarReferenceMap0.getReferences((Scope.Var) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.GlobalVarReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GlobalVarReferenceMap globalVarReferenceMap0 = null;
      try {
        globalVarReferenceMap0 = new GlobalVarReferenceMap((List<CompilerInput>) null, (List<CompilerInput>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.GlobalVarReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      GlobalVarReferenceMap.GlobalVarRefCleanupPass globalVarReferenceMap_GlobalVarRefCleanupPass0 = new GlobalVarReferenceMap.GlobalVarRefCleanupPass(compiler0);
      globalVarReferenceMap_GlobalVarRefCleanupPass0.hotSwapScript((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("/Mn");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
      ImmutableList<CompilerInput> immutableList0 = ImmutableList.of(compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0);
      GlobalVarReferenceMap globalVarReferenceMap0 = new GlobalVarReferenceMap(immutableList0, immutableList0);
      TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      ImmutableSortedMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> immutableSortedMap0 = ImmutableSortedMap.copyOfSorted((SortedMap<Scope.Var, ? extends ReferenceCollectingCallback.ReferenceCollection>) treeMap0);
      Node node0 = Node.newNumber((double) (-1));
      globalVarReferenceMap0.updateGlobalVarReferences(immutableSortedMap0, node0);
      globalVarReferenceMap0.updateReferencesWithGlobalScope((Scope) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("/Mn");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
      ImmutableList<CompilerInput> immutableList0 = ImmutableList.of(compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0, compilerInput0);
      GlobalVarReferenceMap globalVarReferenceMap0 = new GlobalVarReferenceMap(immutableList0, immutableList0);
      TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      ImmutableSortedMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> immutableSortedMap0 = ImmutableSortedMap.copyOfSorted((SortedMap<Scope.Var, ? extends ReferenceCollectingCallback.ReferenceCollection>) treeMap0);
      Node node0 = Node.newNumber((double) (-1));
      globalVarReferenceMap0.updateGlobalVarReferences(immutableSortedMap0, node0);
      globalVarReferenceMap0.updateGlobalVarReferences(treeMap0, node0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      GlobalVarReferenceMap.GlobalVarRefCleanupPass globalVarReferenceMap_GlobalVarRefCleanupPass0 = new GlobalVarReferenceMap.GlobalVarRefCleanupPass(compiler0);
      Node node0 = new Node(5675, 1, 1);
      globalVarReferenceMap_GlobalVarRefCleanupPass0.process(node0, node0);
      assertFalse(node0.isWhile());
  }
}
